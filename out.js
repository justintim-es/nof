// Generated by dart2js (NullSafetyMode.sound, no-legacy-javascript, new-holders, csp), the Dart to JavaScript compiler version: 2.15.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    HttpServer_bind(address, port, backlog, shared) {
      return A._HttpServer_bind(address, port, backlog, false, false);
    },
    HttpException$(message, uri) {
      return new A.HttpException(message, uri);
    },
    HttpDate_format(date) {
      var t2,
        d = date.toUtc$0(),
        t1 = A.Primitives_getWeekday(d) - 1;
      if (!(t1 >= 0 && t1 < 7))
        return A.ioore(B.List_ECn, t1);
      t1 = "" + B.List_ECn[t1] + ", ";
      t1 = t1 + (A.Primitives_getDay(d) <= 9 ? "0" : "") + B.JSInt_methods.toString$0(A.Primitives_getDay(d)) + " ";
      t2 = A.Primitives_getMonth(d) - 1;
      if (!(t2 >= 0 && t2 < 12))
        return A.ioore(B.List_h8w, t2);
      t2 = t1 + B.List_h8w[t2] + " " + B.JSInt_methods.toString$0(A.Primitives_getYear(d));
      t1 = t2 + (A.Primitives_getHours(d) <= 9 ? " 0" : " ") + B.JSInt_methods.toString$0(A.Primitives_getHours(d));
      t1 = t1 + (A.Primitives_getMinutes(d) <= 9 ? ":0" : ":") + B.JSInt_methods.toString$0(A.Primitives_getMinutes(d));
      t1 = t1 + (A.Primitives_getSeconds(d) <= 9 ? ":0" : ":") + B.JSInt_methods.toString$0(A.Primitives_getSeconds(d)) + " GMT";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _HttpHeaders$(protocolVersion, defaultPortForScheme, initialHeaders) {
      var t1 = new A._HttpHeaders(A.HashMap_HashMap(type$.String, type$.List_String), protocolVersion);
      t1._HttpHeaders$3$defaultPortForScheme$initialHeaders(protocolVersion, defaultPortForScheme, initialHeaders);
      return t1;
    },
    _HttpHeaders__validateField(field) {
      var t1, i, t2;
      for (t1 = field.length, i = 0; i < t1; ++i) {
        t2 = B.JSString_methods._codeUnitAt$1(field, i);
        if (!(t2 > 31 && t2 < 128 && !B.List_NUU[t2]))
          throw A.wrapException(A.FormatException$("Invalid HTTP header field name: " + B.C_JsonCodec.encode$1(field), field, i));
      }
      return field.toLowerCase();
    },
    _HttpHeaders__validateValue(value) {
      var t1, i, t2;
      if (typeof value != "string")
        return value;
      for (t1 = value.length, i = 0; i < t1; ++i) {
        t2 = B.JSString_methods._codeUnitAt$1(value, i);
        if (!(t2 > 31 && t2 < 128 || t2 === 9))
          throw A.wrapException(A.FormatException$("Invalid HTTP header field value: " + B.C_JsonCodec.encode$1(value), value, i));
      }
      return value;
    },
    _HeaderValue__isToken(token) {
      var i, codeUnit,
        t1 = token.length;
      if (t1 === 0)
        return false;
      for (i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(token, i);
        if (codeUnit <= 32 || codeUnit >= 127 || B.JSString_methods.contains$1('"(),/:;<=>?@[]{}', token[i]))
          return false;
      }
      return true;
    },
    _ContentType$(primaryType, subType, charset, parameters) {
      var t1 = new A._ContentType(primaryType, subType, "");
      t1._HeaderValue$2("", B.Map_empty1);
      t1._ContentType$4(primaryType, subType, charset, parameters);
      return t1;
    },
    _Cookie__validateName(newName) {
      var t1, i, codeUnit;
      for (t1 = newName.length, i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(newName, i);
        if (codeUnit <= 32 || codeUnit >= 127 || B.JSArray_methods.contains$1(B.List_A8J, newName[i]))
          throw A.wrapException(A.FormatException$("Invalid character in cookie name, code unit: '" + codeUnit + "'", newName, i));
      }
      return newName;
    },
    _Cookie__validateValue(newValue) {
      var start, i, codeUnit, t1,
        end = newValue.length;
      if (2 <= end && B.JSString_methods._codeUnitAt$1(newValue, 0) === 34 && B.JSString_methods.codeUnitAt$1(newValue, end - 1) === 34) {
        --end;
        start = 1;
      } else
        start = 0;
      for (i = start; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(newValue, i);
        if (codeUnit !== 33)
          if (!(codeUnit >= 35 && codeUnit <= 43))
            if (!(codeUnit >= 45 && codeUnit <= 58))
              if (!(codeUnit >= 60 && codeUnit <= 91))
                t1 = codeUnit >= 93 && codeUnit <= 126;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (!t1)
          throw A.wrapException(A.FormatException$("Invalid character in cookie value, code unit: '" + codeUnit + "'", newValue, i));
      }
      return newValue;
    },
    _CopyingBytesBuilder__pow2roundup(x) {
      --x;
      x |= B.JSInt_methods._shrOtherPositive$1(x, 1);
      x |= x >>> 2;
      x |= x >>> 4;
      x |= x >>> 8;
      return ((x | x >>> 16) >>> 0) + 1;
    },
    _HttpRequest$(response, _incoming, _httpServer, _httpConnection) {
      var t1 = new A._HttpRequest(response, _httpServer, _httpConnection, _incoming);
      t1._HttpRequest$4(response, _incoming, _httpServer, _httpConnection);
      return t1;
    },
    _HttpConnection$(_socket, _httpServer) {
      var t1 = new A._HttpConnection(_socket, _httpServer, A._HttpParser$_(true), 0);
      t1._HttpConnection$2(_socket, _httpServer);
      return t1;
    },
    _HttpServer_bind(address, port, backlog, v6Only, shared) {
      return A.ServerSocket_bind(address, port, backlog, false, false).then$1$1(new A._HttpServer_bind_closure(), type$.HttpServer);
    },
    _HttpServer$_(_serverSocket, _closeServer) {
      var t2, _null = null,
        _s12_ = "content-type",
        defaultResponseHeaders = A._HttpHeaders$("1.1", 80, _null),
        t1 = $.$get$ContentType_text();
      if (!defaultResponseHeaders._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", _null));
      t2 = defaultResponseHeaders.__http$_headers;
      if (t1 == null)
        t2.remove$1(0, _s12_);
      else
        t2.$indexSet(0, _s12_, A._setArrayType([t1.toString$0(0)], type$.JSArray_String));
      defaultResponseHeaders.$set$2("X-Frame-Options", "SAMEORIGIN");
      defaultResponseHeaders.$set$2("X-Content-Type-Options", "nosniff");
      defaultResponseHeaders.$set$2("X-XSS-Protection", "1; mode=block");
      t1 = type$.LinkedList__HttpConnection;
      t2 = A.StreamController_StreamController(_null, _null, _null, _null, true, type$.HttpRequest);
      t1 = new A._HttpServer(defaultResponseHeaders, _serverSocket, true, new A.LinkedList(t1), new A.LinkedList(t1), t2, 0);
      t2.set$onCancel(t1.get$close());
      t1.set$idleTimeout(B.Duration_120000000);
      $._HttpServer__servers.$indexSet(0, t1.get$_serviceId(), t1);
      return t1;
    },
    _HttpConnectionInfo_create(socket) {
      var exception;
      try {
        socket.get$remoteAddress();
        socket.get$remotePort();
        socket.get$port();
        return void 1;
      } catch (exception) {
      }
      return null;
    },
    _HttpParser$_(_requestParser) {
      var _null = null,
        t1 = type$.JSArray_int;
      t1 = new A._HttpParser(true, A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], t1), A.StreamController_StreamController(_null, _null, _null, _null, true, type$._HttpIncoming));
      t1._HttpParser$_$1(true);
      return t1;
    },
    _HttpParser__tokenizeFieldValue(headerValue) {
      var t1, start, index, t2,
        tokens = A._setArrayType([], type$.JSArray_String);
      for (t1 = headerValue.length, start = 0, index = 0; index < t1;) {
        t2 = headerValue[index];
        if (t2 === ",") {
          B.JSArray_methods.add$1(tokens, B.JSString_methods.substring$2(headerValue, start, index));
          start = index + 1;
        } else if (t2 === " " || t2 === "\t")
          ++start;
        ++index;
      }
      B.JSArray_methods.add$1(tokens, B.JSString_methods.substring$2(headerValue, start, index));
      return tokens;
    },
    _HttpParser__caseInsensitiveCompare(expected, value) {
      var i, t4, t5,
        t1 = expected.__internal$_string,
        t2 = t1.length,
        t3 = J.getInterceptor$asx(value);
      if (t2 !== t3.get$length(value))
        return false;
      for (i = 0; i < t2; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1(t1, i);
        t5 = t3.$index(value, i);
        if (t4 !== ((t5 - 65 & 127) < 26 ? (t5 | 32) >>> 0 : t5))
          return false;
      }
      return true;
    },
    HttpException: function HttpException(t0, t1) {
      this.message = t0;
      this.uri = t1;
    },
    _HttpHeaders: function _HttpHeaders(t0, t1) {
      var _ = this;
      _.__http$_headers = t0;
      _._originalHeaderNames = null;
      _.protocolVersion = t1;
      _._mutable = true;
      _._contentLength = -1;
      _._persistentConnection = true;
      _._chunkedTransferEncoding = false;
      _.__http$_port = _.__http$_host = null;
    },
    _HttpHeaders_closure: function _HttpHeaders_closure(t0) {
      this.$this = t0;
    },
    _HttpHeaders_forEach_closure: function _HttpHeaders_forEach_closure(t0, t1) {
      this.$this = t0;
      this.action = t1;
    },
    _HttpHeaders__build_closure: function _HttpHeaders__build_closure(t0, t1, t2) {
      this.$this = t0;
      this.ignoreHeader = t1;
      this.builder = t2;
    },
    _HttpHeaders_toString_closure: function _HttpHeaders_toString_closure(t0, t1) {
      this.$this = t0;
      this.sb = t1;
    },
    _HttpHeaders__parseCookies_parseCookieString: function _HttpHeaders__parseCookies_parseCookieString(t0) {
      this.cookies = t0;
    },
    _HttpHeaders__parseCookies_parseCookieString_done: function _HttpHeaders__parseCookies_parseCookieString_done(t0, t1) {
      this._box_0 = t0;
      this.s = t1;
    },
    _HttpHeaders__parseCookies_parseCookieString_skipWS: function _HttpHeaders__parseCookies_parseCookieString_skipWS(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HttpHeaders__parseCookies_parseCookieString_parseName: function _HttpHeaders__parseCookies_parseCookieString_parseName(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HttpHeaders__parseCookies_parseCookieString_parseValue: function _HttpHeaders__parseCookies_parseCookieString_parseValue(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HttpHeaders__parseCookies_parseCookieString_expect: function _HttpHeaders__parseCookies_parseCookieString_expect(t0, t1, t2) {
      this._box_0 = t0;
      this.done = t1;
      this.s = t2;
    },
    _HeaderValue: function _HeaderValue() {
    },
    _HeaderValue_toString_closure: function _HeaderValue_toString_closure(t0) {
      this.sb = t0;
    },
    _ContentType: function _ContentType(t0, t1, t2) {
      var _ = this;
      _._primaryType = t0;
      _._subType = t1;
      _.__http$_value = t2;
      _._unmodifiableParameters = _._parameters = null;
    },
    _ContentType_emptyIfNull: function _ContentType_emptyIfNull() {
    },
    _ContentType_closure: function _ContentType_closure(t0) {
      this.parameterMap = t0;
    },
    _Cookie: function _Cookie(t0, t1) {
      var _ = this;
      _.__http$_name = t0;
      _.__http$_value = t1;
      _._path = null;
      _.httpOnly = true;
    },
    _ServiceObject: function _ServiceObject() {
    },
    _CopyingBytesBuilder: function _CopyingBytesBuilder(t0) {
      this.__http$_length = 0;
      this.__http$_buffer = t0;
    },
    _HttpIncoming: function _HttpIncoming(t0, t1, t2) {
      var _ = this;
      _._dataCompleter = t0;
      _.__http$_stream = t1;
      _.fullBodyRead = false;
      _.headers = t2;
      _.uri = _.method = _.statusCode = null;
      _.hasSubscriber = false;
    },
    _HttpIncoming_listen_closure: function _HttpIncoming_listen_closure(t0) {
      this.$this = t0;
    },
    _HttpInboundMessage: function _HttpInboundMessage() {
    },
    _HttpRequest: function _HttpRequest(t0, t1, t2, t3) {
      var _ = this;
      _.response = t0;
      _._httpServer = t1;
      _._httpConnection = t2;
      _._requestedUri = _._session = null;
      _._incoming = t3;
      _._cookies = null;
    },
    _HttpRequest_closure: function _HttpRequest_closure() {
    },
    _HttpRequest_closure0: function _HttpRequest_closure0() {
    },
    _StreamSinkImpl: function _StreamSinkImpl() {
    },
    _StreamSinkImpl_addStream_targetAddStream: function _StreamSinkImpl_addStream_targetAddStream(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _StreamSinkImpl_addStream_targetAddStream_closure: function _StreamSinkImpl_addStream_targetAddStream_closure(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl_addStream_closure: function _StreamSinkImpl_addStream_closure(t0) {
      this.targetAddStream = t0;
    },
    _StreamSinkImpl__controller_closure: function _StreamSinkImpl__controller_closure(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure0: function _StreamSinkImpl__controller_closure0(t0) {
      this.$this = t0;
    },
    _IOSinkImpl0: function _IOSinkImpl0() {
    },
    _HttpOutboundMessage: function _HttpOutboundMessage() {
    },
    _HttpResponse: function _HttpResponse(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._statusCode = 200;
      _._deadlineTimer = _._httpRequest = _._cookies = null;
      _._encodingSet = false;
      _._bufferOutput = true;
      _.__http$_uri = t0;
      _._outgoing = t1;
      _.headers = t2;
      _._encoding = t3;
      _._profileData = t4;
      _._target = t5;
      _._doneCompleter = t6;
      _._controllerCompleter = _._controllerInstance = null;
      _._hasError = _._isBound = _._isClosed = false;
    },
    _HttpResponse__writeHeader_closure: function _HttpResponse__writeHeader_closure(t0) {
      this.$this = t0;
    },
    _HttpOutgoing: function _HttpOutgoing(t0, t1) {
      var _ = this;
      _._doneCompleter = t0;
      _.socket = t1;
      _.headersWritten = _.ignoreBody = false;
      _.__http$_buffer = null;
      _.__http$_length = 0;
      _._closeFuture = null;
      _.chunked = false;
      _._pendingChunkedFooter = 0;
      _.contentLength = null;
      _._bytesWritten = 0;
      _._gzip = false;
      _._gzipBuffer = _._gzipAdd = _._gzipSink = null;
      _._gzipBufferLength = 0;
      _._socketError = false;
      _.outbound = null;
    },
    _HttpOutgoing_writeHeaders_closure: function _HttpOutgoing_writeHeaders_closure() {
    },
    _HttpOutgoing_writeHeaders_closure0: function _HttpOutgoing_writeHeaders_closure0(t0) {
      this.response = t0;
    },
    _HttpOutgoing_addStream_closure: function _HttpOutgoing_addStream_closure() {
    },
    _HttpOutgoing_addStream_closure0: function _HttpOutgoing_addStream_closure0(t0) {
      this.$this = t0;
    },
    _HttpOutgoing_addStream_onData: function _HttpOutgoing_addStream_onData(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    _HttpOutgoing_addStream_closure1: function _HttpOutgoing_addStream_closure1(t0) {
      this.$this = t0;
    },
    _HttpOutgoing_addStream_closure2: function _HttpOutgoing_addStream_closure2(t0) {
      this.$this = t0;
    },
    _HttpOutgoing_close_finalize: function _HttpOutgoing_close_finalize(t0, t1) {
      this.$this = t0;
      this.outbound = t1;
    },
    _HttpOutgoing_close_finalize_closure: function _HttpOutgoing_close_finalize_closure(t0, t1) {
      this.$this = t0;
      this.outbound = t1;
    },
    _HttpOutgoing_close_finalize_closure0: function _HttpOutgoing_close_finalize_closure0(t0, t1) {
      this.$this = t0;
      this.outbound = t1;
    },
    _HttpConnection: function _HttpConnection(t0, t1, t2, t3) {
      var _ = this;
      _._socket = t0;
      _._httpServer = t1;
      _._httpParser = t2;
      _.__http$_state = 1;
      _.__http$_subscription = null;
      _._idleMark = false;
      _._streamFuture = null;
      _._ServiceObject___serviceId = t3;
      _._collection$_previous = _._collection$_next = _._list = null;
    },
    _HttpConnection_closure: function _HttpConnection_closure(t0) {
      this.$this = t0;
    },
    _HttpConnection__closure: function _HttpConnection__closure(t0) {
      this.$this = t0;
    },
    _HttpConnection__closure0: function _HttpConnection__closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.response = t1;
      _.request = t2;
      _.incoming = t3;
    },
    _HttpConnection__closure1: function _HttpConnection__closure1(t0) {
      this.$this = t0;
    },
    _HttpConnection_closure0: function _HttpConnection_closure0(t0) {
      this.$this = t0;
    },
    _HttpConnection_closure1: function _HttpConnection_closure1(t0) {
      this.$this = t0;
    },
    _HttpServer: function _HttpServer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.defaultResponseHeaders = t0;
      _._sessionManagerInstance = _._idleTimer = null;
      _.closed = false;
      _._serverSocket = t1;
      _._closeServer = t2;
      _._activeConnections = t3;
      _._idleConnections = t4;
      _.__http$_controller = t5;
      _._ServiceObject___serviceId = t6;
    },
    _HttpServer_bind_closure: function _HttpServer_bind_closure() {
    },
    _HttpServer_idleTimeout_closure: function _HttpServer_idleTimeout_closure(t0) {
      this.$this = t0;
    },
    _HttpServer_listen_closure: function _HttpServer_listen_closure(t0) {
      this.$this = t0;
    },
    _HttpServer_listen_closure0: function _HttpServer_listen_closure0(t0) {
      this.$this = t0;
    },
    _HttpParser: function _HttpParser(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._parserCalled = false;
      _.__http$_buffer = null;
      _.__http$_index = -1;
      _._requestParser = t0;
      _.__http$_state = 0;
      _._httpVersionIndex = null;
      _._statusCodeLength = _._statusCode = _._messageType = 0;
      _.__http$_method = t1;
      _._uriOrReasonPhrase = t2;
      _._headerField = t3;
      _._headerValue = t4;
      _._httpVersion = _._headersReceivedSize = 0;
      _._transferLength = -1;
      _._noMessageBody = _._chunked = _._connectionUpgrade = false;
      _._remainingContent = -1;
      _._transferEncoding = _._contentLength = false;
      _._socketSubscription = _._incoming = _.__http$_headers = null;
      _._paused = true;
      _._bodyPaused = false;
      _.__http$_controller = t5;
      _._bodyController = null;
    },
    _HttpParser$__closure: function _HttpParser$__closure(t0) {
      this.$this = t0;
    },
    _HttpParser$__closure0: function _HttpParser$__closure0(t0) {
      this.$this = t0;
    },
    _HttpParser$__closure1: function _HttpParser$__closure1(t0) {
      this.$this = t0;
    },
    _HttpParser$__closure2: function _HttpParser$__closure2(t0) {
      this.$this = t0;
    },
    _HttpParser__createIncoming_closure: function _HttpParser__createIncoming_closure(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpParser__createIncoming_closure0: function _HttpParser__createIncoming_closure0(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpParser__createIncoming_closure1: function _HttpParser__createIncoming_closure1(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpParser__createIncoming_closure2: function _HttpParser__createIncoming_closure2(t0, t1) {
      this.$this = t0;
      this.incoming = t1;
    },
    _HttpSessionManager: function _HttpSessionManager(t0) {
      this._sessions = t0;
      this._timer = null;
    },
    __HttpConnection_LinkedListEntry__ServiceObject: function __HttpConnection_LinkedListEntry__ServiceObject() {
    },
    __HttpServer_Stream__ServiceObject: function __HttpServer_Stream__ServiceObject() {
    },
    createSentinel() {
      return $;
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort_sort(a, compare, $E) {
      A.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    CastStream: function CastStream(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastStreamSubscription: function CastStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _.__internal$_zone = t1;
      _._handleError = _._handleData = null;
      _.$ti = t2;
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this.__internal$_message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._hasSkipped = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, t2,
        keys = A.List_List$from(other.get$keys(), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (_i = 0; t2 = keys.length, _i < t2; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
          k = keys[_i];
          object[k] = $V._as(other.$index(0, k));
        }
        return new A.ConstantStringMap(t2, object, keys, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((B.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var dispatchName, t1, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      if (J.getInterceptor$(object) === B.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_dateNow() {
      return Date.now();
    },
    Primitives_initTicker() {
      var $window, performance;
      if ($.Primitives_timerFrequency !== 0)
        return;
      $.Primitives_timerFrequency = 1000;
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new A.Primitives_initTicker_closure(performance);
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getWeekday(receiver) {
      return B.JSInt_methods.$mod((receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDay() + 0 : A.Primitives_lazyAsJsDate(receiver).getDay() + 0) + 6, 7) + 1;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var argumentCount, jsStub,
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, $arguments, keys, _i, defaultValue, used, key,
        argumentCount = positionalArguments.length,
        requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, positionalArguments);
        return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          $arguments = A.List_List$of(positionalArguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        } else
          $arguments = positionalArguments;
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
        $arguments = A.List_List$of(positionalArguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.get$length(namedArguments))
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$(index, indexable, _s5_, null, $length);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace)
        return A.saveStackTrace(ex, type$.Object._as(ex.dartException));
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message) + " (Error " + ieErrorCode + ")";
              return A.saveStackTrace(ex, new A.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              A._asString(message);
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var receiverField, arity, t1,
        interceptorField = $.BoundClosure__interceptorFieldNameCache;
      interceptorField == null ? $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor") : interceptorField;
      receiverField = $.BoundClosure__receiverFieldNameCache;
      receiverField == null ? $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver") : receiverField;
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    convertMainArgumentList(args) {
      var i,
        result = A._setArrayType([], type$.JSArray_String);
      if (args == null)
        return result;
      if (Array.isArray(args)) {
        for (i = 0; i < args.length; ++i)
          result.push(String(args[i]));
        return result;
      }
      result.push(String(args));
      return result;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else {
        t1 = J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex));
        return !t1.get$isEmpty(t1);
      }
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(), replacement);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      throw A.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1._start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t2._as(t1.__js_helper$_current);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern == "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      if (pattern instanceof A.JSSyntaxRegExp)
        return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, A.escapeReplacement(replacement)) : A.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = t1.get$iterator(t1);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current();
      return B.JSString_methods.replaceRange$3(receiver, match.get$start(), match.get$end(), replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this._start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(A.LateError$fieldADI(fieldName));
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1._value = t1;
    },
    _lateReadCheck(value, $name) {
      if (value === $)
        throw A.wrapException(A.LateError$fieldNI($name));
      return value;
    },
    _lateInitializeOnceCheck(value, $name) {
      if (value !== $)
        throw A.wrapException(A.LateError$fieldADI($name));
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this._value = null;
    },
    _checkLength($length) {
      return $length;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        B.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      var t1;
      A._checkViewArguments(buffer, offsetInBytes, $length);
      t1 = new DataView(buffer, offsetInBytes);
      return t1;
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List($length) {
      return new Uint16Array($length);
    },
    NativeUint16List__create1(arg) {
      return new Uint16Array(arg);
    },
    NativeUint32List_NativeUint32List$fromList(elements) {
      return new Uint32Array(A._ensureNativeList(elements));
    },
    NativeUint32List_NativeUint32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return new Uint32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      return A.createRuntimeType(rti == null ? A.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    checkTypeBound(type, bound, variable, methodName) {
      var _null = null;
      if (A._isSubtype(init.typeUniverse, type, _null, bound, _null))
        return type;
      throw A.wrapException(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, _null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, _null) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object),
        objectTypeDescription = A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = A._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = A._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new A._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(A._Universe__lookupFunctionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return A._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      return A._TimerImpl$(duration._duration / 1000 | 0, callback);
    },
    Timer__createPeriodicTimer(duration, callback) {
      return A._TimerImpl$periodic(duration._duration / 1000 | 0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration() {
      return B._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError(error) {
      return new A._IterationMarker(error, 3);
    },
    _makeSyncStarIterable(body, $T) {
      return new A._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_3uE;
    },
    _invokeErrorHandler(errorHandler, error, stackTrace) {
      if (type$.dynamic_Function_2_Never_and_Never._is(errorHandler))
        return errorHandler.call$2(error, stackTrace);
      else
        return errorHandler.call$1(error);
    },
    Future_Future$sync(computation, $T) {
      var result, error, stackTrace, future, replacement, t1, t2, exception;
      try {
        result = computation.call$0();
        if ($T._eval$1("Future<0>")._is(result))
          return result;
        else {
          t1 = $T._as(result);
          t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
          t2._state = 8;
          t2._resultOrListeners = t1;
          return t2;
        }
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1 = $.Zone__current;
        future = new A._Future(t1, $T._eval$1("_Future<0>"));
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null)
          future._asyncCompleteError$2(replacement.error, replacement.stackTrace);
        else
          future._asyncCompleteError$2(error, stackTrace);
        return future;
      }
    },
    Future_Future$value(value, $T) {
      var t1 = value == null ? $T._as(value) : value,
        t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error(error, $T) {
      var t1, replacement, stackTrace;
      A.checkNotNullable(error, "error", type$.Object);
      t1 = $.Zone__current;
      if (t1 !== B.C__RootZone) {
        replacement = t1.errorCallback$2(error, null);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        } else
          stackTrace = null;
      } else
        stackTrace = null;
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    _Future$zoneValue(value, _zone, $T) {
      var t1 = new A._Future(_zone, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFuture(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t5._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$value(value, $T) {
      var _null = null,
        t1 = $T._eval$1("_AsyncStreamController<0>"),
        t2 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
      t2._add$1(value);
      t2._closeUnchecked$0();
      return new A._ControllerStream(t2, t1._eval$1("_ControllerStream<1>"));
    },
    Stream_Stream$fromIterable(elements, $T) {
      return new A._GeneratedStreamImpl(new A.Stream_Stream$fromIterable_closure(elements, $T), $T._eval$1("_GeneratedStreamImpl<0>"));
    },
    StreamIterator_StreamIterator(stream, $T) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object), $T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      return new A._BufferingStreamSubscription(A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2, $T._eval$1("_BufferingStreamSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$(string$.handle, null));
    },
    _BufferingStreamSubscription__registerDoneHandler(zone, handleDone) {
      var t1 = handleDone == null ? A.async___nullDoneHandler$closure() : handleDone;
      return zone.registerCallback$1$1(t1, type$.void);
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    _runUserCode(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        replacement = $.Zone__current.errorCallback$2(e, s);
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure(subscription, future) {
      return new A._cancelAndErrorClosure_closure(subscription, future);
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _addErrorWithReplacement(sink, error, stackTrace) {
      var replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      }
      sink._addError$2(error, stackTrace);
    },
    Timer_Timer$periodic(duration, callback) {
      var boundCallback,
        t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createPeriodicTimer$2(duration, callback);
      boundCallback = t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer);
      return $.Zone__current.createPeriodicTimer$2(duration, boundCallback);
    },
    ZoneSpecification_ZoneSpecification$from(other, handleUncaughtError) {
      var t1 = handleUncaughtError == null ? other.handleUncaughtError : handleUncaughtError;
      return new A._ZoneSpecification(t1, other.run, other.runUnary, other.runBinary, other.registerCallback, other.registerUnaryCallback, other.registerBinaryCallback, other.errorCallback, other.scheduleMicrotask, other.createTimer, other.createPeriodicTimer, other.print, other.fork);
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(error, type$.StackTrace._as(stackTrace));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("0()")._as(f);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function._as(callback);
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function_Timer._as(callback);
      return A.Timer__createPeriodicTimer(duration, B.C__RootZone !== zone ? zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer) : callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(A._asString(line));
    },
    _printToZone(line) {
      $.Zone__current.print$1(line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, handleUncaughtError;
      type$.nullable_ZoneSpecification._as(specification);
      type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(zoneValues);
      $.printToZone = A.async___printToZone$closure();
      valueMap = zone.get$_async$_map();
      valueMap = valueMap;
      t1 = new A._CustomZone(zone.get$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_registerCallback(), zone.get$_registerUnaryCallback(), zone.get$_registerBinaryCallback(), zone.get$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_handleUncaughtError(), zone, valueMap);
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1.set$_handleUncaughtError(new A._ZoneFunction(t1, handleUncaughtError, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace));
      return t1;
    },
    runZonedGuarded(body, onError, $R) {
      var error, stackTrace, parentZone, errorHandler, t1, exception, _null = null, zoneSpecification = null, zoneValues = null;
      A.checkNotNullable(body, "body", $R._eval$1("0()"));
      A.checkNotNullable(onError, "onError", type$.void_Function_Object_StackTrace);
      parentZone = $.Zone__current;
      errorHandler = new A.runZonedGuarded_closure(parentZone, onError);
      if (zoneSpecification == null)
        zoneSpecification = new A._ZoneSpecification(errorHandler, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      else
        zoneSpecification = A.ZoneSpecification_ZoneSpecification$from(zoneSpecification, errorHandler);
      try {
        t1 = parentZone.fork$2$specification$zoneValues(zoneSpecification, zoneValues).run$1$1(body, $R);
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        onError.call$2(error, stackTrace);
      }
      return _null;
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._async$_body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_fold_closure: function Stream_fold_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    Stream_fold_closure0: function Stream_fold_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.combine = t2;
      _.subscription = t3;
      _.result = t4;
      _.S = t5;
    },
    Stream_fold__closure: function Stream_fold__closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.combine = t1;
      _.element = t2;
      _.S = t3;
    },
    Stream_fold__closure0: function Stream_fold__closure0(t0, t1) {
      this._box_0 = t0;
      this.S = t1;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_last_closure: function Stream_last_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.result = t2;
    },
    Stream_last_closure0: function Stream_last_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.future = t1;
      this.result = t2;
    },
    Stream_elementAt_closure: function Stream_elementAt_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.result = t2;
      _.index = t3;
    },
    Stream_elementAt_closure0: function Stream_elementAt_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.index = t2;
      _.result = t3;
    },
    StreamConsumer: function StreamConsumer() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._async$_onData = t0;
      _._onError = t1;
      _._onDone = t2;
      _._zone = t3;
      _._state = t4;
      _._pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _BufferingStreamSubscription_asFuture_closure: function _BufferingStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture_closure0: function _BufferingStreamSubscription_asFuture_closure0(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture__closure: function _BufferingStreamSubscription_asFuture__closure(t0, t1, t2) {
      this.result = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl(t0, t1) {
      this._pending = t0;
      this._isUsed = false;
      this.$ti = t1;
    },
    _IterablePendingEvents: function _IterablePendingEvents(t0, t1) {
      this._async$_iterator = t0;
      this._state = 0;
      this.$ti = t1;
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._async$_hasValue = false;
      _.$ti = t1;
    },
    _cancelAndError_closure: function _cancelAndError_closure(t0, t1, t2) {
      this.future = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _cancelAndErrorClosure_closure: function _cancelAndErrorClosure_closure(t0, t1) {
      this.subscription = t0;
      this.future = t1;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._async$_stream = t0;
      _._subscription = null;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _HandleErrorStream: function _HandleErrorStream(t0, t1, t2, t3) {
      var _ = this;
      _._onError = t0;
      _._test = t1;
      _._async$_source = t2;
      _.$ti = t3;
    },
    _EventSinkWrapper: function _EventSinkWrapper(t0, t1) {
      this._async$_sink = t0;
      this.$ti = t1;
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.___SinkTransformerStreamSubscription__transformerSink = $;
      _._subscription = null;
      _._async$_onData = t0;
      _._onError = t1;
      _._onDone = t2;
      _._zone = t3;
      _._state = t4;
      _._pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _BoundSinkStream: function _BoundSinkStream(t0, t1, t2) {
      this._sinkMapper = t0;
      this._async$_stream = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    _RunNullaryZoneFunction: function _RunNullaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunUnaryZoneFunction: function _RunUnaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RunBinaryZoneFunction: function _RunBinaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterNullaryZoneFunction: function _RegisterNullaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterUnaryZoneFunction: function _RegisterUnaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _RegisterBinaryZoneFunction: function _RegisterBinaryZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._registerCallback = t3;
      _._registerUnaryCallback = t4;
      _._registerBinaryCallback = t5;
      _._errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _CustomZone_bindUnaryCallbackGuarded_closure: function _CustomZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.T = t2;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    runZonedGuarded_closure: function runZonedGuarded_closure(t0, t1) {
      this.parentZone = t0;
      this.onError = t1;
    },
    HashMap_HashMap($K, $V) {
      return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(hashCode, isValidKey, $K, $V) {
      if (isValidKey == null) {
        if (hashCode == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
      } else if (hashCode == null)
        hashCode = A.collection___defaultHashCode$closure();
      return A._LinkedCustomHashMap$(A.collection___defaultEquals$closure(), hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
      return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap($K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    ListMixin__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    ListQueue__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedList: function LinkedList(t0) {
      var _ = this;
      _._collection$_length = _._modificationCount = 0;
      _._collection$_first = null;
      _.$ti = t0;
    },
    _LinkedListIterator: function _LinkedListIterator(t0, t1, t2, t3) {
      var _ = this;
      _._list = t0;
      _._modificationCount = t1;
      _._collection$_current = null;
      _._collection$_next = t2;
      _._visitedFirst = false;
      _.$ti = t3;
    },
    LinkedListEntry: function LinkedListEntry() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._table = t0;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._collection$_end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, i, byteOr, byte, outputIndex0, t3, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = output.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 18 & 63);
          if (!(outputIndex < t2))
            return A.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63);
          if (!(outputIndex0 < t2))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          outputIndex0 = outputIndex + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63);
          if (!(outputIndex < t2))
            return A.ioore(output, outputIndex);
          output[outputIndex] = t3;
          outputIndex = outputIndex0 + 1;
          t3 = B.JSString_methods._codeUnitAt$1(alphabet, bits & 63);
          if (!(outputIndex0 < t2))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = t3;
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 2 & 63);
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63);
            if (!(outputIndex0 < t2))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t2))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 10 & 63);
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = t1;
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits >>> 4 & 63);
            if (!(outputIndex0 < t2))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = t1;
            outputIndex = outputIndex1 + 1;
            t1 = B.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63);
            if (!(outputIndex1 < t2))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = t1;
            if (!(outputIndex < t2))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    Encoding_getByName($name) {
      if ($name == null)
        return null;
      return $.Encoding__nameToEncoding.$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    JsonUtf8Encoder__utf8Encode(string) {
      return null;
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      return new A._JsonStringStringifier(_sink, [], A.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer("");
      A._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn(object, output, toEncodable, indent) {
      var stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
    },
    _JsonUtf8Stringifier$(toEncodable, bufferSize, addChunk) {
      var t1 = new Uint8Array(bufferSize);
      return new A._JsonUtf8Stringifier(bufferSize, addChunk, t1, [], A.convert___defaultToEncodable$closure());
    },
    _JsonUtf8Stringifier_stringify(object, indent, toEncodable, bufferSize, addChunk) {
      var t1, stringifier;
      if (indent != null) {
        t1 = new Uint8Array(bufferSize);
        stringifier = new A._JsonUtf8StringifierPretty(indent, 0, bufferSize, addChunk, t1, [], A.convert___defaultToEncodable$closure());
      } else
        stringifier = A._JsonUtf8Stringifier$(toEncodable, bufferSize, addChunk);
      stringifier.writeObject$1(object);
      t1 = stringifier.index;
      if (t1 > 0)
        stringifier.addChunk.call$3(stringifier.buffer, 0, t1);
      stringifier.buffer = new Uint8Array(0);
      stringifier.index = 0;
    },
    _Latin1DecoderSink__checkValidLatin1(source, start, end) {
      var t1, i, mask, t2;
      for (t1 = J.getInterceptor$asx(source), i = start, mask = 0; i < end; ++i) {
        t2 = t1.$index(source, i);
        if (typeof t2 !== "number")
          return A.iae(t2);
        mask = (mask | t2) >>> 0;
      }
      if (mask >= 0 && mask <= 255)
        return;
      A._Latin1DecoderSink__reportInvalidLatin1(source, start, end);
    },
    _Latin1DecoderSink__reportInvalidLatin1(source, start, end) {
      var t1, i, char;
      for (t1 = J.getInterceptor$asx(source), i = start; i < end; ++i) {
        char = t1.$index(source, i);
        if (char < 0 || char > 255)
          throw A.wrapException(A.FormatException$("Source contains non-Latin-1 characters.", source, i));
      }
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 4294967040) >>> 0 !== 0)
          b = 255;
        if (!(i < $length))
          return A.ioore(bytes, i);
        bytes[i] = b;
      }
      return bytes;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._convert$_parent = t0;
    },
    _JsonDecoderSink: function _JsonDecoderSink(t0, t1, t2) {
      this._reviver = t0;
      this._convert$_sink = t1;
      this._stringSink = t2;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetEncoderSink: function _UnicodeSubsetEncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._subsetMask = t1;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _ErrorHandlingAsciiDecoderSink: function _ErrorHandlingAsciiDecoderSink(t0) {
      this._utf8Sink = t0;
    },
    _SimpleAsciiDecoderSink: function _SimpleAsciiDecoderSink(t0) {
      this._convert$_sink = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder(t0) {
      this.bufferCache = null;
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._encoder = t1;
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink(t0, t1) {
      this._convert$_sink = t0;
      this._encoder = t1;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteAdapterSink: function _ByteAdapterSink(t0) {
      this._convert$_sink = t0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink(t0, t1, t2) {
      this._eventSink = t0;
      this._chunkedSink = t1;
      this.$ti = t2;
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    Converter: function Converter() {
    },
    Converter_bind_closure: function Converter_bind_closure(t0) {
      this.$this = t0;
    },
    _FusedConverter: function _FusedConverter(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    Encoding: function Encoding() {
    },
    Encoding_decodeStream_closure: function Encoding_decodeStream_closure() {
    },
    Encoding_decodeStream_closure0: function Encoding_decodeStream_closure0() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    _JsonEncoderSink: function _JsonEncoderSink(t0, t1, t2) {
      var _ = this;
      _._indent = t0;
      _._toEncodable = t1;
      _._convert$_sink = t2;
      _._isDone = false;
    },
    _JsonUtf8EncoderSink: function _JsonUtf8EncoderSink(t0, t1, t2, t3) {
      var _ = this;
      _._convert$_sink = t0;
      _._indent = t1;
      _._toEncodable = t2;
      _._bufferSize = t3;
      _._isDone = false;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._convert$_sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonUtf8Stringifier: function _JsonUtf8Stringifier(t0, t1, t2, t3, t4) {
      var _ = this;
      _.bufferSize = t0;
      _.addChunk = t1;
      _.buffer = t2;
      _.index = 0;
      _._seen = t3;
      _._toEncodable = t4;
    },
    _JsonUtf8StringifierPretty: function _JsonUtf8StringifierPretty(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _.bufferSize = t2;
      _.addChunk = t3;
      _.buffer = t4;
      _.index = 0;
      _._seen = t5;
      _._toEncodable = t6;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _Latin1DecoderSink: function _Latin1DecoderSink(t0) {
      this._convert$_sink = t0;
    },
    _Latin1AllowInvalidDecoderSink: function _Latin1AllowInvalidDecoderSink(t0) {
      this._convert$_sink = t0;
    },
    LineSplitter: function LineSplitter() {
    },
    LineSplitter_bind_closure: function LineSplitter_bind_closure() {
    },
    _LineSplitterSink: function _LineSplitterSink() {
    },
    _LineSplitterEventSink: function _LineSplitterEventSink(t0, t1) {
      var _ = this;
      _._eventSink = t0;
      _._convert$_sink = t1;
      _._carry = null;
      _._skipLeadingLF = false;
    },
    _ClosableStringSink: function _ClosableStringSink(t0, t1) {
      this._callback = t0;
      this._convert$_sink = t1;
    },
    _StringConversionSinkAsStringSinkAdapter: function _StringConversionSinkAsStringSinkAdapter(t0, t1) {
      this._convert$_buffer = t0;
      this._chunkedSink = t1;
    },
    StringConversionSinkBase: function StringConversionSinkBase() {
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink() {
    },
    _StringAdapterSink: function _StringAdapterSink(t0) {
      this._convert$_sink = t0;
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter(t0, t1, t2) {
      this._decoder = t0;
      this._convert$_sink = t1;
      this._stringSink = t2;
    },
    _Utf8ConversionSink: function _Utf8ConversionSink(t0, t1, t2) {
      this._decoder = t0;
      this._chunkedSink = t1;
      this._convert$_buffer = t2;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._convert$_buffer = t0;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink(t0, t1) {
      var _ = this;
      _._convert$_sink = t0;
      _._bufferIndex = _._carry = 0;
      _._convert$_buffer = t1;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin: function __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin() {
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: function __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin() {
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Stopwatch__now() {
      return $.Primitives_timerTicks.call$0();
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source, caseSensitive, multiLine) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false, false, false));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$(receiver, memberName, positionalArguments, namedArguments) {
      return new A.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base() {
      var uri = A.Primitives_currentUri();
      if (uri != null)
        return A.Uri_parse(uri);
      throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      A._instanceType(encoding)._eval$1("Codec.S")._as(text);
      bytes = encoding.get$encoder().convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128) {
          t3 = byte >>> 4;
          if (!(t3 < 8))
            return A.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      var stackTrace, exception;
      if (A.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return A.getTraceFromException(new Error());
      try {
        throw A.wrapException("");
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        return stackTrace;
      }
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + B.JSString_methods._codeUnitAt$1(source, i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        digitValue = A._BigIntImpl__codeUnitToRadixValue(B.JSString_methods._codeUnitAt$1(source, i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          digitValue = A._BigIntImpl__codeUnitToRadixValue(B.JSString_methods._codeUnitAt$1(source, i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__parseRadix(source, radix, isNegative) {
      var t1, i, digitValue,
        result = $.$get$_BigIntImpl_zero(),
        base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      for (t1 = source.length, i = 0; i < t1; ++i) {
        digitValue = A._BigIntImpl__codeUnitToRadixValue(B.JSString_methods._codeUnitAt$1(source, i));
        if (digitValue >= radix)
          return null;
        result = result.$mul(0, base).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(digitValue));
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch, nonDecimalMatch, _null = null;
      if (source === "")
        return _null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return _null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      nonDecimalMatch = t1[5];
      if (radix == null) {
        if (decimalMatch != null)
          return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
        if (hexMatch != null)
          return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (radix === 16)
        t1 = decimalMatch != null || nonDecimalMatch != null;
      else
        t1 = false;
      if (t1) {
        if (decimalMatch == null) {
          nonDecimalMatch.toString;
          t1 = nonDecimalMatch;
        } else
          t1 = decimalMatch;
        return A._BigIntImpl__parseHex(t1, 0, isNegative);
      }
      t1 = decimalMatch == null ? nonDecimalMatch : decimalMatch;
      if (t1 == null) {
        hexMatch.toString;
        t1 = hexMatch;
      }
      return A._BigIntImpl__parseRadix(t1, radix, isNegative);
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$from(value) {
      var t1;
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      if (value === 1)
        return $.$get$_BigIntImpl_one();
      if (value === 2)
        return $.$get$_BigIntImpl_two();
      if (Math.abs(value) < 4294967296)
        return A._BigIntImpl__BigIntImpl$_fromInt(B.JSInt_methods.toInt$0(value));
      t1 = A._BigIntImpl__BigIntImpl$_fromDouble(value);
      return t1;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0 || false, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__BigIntImpl$_fromDouble(value) {
      var isNegative, bits, i, t1, t2, exponent, unshiftedDigits, unshiftedBig, absResult;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        throw A.wrapException(A.ArgumentError$("Value must be finite: " + value, null));
      isNegative = value < 0;
      if (isNegative)
        value = -value;
      value = Math.floor(value);
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      bits = $.$get$_BigIntImpl__bitsForFromDouble();
      for (i = 0; i < 8; ++i)
        bits[i] = 0;
      B.NativeByteData_methods._setFloat64$3(A.NativeByteData_NativeByteData$view(bits.buffer, 0, null), 0, value, true);
      t1 = bits[7];
      t2 = bits[6];
      exponent = (t1 << 4 >>> 0) + (t2 >>> 4) - 1075;
      unshiftedDigits = new Uint16Array(4);
      unshiftedDigits[0] = (bits[1] << 8 >>> 0) + bits[0];
      unshiftedDigits[1] = (bits[3] << 8 >>> 0) + bits[2];
      unshiftedDigits[2] = (bits[5] << 8 >>> 0) + bits[4];
      unshiftedDigits[3] = t2 & 15 | 16;
      unshiftedBig = new A._BigIntImpl(false, unshiftedDigits, 4);
      if (exponent < 0)
        absResult = unshiftedBig.$shr(0, -exponent);
      else
        absResult = exponent > 0 ? unshiftedBig.$shl(0, exponent) : unshiftedBig;
      if (isNegative)
        return absResult.$negate(0);
      return absResult;
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods._shrReceiverPositive$1(digit, carryBitShift);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl(digit & bitMask, bitShift);
      }
      if (!(digitShift >= 0 && digitShift < t2))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods._shrReceiverPositive$1(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods._shrReceiverPositive$1(digit, bitShift);
      }
      if (!(last >= 0 && last < t2))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      if (!(used >= 0 && used < t3))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__mulDigits(xDigits, xUsed, otherDigits, otherUsed, resultDigits) {
      var t1, i,
        resultUsed = xUsed + otherUsed;
      for (t1 = resultDigits.length, i = resultUsed; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], xDigits, 0, resultDigits, i, xUsed);
        ++i;
      }
      return resultUsed;
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    _BigIntImpl__binaryGcd(x, y, inv) {
      var t1, uDigits, vDigits, ac, abcdUsed, abcdLen, aDigits, cDigits, bDigits, dDigits, t2, t3, t4, aIsNegative, cIsNegative, bIsNegative, dIsNegative, t5, a_cmp_c, b_cmp_d, c_cmp_a, d_cmp_b, i,
        _s11_ = "Not coprime",
        xUsed = x._used,
        yUsed = y._used,
        maxUsed = xUsed > yUsed ? xUsed : yUsed,
        xDigits = A._BigIntImpl__cloneDigits(x._digits, 0, xUsed, maxUsed),
        yDigits = A._BigIntImpl__cloneDigits(y._digits, 0, yUsed, maxUsed);
      if (yUsed === 1) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        t1 = yDigits[0] === 1;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_one();
      if (yUsed !== 0) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        if ((yDigits[0] & 1) === 0) {
          if (0 >= xDigits.length)
            return A.ioore(xDigits, 0);
          t1 = (xDigits[0] & 1) === 0;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      uDigits = A._BigIntImpl__cloneDigits(xDigits, 0, xUsed, maxUsed);
      vDigits = A._BigIntImpl__cloneDigits(yDigits, 0, yUsed, maxUsed + 2);
      if (0 >= xDigits.length)
        return A.ioore(xDigits, 0);
      ac = (xDigits[0] & 1) === 0;
      abcdUsed = maxUsed + 1;
      abcdLen = abcdUsed + 2;
      aDigits = $.$get$_dummyList();
      if (ac) {
        aDigits = new Uint16Array(abcdLen);
        if (0 >= abcdLen)
          return A.ioore(aDigits, 0);
        aDigits[0] = 1;
        cDigits = new Uint16Array(abcdLen);
      } else
        cDigits = aDigits;
      bDigits = new Uint16Array(abcdLen);
      dDigits = new Uint16Array(abcdLen);
      if (0 >= abcdLen)
        return A.ioore(dDigits, 0);
      dDigits[0] = 1;
      for (t1 = uDigits.length, t2 = vDigits.length, t3 = cDigits.length, t4 = aDigits.length, aIsNegative = false, cIsNegative = false, bIsNegative = false, dIsNegative = false; true;) {
        if (0 >= t1)
          return A.ioore(uDigits, 0);
        for (; (uDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(uDigits, maxUsed, 1, uDigits);
          if (ac) {
            if (0 >= t4)
              return A.ioore(aDigits, 0);
            if ((aDigits[0] & 1) !== 1) {
              if (0 >= abcdLen)
                return A.ioore(bDigits, 0);
              t5 = (bDigits[0] & 1) === 1;
            } else
              t5 = true;
            if (t5) {
              if (aIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t4))
                  return A.ioore(aDigits, maxUsed);
                if (aDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(aDigits, maxUsed, yDigits, maxUsed) > 0) {
                  A._BigIntImpl__absSub(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
                  aIsNegative = true;
                } else {
                  A._BigIntImpl__absSub(yDigits, maxUsed, aDigits, maxUsed, aDigits);
                  aIsNegative = false;
                }
              } else
                A._BigIntImpl__absAdd(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                if (bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0) {
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                  bIsNegative = false;
                } else {
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                  bIsNegative = true;
                }
              }
            }
            A._BigIntImpl__rsh(aDigits, abcdUsed, 1, aDigits);
          } else {
            if (0 >= abcdLen)
              return A.ioore(bDigits, 0);
            if ((bDigits[0] & 1) === 1)
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                if (bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0) {
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                  bIsNegative = false;
                } else {
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                  bIsNegative = true;
                }
              }
          }
          A._BigIntImpl__rsh(bDigits, abcdUsed, 1, bDigits);
        }
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        for (; (vDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(vDigits, maxUsed, 1, vDigits);
          if (ac) {
            if (0 >= t3)
              return A.ioore(cDigits, 0);
            if ((cDigits[0] & 1) === 1 || (dDigits[0] & 1) === 1) {
              if (cIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t3))
                  return A.ioore(cDigits, maxUsed);
                if (cDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(cDigits, maxUsed, yDigits, maxUsed) > 0) {
                  A._BigIntImpl__absSub(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
                  cIsNegative = true;
                } else {
                  A._BigIntImpl__absSub(yDigits, maxUsed, cDigits, maxUsed, cDigits);
                  cIsNegative = false;
                }
              } else
                A._BigIntImpl__absAdd(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
              if (dIsNegative)
                A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(dDigits, maxUsed);
                if (dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0) {
                  A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
                  dIsNegative = false;
                } else {
                  A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
                  dIsNegative = true;
                }
              }
            }
            A._BigIntImpl__rsh(cDigits, abcdUsed, 1, cDigits);
          } else if ((dDigits[0] & 1) === 1)
            if (dIsNegative)
              A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            else {
              if (!(maxUsed >= 0 && maxUsed < abcdLen))
                return A.ioore(dDigits, maxUsed);
              if (dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0) {
                A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
                dIsNegative = false;
              } else {
                A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
                dIsNegative = true;
              }
            }
          A._BigIntImpl__rsh(dDigits, abcdUsed, 1, dDigits);
        }
        if (A._BigIntImpl__compareDigits(uDigits, maxUsed, vDigits, maxUsed) >= 0) {
          A._BigIntImpl__absSub(uDigits, maxUsed, vDigits, maxUsed, uDigits);
          if (ac)
            if (aIsNegative === cIsNegative) {
              a_cmp_c = A._BigIntImpl__compareDigits(aDigits, abcdUsed, cDigits, abcdUsed);
              if (a_cmp_c > 0)
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
              else {
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, aDigits);
                aIsNegative = !aIsNegative && a_cmp_c !== 0;
              }
            } else
              A._BigIntImpl__absAdd(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
          if (bIsNegative === dIsNegative) {
            b_cmp_d = A._BigIntImpl__compareDigits(bDigits, abcdUsed, dDigits, abcdUsed);
            if (b_cmp_d > 0)
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
            else {
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, bDigits);
              bIsNegative = !bIsNegative && b_cmp_d !== 0;
            }
          } else
            A._BigIntImpl__absAdd(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
        } else {
          A._BigIntImpl__absSub(vDigits, maxUsed, uDigits, maxUsed, vDigits);
          if (ac)
            if (cIsNegative === aIsNegative) {
              c_cmp_a = A._BigIntImpl__compareDigits(cDigits, abcdUsed, aDigits, abcdUsed);
              if (c_cmp_a > 0)
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
              else {
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, cDigits);
                cIsNegative = !cIsNegative && c_cmp_a !== 0;
              }
            } else
              A._BigIntImpl__absAdd(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
          if (dIsNegative === bIsNegative) {
            d_cmp_b = A._BigIntImpl__compareDigits(dDigits, abcdUsed, bDigits, abcdUsed);
            if (d_cmp_b > 0)
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
            else {
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, dDigits);
              dIsNegative = !dIsNegative && d_cmp_b !== 0;
            }
          } else
            A._BigIntImpl__absAdd(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
        }
        i = maxUsed;
        while (true) {
          if (i > 0) {
            t5 = i - 1;
            if (!(t5 < t1))
              return A.ioore(uDigits, t5);
            t5 = uDigits[t5] === 0;
          } else
            t5 = false;
          if (!t5)
            break;
          --i;
        }
        if (i === 0)
          break;
      }
      i = maxUsed - 1;
      while (true) {
        if (i > 0) {
          if (!(i < t2))
            return A.ioore(vDigits, i);
          t1 = vDigits[i] === 0;
        } else
          t1 = false;
        if (!t1)
          break;
        --i;
      }
      if (i === 0) {
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        t1 = vDigits[0] !== 1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      if (dIsNegative) {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
        A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
      } else {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) >= 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
      }
      t1 = A._BigIntImpl__normalize(maxUsed, dDigits);
      return new A._BigIntImpl(false, dDigits, t1);
    },
    DateTime$now() {
      return new A.DateTime(Date.now(), false);
    },
    DateTime$_withValue(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + _value, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(_value, isUtc);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull($name) {
      return new A.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidIndex(index, indexable, $name, $length) {
      if ($length == null)
        $length = indexable.get$length(indexable);
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$(index, indexable, $name == null ? "index" : $name, null, $length));
      return index;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = A._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new A.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Map_Map$fromEntries(entries, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      t1.addEntries$1(entries);
      return t1;
    },
    Object_hash(object1, object2) {
      var t2,
        t1 = object1.get$hashCode(object1);
      object2 = A.Primitives_objectHashCode(object2);
      t2 = $.$get$_hashSeed();
      return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2));
    },
    print(object) {
      var line = A.S(object),
        toZone = $.printToZone;
      if (toZone == null)
        A.printString(line);
      else
        toZone.call$1(line);
    },
    Uri_Uri$dataFromString($content) {
      var t1, _null = null,
        buffer = new A.StringBuffer(""),
        indices = A._setArrayType([-1], type$.JSArray_int);
      A.UriData__writeUri(_null, _null, _null, buffer, indices);
      B.JSArray_methods.add$1(indices, buffer._contents.length);
      buffer._contents += ",";
      A.UriData__uriEncodeBytes(B.List_CVk, B.C_AsciiCodec.encode$1($content), buffer);
      t1 = buffer._contents;
      return new A.UriData(t1.charCodeAt(0) == 0 ? t1 : t1, indices, _null).get$uri();
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((B.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | B.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | B.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | B.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | B.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      B.JSArray_methods.$indexSet(indices, 1, -1);
      B.JSArray_methods.$indexSet(indices, 2, -1);
      B.JSArray_methods.$indexSet(indices, 7, -1);
      B.JSArray_methods.$indexSet(indices, 3, 0);
      B.JSArray_methods.$indexSet(indices, 4, 0);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    ++fragmentStart;
                    queryStart0 = queryStart + 1;
                    uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    fragmentStart -= 3;
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  fragmentStart -= 4;
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, t2,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (B.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, query, scheme) {
      var userInfo, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      if (query === "")
        query = _null;
      query = A._Uri__makeQuery(query, 0, query == null ? 0 : query.length, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__compareScheme(scheme, uri) {
      var t1, i, schemeChar, uriChar, delta, lowerChar;
      for (t1 = scheme.length, i = 0; i < t1; ++i) {
        schemeChar = B.JSString_methods._codeUnitAt$1(scheme, i);
        uriChar = B.JSString_methods._codeUnitAt$1(uri, i);
        delta = schemeChar ^ uriChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = uriChar | delta;
            if (97 <= lowerChar && lowerChar <= 122)
              continue;
          }
          return false;
        }
      }
      return true;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__Uri$file(path, windows) {
      return windows ? A._Uri__makeWindowsFileUrl(path, false) : A._Uri__makeFileUri(path, false);
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t2._as(t1.__internal$_current);
        if (B.JSString_methods.contains$1(t3, A.RegExp_RegExp('["*/:<>?\\\\|]', true, false)))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t3));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(_s21_ + A.String_String$fromCharCode(charCode), null));
      else
        throw A.wrapException(A.UnsupportedError$(_s21_ + A.String_String$fromCharCode(charCode)));
    },
    _Uri__makeFileUri(path, slashTerminated) {
      var _null = null,
        segments = A._setArrayType(path.split("/"), type$.JSArray_String);
      if (B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__Uri(_null, _null, segments, _null, "file");
      else
        return A._Uri__Uri(_null, _null, segments, _null, _null);
    },
    _Uri__makeWindowsFileUrl(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _null = null, _s4_ = "file";
      if (B.JSString_methods.startsWith$1(path, "\\\\?\\"))
        if (B.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = B.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = B.JSString_methods.substring$1(path, 4);
          if (path.length < 3 || B.JSString_methods._codeUnitAt$1(path, 1) !== 58 || B.JSString_methods._codeUnitAt$1(path, 2) !== 92)
            throw A.wrapException(A.ArgumentError$("Windows paths with \\\\?\\ prefix must be absolute", _null));
        }
      else
        path = A.stringReplaceAllUnchecked(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && B.JSString_methods._codeUnitAt$1(path, 1) === 58) {
        A._Uri__checkWindowsDriveLetter(B.JSString_methods._codeUnitAt$1(path, 0), true);
        if (t1 === 2 || B.JSString_methods._codeUnitAt$1(path, 2) !== 92)
          throw A.wrapException(A.ArgumentError$("Windows paths with drive letter must be absolute", _null));
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return A._Uri__Uri(_null, _null, pathSegments, _null, _s4_);
      }
      if (B.JSString_methods.startsWith$1(path, _s1_))
        if (B.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = B.JSString_methods.indexOf$2(path, _s1_, 2);
          t1 = pathStart < 0;
          hostPart = t1 ? B.JSString_methods.substring$1(path, 2) : B.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = A._setArrayType((t1 ? "" : B.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(hostPart, _null, pathSegments, _null, _s4_);
        } else {
          pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(_null, _null, pathSegments, _null, _s4_);
        }
      else {
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        return A._Uri__Uri(_null, _null, pathSegments, _null, _null);
      }
    },
    _Uri__computeQueryParametersAll(query) {
      var queryParameterLists;
      if (query.length === 0)
        return B.Map_empty;
      queryParameterLists = A._Uri__splitQueryStringAll(query);
      queryParameterLists.updateAll$1(A.core___toUnmodifiableStringList$closure());
      return A.ConstantMap_ConstantMap$from(queryParameterLists, type$.String, type$.List_String);
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (B.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (B.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = A._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t2, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t2 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (!(t1 < 8))
              return A.ioore(B.List_nxB, t1);
            t1 = (B.List_nxB[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            slice = B.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t1 = buffer;
            } else
              t1 = buffer;
            t1._contents += slice;
            t1._contents += A._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (!(t1 < 8))
              return A.ioore(B.List_qNA, t1);
            t1 = (B.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (!(t1 < 8))
                return A.ioore(B.List_2Vk, t1);
              t1 = (B.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              A._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = B.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              slice = B.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new A.StringBuffer("");
                t1 = buffer;
              } else
                t1 = buffer;
              t1._contents += slice;
              t1._contents += A._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(scheme, start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (!(t1 < 8))
            return A.ioore(B.List_JYB, t1);
          t1 = (B.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_gRj, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = A._arrayInstanceType(pathSegments);
        result = new A.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new A._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_qg4, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_CVk, true);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_CVk, true);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = B.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = B.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(value, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_nxB, t1);
        t1 = (B.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, t1, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = B.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = B.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = t3;
          t3 = index + 2;
          t2 = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = t2;
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters) {
      var t1, index, sectionStart, buffer, char, t2, replacement, sourceLength, tail, _null = null;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = B.JSString_methods.codeUnitAt$1(component, index);
        if (char < 127) {
          t2 = char >>> 4;
          if (!(t2 < 8))
            return A.ioore(charTable, t2);
          t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
        } else
          t2 = false;
        if (t2)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else {
            if (t1)
              if (char <= 93) {
                t2 = char >>> 4;
                if (!(t2 < 8))
                  return A.ioore(B.List_2Vk, t2);
                t2 = (B.List_2Vk[t2] & 1 << (char & 15)) !== 0;
              } else
                t2 = false;
            else
              t2 = false;
            if (t2) {
              A._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t2 = index + 1;
                if (t2 < end) {
                  tail = B.JSString_methods.codeUnitAt$1(component, t2);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = A._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t2._contents += A.S(replacement);
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          B.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && B.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            B.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          B.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(B.JSString_methods._codeUnitAt$1(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_JYB, t2);
            t2 = (B.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        if (0 >= t1)
          return A.ioore(segments, 0);
        A._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "" + "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host();
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = A.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__createList() {
      return A._setArrayType([], type$.JSArray_String);
    },
    _Uri__splitQueryStringAll(query) {
      var t1, i, start, equalsIndex, char,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_String),
        parsePair = new A._Uri__splitQueryStringAll_parsePair(query, B.C_Utf8Codec, result);
      for (t1 = query.length, i = 0, start = 0, equalsIndex = -1; i < t1;) {
        char = B.JSString_methods._codeUnitAt$1(query, i);
        if (char === 61) {
          if (equalsIndex < 0)
            equalsIndex = i;
        } else if (char === 38) {
          parsePair.call$3(start, equalsIndex, i);
          start = i + 1;
          equalsIndex = -1;
        }
        ++i;
      }
      parsePair.call$3(start, equalsIndex, i);
      return result;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = B.JSString_methods.codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t1, bytes,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = B.JSString_methods.codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t1 = plusToSpace && codeUnit === 43;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (B.C_Utf8Codec !== encoding)
          t1 = false;
        else
          t1 = true;
        if (t1)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      } else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (t1 = text.length, i = start; i < end; ++i) {
          codeUnit = B.JSString_methods.codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            B.JSArray_methods.add$1(bytes, 32);
          else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
      var slashIndex, t1;
      if (true)
        buffer._contents = buffer._contents;
      else {
        slashIndex = A.UriData__validateMimeType("");
        if (slashIndex < 0)
          throw A.wrapException(A.ArgumentError$value("", "mimeType", "Invalid MIME type"));
        t1 = buffer._contents += A._Uri__uriEncode(B.List_qFt, B.JSString_methods.substring$2("", 0, slashIndex), B.C_Utf8Codec, false);
        buffer._contents = t1 + "/";
        buffer._contents += A._Uri__uriEncode(B.List_qFt, B.JSString_methods.substring$1("", slashIndex + 1), B.C_Utf8Codec, false);
      }
    },
    UriData__validateMimeType(mimeType) {
      var t1, slashIndex, i;
      for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
        if (B.JSString_methods._codeUnitAt$1(mimeType, i) !== 47)
          continue;
        if (slashIndex < 0) {
          slashIndex = i;
          continue;
        }
        return -1;
      }
      return slashIndex;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = B.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = B.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_CVk, true);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes(canonicalTable, bytes, buffer) {
      var t1, byteOr, i, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      for (t1 = J.getInterceptor$asx(bytes), byteOr = 0, i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        byteOr |= byte;
        if (byte < 128) {
          t2 = B.JSInt_methods._shrOtherPositive$1(byte, 4);
          if (!(t2 < 8))
            return A.ioore(canonicalTable, t2);
          t2 = (canonicalTable[t2] & 1 << (byte & 15)) !== 0;
        } else
          t2 = false;
        t3 = buffer._contents;
        if (t2)
          buffer._contents = t3 + A.Primitives_stringFromCharCode(byte);
        else {
          t2 = t3 + A.Primitives_stringFromCharCode(37);
          buffer._contents = t2;
          t2 += A.Primitives_stringFromCharCode(B.JSString_methods._codeUnitAt$1(_s16_, B.JSInt_methods._shrOtherPositive$1(byte, 4)));
          buffer._contents = t2;
          buffer._contents = t2 + A.Primitives_stringFromCharCode(B.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
        }
      }
      if ((byteOr & 4294967040) >>> 0 !== 0)
        for (i = 0; i < t1.get$length(bytes); ++i) {
          byte = t1.$index(bytes, i);
          if (byte < 0 || byte > 255)
            throw A.wrapException(A.ArgumentError$value(byte, "non-byte value", null));
        }
    },
    _createTables() {
      var _i, t2, t3, t4, t5,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        t1 = type$.Uint8List,
        tables = J.JSArray_JSArray$allocateGrowable(22, t1);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t2 = new A._createTables_build(tables);
      t3 = new A._createTables_setChars();
      t4 = new A._createTables_setRange();
      t5 = t1._as(t2.call$2(0, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_, 14);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 3);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(14, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_, 15);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(15, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, "%", 225);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 9);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(1, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(2, 235));
      t3.call$3(t5, _s77_, 139);
      t3.call$3(t5, _s1_1, 131);
      t3.call$3(t5, _s1_, 146);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(3, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 68);
      t3.call$3(t5, _s1_, 18);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(4, 229));
      t3.call$3(t5, _s77_, 5);
      t4.call$3(t5, "AZ", 229);
      t3.call$3(t5, _s1_0, 102);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, "[", 232);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(5, 229));
      t3.call$3(t5, _s77_, 5);
      t4.call$3(t5, "AZ", 229);
      t3.call$3(t5, _s1_0, 102);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(6, 231));
      t4.call$3(t5, "19", 7);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(7, 231));
      t4.call$3(t5, "09", 7);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t3.call$3(t1._as(t2.call$2(8, 8)), "]", 5);
      t5 = t1._as(t2.call$2(9, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 16);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(16, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 17);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(17, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 9);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(10, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 18);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(18, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 19);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(19, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 234);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(11, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 172);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(12, 236));
      t3.call$3(t5, _s77_, 12);
      t3.call$3(t5, _s1_2, 12);
      t3.call$3(t5, _s1_3, 205);
      t5 = t1._as(t2.call$2(13, 237));
      t3.call$3(t5, _s77_, 13);
      t3.call$3(t5, _s1_2, 13);
      t4.call$3(t1._as(t2.call$2(20, 245)), "az", 21);
      t2 = t1._as(t2.call$2(21, 245));
      t4.call$3(t2, "az", 21);
      t4.call$3(t2, "09", 21);
      t3.call$3(t2, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        if (!(state >= 0 && state < tables.length))
          return A.ioore(tables, state);
        table = tables[state];
        char = B.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _toUnmodifiableStringList(key, list) {
      A._asString(key);
      return A.List_List$unmodifiable(type$.List_String._as(list), type$.String);
    },
    _skipPackageNameChars(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = B.JSString_methods.codeUnitAt$1(source, i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _BigIntImpl_toDouble_readBits: function _BigIntImpl_toDouble_readBits(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _BigIntImpl_toDouble_roundUp: function _BigIntImpl_toDouble_roundUp(t0) {
      this.resultBits = t0;
    },
    _BigIntClassic: function _BigIntClassic(t0, t1) {
      this._modulus = t0;
      this._normalizedModulus = t1;
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    Sink: function Sink() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._core$_start = 0;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParametersAll = _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__splitQueryStringAll_parsePair: function _Uri__splitQueryStringAll_parsePair(t0, t1, t2) {
      this.query = t0;
      this.encoding = t1;
      this.result = t2;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParametersAll = _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    _Namespace__namespacePointer() {
      throw A.wrapException(A.UnsupportedError$("_Namespace"));
    },
    _isDirectIOCapableTypedList(buffer) {
      throw A.wrapException(A.UnsupportedError$("_isDirectIOCapableTypedList"));
    },
    ServerSocket__bind(address, port, backlog, shared, v6Only) {
      throw A.wrapException(A.UnsupportedError$("ServerSocket.bind"));
    },
    Socket__connect(host, port, sourceAddress, timeout) {
      throw A.wrapException(A.UnsupportedError$("Socket constructor"));
    },
    _StdIOUtils__getStdioOutputStream(fd) {
      throw A.wrapException(A.UnsupportedError$("StdIOUtils._getStdioOutputStream"));
    },
    _exceptionFromResponse(response, message, path) {
      var t1 = J.getInterceptor$asx(response);
      switch (t1.$index(response, 0)) {
        case 1:
          return new A.ArgumentError(false, null, null, message + ": " + path);
        case 2:
          return new A.FileSystemException(message, path, new A.OSError(A._asString(t1.$index(response, 2)), A._asInt(t1.$index(response, 1))));
        case 3:
          return new A.FileSystemException("File closed", path, null);
        default:
          return new A._Exception("Unknown error");
      }
    },
    _ensureFastAndSerializableByteData(buffer, start, end) {
      var $length, newBuffer;
      if (A._isDirectIOCapableTypedList(buffer))
        return new A._BufferAndStart(buffer, start);
      $length = end - start;
      newBuffer = new Uint8Array($length);
      B.NativeUint8List_methods.setRange$4(newBuffer, 0, $length, buffer, start);
      return new A._BufferAndStart(newBuffer, 0);
    },
    File_File(path) {
      var t1;
      A.IOOverrides_current();
      A.ArgumentError_checkNotNull(path, "path", type$.String);
      t1 = A.FileSystemEntity__toNullTerminatedUtf8Array(B.C_Utf8Encoder.convert$1(path));
      return new A._File(path, t1);
    },
    FileSystemException$(message, path, osError) {
      return new A.FileSystemException(message, path, osError);
    },
    _File__namespacePointer() {
      return A._Namespace__namespacePointer();
    },
    _File__dispatchWithNamespace(request, data) {
      B.JSArray_methods.$indexSet(data, 0, A._File__namespacePointer());
    },
    FileSystemEntity__toNullTerminatedUtf8Array(l) {
      var t2, tmp,
        t1 = l.length;
      if (t1 !== 0)
        t2 = !B.NativeUint8List_methods.get$isEmpty(l) && !J.$eq$(B.NativeUint8List_methods.get$last(l), 0);
      else
        t2 = true;
      if (t2) {
        tmp = new Uint8Array(t1 + 1);
        B.NativeUint8List_methods.setRange$3(tmp, 0, t1, l);
        return tmp;
      } else
        return l;
    },
    IOOverrides_current() {
      var t1 = $.Zone__current.$index(0, $.$get$_ioOverridesToken());
      if (t1 == null)
        t1 = null;
      return type$.nullable_IOOverrides._as(t1);
    },
    ServerSocket_bind(address, port, backlog, shared, v6Only) {
      var t1;
      A.IOOverrides_current();
      t1 = A.ServerSocket__bind(address, port, backlog, false, false);
      return t1;
    },
    Socket_connect(host, port) {
      var t1;
      A.IOOverrides_current();
      t1 = A.Socket__connect(host, port, null, null);
      return t1;
    },
    stderr() {
      var t1 = A._StdIOUtils__getStdioOutputStream(2);
      $._stderr = t1;
      return t1;
    },
    OSError: function OSError(t0, t1) {
      this.message = t0;
      this.errorCode = t1;
    },
    _BufferAndStart: function _BufferAndStart(t0, t1) {
      this.buffer = t0;
      this.start = t1;
    },
    FileMode: function FileMode(t0) {
      this._mode = t0;
    },
    FileSystemException: function FileSystemException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    _FileStream: function _FileStream(t0, t1, t2, t3) {
      var _ = this;
      _.___FileStream__controller = $;
      _._io$_path = t0;
      _.___FileStream__openedFile = $;
      _._io$_position = t1;
      _._io$_end = t2;
      _._closeCompleter = t3;
      _._unsubscribed = false;
      _._readInProgress = true;
      _._atEnd = _._closed = false;
    },
    _FileStream_listen_closure: function _FileStream_listen_closure(t0) {
      this.$this = t0;
    },
    _FileStream__closeFile_done: function _FileStream__closeFile_done(t0) {
      this.$this = t0;
    },
    _FileStream__readBlock_closure: function _FileStream__readBlock_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _FileStream__readBlock_closure0: function _FileStream__readBlock_closure0(t0) {
      this.$this = t0;
    },
    _FileStream__start_onReady: function _FileStream__start_onReady(t0) {
      this.$this = t0;
    },
    _FileStream__start_onOpenFile: function _FileStream__start_onOpenFile(t0, t1) {
      this.$this = t0;
      this.onReady = t1;
    },
    _FileStream__start_onOpenFile_closure: function _FileStream__start_onOpenFile_closure(t0) {
      this.$this = t0;
    },
    _FileStream__start_openFailed: function _FileStream__start_openFailed(t0) {
      this.$this = t0;
    },
    _FileStreamConsumer: function _FileStreamConsumer(t0, t1) {
      this._file = t0;
      this._openFuture = t1;
    },
    _FileStreamConsumer_addStream_closure: function _FileStreamConsumer_addStream_closure(t0, t1, t2) {
      this.$this = t0;
      this.completer = t1;
      this.stream = t2;
    },
    _FileStreamConsumer_addStream_closure_error: function _FileStreamConsumer_addStream_closure_error(t0, t1, t2) {
      this._subscription = t0;
      this.openedFile = t1;
      this.completer = t2;
    },
    _FileStreamConsumer_addStream__closure: function _FileStreamConsumer_addStream__closure(t0, t1, t2) {
      this._subscription = t0;
      this.openedFile = t1;
      this.error = t2;
    },
    _FileStreamConsumer_addStream___closure: function _FileStreamConsumer_addStream___closure(t0) {
      this._subscription = t0;
    },
    _FileStreamConsumer_addStream__closure0: function _FileStreamConsumer_addStream__closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    _FileStreamConsumer_close_closure: function _FileStreamConsumer_close_closure() {
    },
    _FileStreamConsumer_close_closure0: function _FileStreamConsumer_close_closure0(t0) {
      this.$this = t0;
    },
    _File: function _File(t0, t1) {
      this._io$_path = t0;
      this._rawPath = t1;
    },
    _File_exists_closure: function _File_exists_closure(t0) {
      this.$this = t0;
    },
    _File_open_closure: function _File_open_closure(t0) {
      this.$this = t0;
    },
    _File_length_closure: function _File_length_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_close_closure: function _RandomAccessFile_close_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_read_closure: function _RandomAccessFile_read_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_writeFrom_closure: function _RandomAccessFile_writeFrom_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.start = t2;
    },
    _RandomAccessFile_setPosition_closure: function _RandomAccessFile_setPosition_closure(t0) {
      this.$this = t0;
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    _StreamSinkImpl0: function _StreamSinkImpl0() {
    },
    _StreamSinkImpl__controller_closure1: function _StreamSinkImpl__controller_closure1(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure2: function _StreamSinkImpl__controller_closure2(t0) {
      this.$this = t0;
    },
    _IOSinkImpl: function _IOSinkImpl(t0, t1, t2) {
      var _ = this;
      _._io$_encoding = t0;
      _._io$_target = t1;
      _._io$_doneCompleter = t2;
      _._io$_controllerCompleter = _._io$_controllerInstance = null;
      _._io$_hasError = _._io$_isBound = _._io$_isClosed = false;
    },
    HandshakeException: function HandshakeException() {
    },
    SocketOption: function SocketOption() {
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    Random_Random$secure() {
      return $.$get$Random__secureRandom();
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    },
    Endian: function Endian() {
    },
    ArgParser: function ArgParser(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._options = t0;
      _._aliases = t1;
      _.options = t2;
      _.commands = t3;
      _._optionsAndSeparators = t4;
      _.allowTrailingOptions = t5;
    },
    ArgParser__addOption_closure: function ArgParser__addOption_closure(t0) {
      this.$this = t0;
    },
    ArgParserException$(message, commands) {
      return new A.ArgParserException(commands == null ? B.List_empty : A.List_List$unmodifiable(commands, type$.String), message, null, null);
    },
    ArgParserException: function ArgParserException(t0, t1, t2, t3) {
      var _ = this;
      _.commands = t0;
      _.message = t1;
      _.source = t2;
      _.offset = t3;
    },
    ArgResults: function ArgResults(t0, t1) {
      this._parser = t0;
      this._parsed = t1;
    },
    Option: function Option(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.name = t0;
      _.abbr = t1;
      _.allowed = t2;
      _.defaultsTo = t3;
      _.negatable = t4;
      _.callback = t5;
      _.type = t6;
      _.splitCommas = t7;
      _.mandatory = t8;
    },
    OptionType: function OptionType() {
    },
    Parser$(_commandName, _grammar, _args, _parent, rest) {
      var t1 = A._setArrayType([], type$.JSArray_String);
      if (rest != null)
        B.JSArray_methods.addAll$1(t1, rest);
      return new A.Parser(_commandName, _parent, _grammar, _args, t1, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
    },
    _isLetterOrDigit(codeUnit) {
      var t1;
      if (!(codeUnit >= 65 && codeUnit <= 90))
        if (!(codeUnit >= 97 && codeUnit <= 122))
          t1 = codeUnit >= 48 && codeUnit <= 57;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    Parser: function Parser(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._commandName = t0;
      _._parent = t1;
      _._grammar = t2;
      _._args = t3;
      _._parser$_rest = t4;
      _._results = t5;
    },
    Parser_parse_closure: function Parser_parse_closure(t0) {
      this.$this = t0;
    },
    Parser__setOption_closure: function Parser__setOption_closure() {
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_entries_closure: function CanonicalizedMap_entries_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_map_closure: function CanonicalizedMap_map_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.transform = t1;
      _.K2 = t2;
      _.V2 = t3;
    },
    CanonicalizedMap_values_closure: function CanonicalizedMap_values_closure(t0) {
      this.$this = t0;
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    IterableEquality: function IterableEquality(t0) {
      this.$ti = t0;
    },
    ListEquality: function ListEquality(t0) {
      this.$ti = t0;
    },
    _hexEncode(bytes) {
      var i, j, byte, j0, t3,
        _s16_ = "0123456789abcdef",
        t1 = bytes.length,
        t2 = t1 * 2,
        charCodes = new Uint8Array(t2);
      for (i = 0, j = 0; i < t1; ++i) {
        byte = bytes[i];
        j0 = j + 1;
        t3 = B.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4 & 15);
        if (!(j < t2))
          return A.ioore(charCodes, j);
        charCodes[j] = t3;
        j = j0 + 1;
        t3 = B.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
        if (!(j0 < t2))
          return A.ioore(charCodes, j0);
        charCodes[j0] = t3;
      }
      return A.String_String$fromCharCodes(charCodes, 0, null);
    },
    Digest: function Digest(t0) {
      this.bytes = t0;
    },
    DigestSink: function DigestSink() {
      this._digest_sink$_value = null;
    },
    Hash: function Hash() {
    },
    HashSink: function HashSink() {
    },
    _Sha512: function _Sha512() {
    },
    Sha512Sink$(sink) {
      var t1 = new Uint32Array(A._ensureNativeList(A._setArrayType([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], type$.JSArray_int))),
        t2 = new Uint32Array(160),
        t3 = new Uint32Array(38),
        t4 = A.Uint8Buffer$();
      return new A.Sha512Sink(t1, t2, t3, sink, new Uint32Array(32), t4, 16);
    },
    _Sha64BitSink: function _Sha64BitSink() {
    },
    Sha512Sink: function Sha512Sink(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._digest = t0;
      _._extended = t1;
      _._sha512_slowsinks$_nums = t2;
      _._hash_sink$_sink = t3;
      _._currentChunk = t4;
      _._lengthInBytes = 0;
      _._pendingData = t5;
      _._hash_sink$_isClosed = false;
      _._signatureBytes = t6;
    },
    Signature: function Signature(t0, t1) {
      this.__Signature_R = t0;
      this.__Signature_S = t1;
    },
    AffinePoint$() {
      var t1 = new A.AffinePoint($, $);
      t1.__AffinePoint_Y = t1.__AffinePoint_X = $.$get$_BigIntImpl_zero();
      return t1;
    },
    AffinePoint$fromXY($X, $Y) {
      return new A.AffinePoint($X, $Y);
    },
    AffinePoint: function AffinePoint(t0, t1) {
      this.__AffinePoint_X = t0;
      this.__AffinePoint_Y = t1;
    },
    JacobianPoint: function JacobianPoint(t0, t1, t2) {
      this.__JacobianPoint_X = t0;
      this.__JacobianPoint_Y = t1;
      this.__JacobianPoint_Z = t2;
    },
    zForAffine(p) {
      var z = $.$get$_BigIntImpl_zero(),
        t1 = A._lateReadCheck(p.__AffinePoint_X, "X");
      if (t1.get$sign(t1) === 0) {
        t1 = A._lateReadCheck(p.__AffinePoint_Y, "Y");
        t1 = t1.get$sign(t1) !== 0;
      } else
        t1 = true;
      return t1 ? A._BigIntImpl__BigIntImpl$from(1) : z;
    },
    EllipticCurve: function EllipticCurve(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.__EllipticCurve_p = t0;
      _.__EllipticCurve_a = t1;
      _.__EllipticCurve_b = t2;
      _.__EllipticCurve_G = t3;
      _.__EllipticCurve_bitSize = t4;
      _.__EllipticCurve_n = t5;
    },
    EllipticException$(message) {
      return new A.EllipticException(message);
    },
    EllipticException: function EllipticException(t0) {
      this.__EllipticException_message = t0;
    },
    PrivateKey$fromHex(curve, hexRand) {
      var t1 = new A.PrivateKey(curve);
      t1.__PrivateKey_D = A._BigIntImpl_parse(hexRand, 16);
      return t1;
    },
    PrivateKey: function PrivateKey(t0) {
      this.__PrivateKey_curve = t0;
      this.__PrivateKey_D = $;
    },
    PublicKey: function PublicKey(t0, t1, t2) {
      this.curve = t0;
      this.__AffinePoint_X = t1;
      this.__AffinePoint_Y = t2;
    },
    HexCodec: function HexCodec() {
    },
    HexEncoder: function HexEncoder() {
    },
    CaseInsensitiveMap$($V) {
      return new A.CaseInsensitiveMap(new A.CaseInsensitiveMap_closure(), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $V._eval$1("MapEntry<String,0>")), $V._eval$1("CaseInsensitiveMap<0>"));
    },
    CaseInsensitiveMap$from(other, $V) {
      var t1 = new A.CaseInsensitiveMap(new A.CaseInsensitiveMap$from_closure(), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $V._eval$1("MapEntry<String,0>")), $V._eval$1("CaseInsensitiveMap<0>"));
      t1.addAll$1(0, other);
      return t1;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2) {
      this._canonicalize = t0;
      this._base = t1;
      this.$ti = t2;
    },
    CaseInsensitiveMap_closure: function CaseInsensitiveMap_closure() {
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure() {
    },
    ChunkedCodingDecoder: function ChunkedCodingDecoder() {
    },
    _Sink: function _Sink(t0, t1) {
      this._sink = t0;
      this._decoder$_state = t1;
      this.___Sink__size = $;
    },
    _Sink__decode_assertCurrentChar: function _Sink__decode_assertCurrentChar(t0, t1) {
      this._box_0 = t0;
      this.bytes = t1;
    },
    _State: function _State(t0) {
      this._decoder$_name = t0;
    },
    MediaType_MediaType$parse(mediaType) {
      return A.wrapFormatException("media type", mediaType, new A.MediaType_MediaType$parse_closure(mediaType), type$.MediaType);
    },
    MediaType$(type, subtype, parameters) {
      var t1 = A.CaseInsensitiveMap$from(parameters, type$.String);
      return new A.MediaType(type.toLowerCase(), subtype.toLowerCase(), new A.UnmodifiableMapView(t1, type$.UnmodifiableMapView_String_String));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    expectQuotedString(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return A.stringReplaceAllFuncUnchecked(B.JSString_methods.substring$2(string, 1, string.length - 1), type$.Pattern._as($.$get$_quotedPair()), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.expectQuotedString_closure())), type$.nullable_String_Function_String._as(null));
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    ASN1Object_encodeLength($length) {
      var bytes, t1;
      if ($length <= 127)
        return A._setArrayType([$length], type$.JSArray_int);
      bytes = A.bigIntToBytes(A._BigIntImpl__BigIntImpl$from($length), null);
      t1 = A._setArrayType([(bytes.length | 128) >>> 0], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t1, bytes);
      return t1;
    },
    ASN1Object_pack(tag, $content) {
      var ret,
        t1 = J.getInterceptor$asx($content),
        encodedLength = A.ASN1Object_encodeLength(t1.get$length($content));
      t1 = 1 + encodedLength.length + t1.get$length($content);
      ret = new Uint8Array(t1);
      if (0 >= t1)
        return A.ioore(ret, 0);
      ret[0] = tag;
      B.NativeUint8List_methods.setRange$3(ret, 1, 1 + encodedLength.length, encodedLength);
      B.NativeUint8List_methods.setRange$3(ret, 1 + encodedLength.length, t1, $content);
      return ret;
    },
    ASN1Sequence: function ASN1Sequence(t0) {
      this.children = t0;
    },
    ASN1Sequence_encode_closure: function ASN1Sequence_encode_closure() {
    },
    ASN1Sequence_encode_closure0: function ASN1Sequence_encode_closure0() {
    },
    ASN1Integer: function ASN1Integer(t0) {
      this.value = t0;
    },
    Context_Context(style) {
      var current = style == null ? A.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return new A.Context(type$.InternalStyle._as(style), current);
    },
    _parseUri(uri) {
      if (type$.Uri._is(uri))
        return uri;
      throw A.wrapException(A.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(B.JSString_methods._codeUnitAt$1(path, i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      var _null = null;
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      if (!B.JSString_methods.endsWith$1(A.Uri_base().get$path(), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(_null, "a/b", _null, _null, _null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    serve(handler, address, port) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HttpServer),
        $async$returnValue, t1, server;
      var $async$serve = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.HttpServer_bind(address, port, 0, false);
              $async$goto = 3;
              return A._asyncAwait(t1, $async$serve);
            case 3:
              // returning from await.
              server = $async$result;
              A.serveRequests(server, handler);
              $async$returnValue = server;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$serve, $async$completer);
    },
    serveRequests(requests, handler) {
      A.catchTopLevelErrors(new A.serveRequests_closure(requests, handler), new A.serveRequests_closure0());
    },
    handleRequest(request, handler) {
      return A.handleRequest$body(request, handler);
    },
    handleRequest$body(request, handler) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], error, stackTrace, response, response0, error0, stackTrace0, response1, response2, error1, stackTrace1, exception, t1, t2, message, shelfRequest, $async$exception, $async$exception1;
      var $async$handleRequest = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              shelfRequest = null;
              $async$handler = 4;
              shelfRequest = A._fromHttpRequest(request);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              $async$goto = t1 instanceof A.ArgumentError ? 7 : 9;
              break;
            case 7:
              // then
              error = t1;
              stackTrace = A.getTraceFromException($async$exception);
              t1 = error.name === "method" || error.name === "requestedUri";
              t2 = request.response;
              $async$goto = t1 ? 10 : 12;
              break;
            case 10:
              // then
              A._logTopLevelError("Error parsing request.\n" + A.S(error), stackTrace);
              response = A.Response$(400, "Bad Request", null, null, A.LinkedHashMap_LinkedHashMap$_literal(["content-type", "text/plain"], type$.String, type$.Object));
              $async$goto = 13;
              return A._asyncAwait(A._writeResponse(response, t2), $async$handleRequest);
            case 13:
              // returning from await.
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              A._logTopLevelError("Error parsing request.\n" + A.S(error), stackTrace);
              response0 = A.Response$internalServerError();
              $async$goto = 14;
              return A._asyncAwait(A._writeResponse(response0, t2), $async$handleRequest);
            case 14:
              // returning from await.
            case 11:
              // join
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              error0 = t1;
              stackTrace0 = A.getTraceFromException($async$exception);
              A._logTopLevelError("Error parsing request.\n" + A.S(error0), stackTrace0);
              response1 = A.Response$internalServerError();
              $async$goto = 15;
              return A._asyncAwait(A._writeResponse(response1, request.response), $async$handleRequest);
            case 15:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // join
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              response2 = null;
              $async$handler = 17;
              $async$goto = 20;
              return A._asyncAwait(handler.call$1(shelfRequest), $async$handleRequest);
            case 20:
              // returning from await.
              response2 = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 19;
              break;
            case 17:
              // catch
              $async$handler = 16;
              $async$exception1 = $async$currentError;
              error1 = A.unwrapException($async$exception1);
              stackTrace1 = A.getTraceFromException($async$exception1);
              response2 = A._logError(shelfRequest, "Error thrown by handler.\n" + A.S(error1), stackTrace1);
              // goto after finally
              $async$goto = 19;
              break;
            case 16:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 19:
              // after finally
              $async$goto = response2 == null ? 21 : 22;
              break;
            case 21:
              // then
              $async$goto = 23;
              return A._asyncAwait(A._writeResponse(A._logError(shelfRequest, "null response from handler.", A.StackTrace_current()), request.response), $async$handleRequest);
            case 23:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 22:
              // join
              $async$goto = shelfRequest._onHijack != null && true ? 24 : 25;
              break;
            case 24:
              // then
              $async$goto = 26;
              return A._asyncAwait(A._writeResponse(response2, request.response), $async$handleRequest);
            case 26:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 25:
              // join
              message = new A.StringBuffer("");
              t1 = "" + ("Got a response for hijacked request " + shelfRequest.method + " " + shelfRequest.requestedUri.toString$0(0) + ":\n");
              message._contents = t1;
              message._contents = t1 + ("" + response2.statusCode + "\n");
              t1 = response2._headers.get$singleValues();
              t1._map.forEach$1(0, t1.$ti._eval$1("~(MapView.K,MapView.V)")._as(new A.handleRequest_closure(message)));
              throw A.wrapException(A.Exception_Exception(B.JSString_methods.trim$0(message.toString$0(0))));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleRequest, $async$completer);
    },
    _fromHttpRequest(request) {
      var t4, t5, t6, t7, t8, _null = null,
        t1 = type$.String,
        headers = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_String),
        t2 = request._incoming,
        t3 = t2.headers;
      t3.forEach$1(0, new A._fromHttpRequest_closure(headers));
      headers.remove$1(0, "transfer-encoding");
      t2 = t2.method;
      t2.toString;
      t4 = request.get$requestedUri();
      t3 = t3.protocolVersion;
      t5 = A._HttpConnectionInfo_create(request._httpConnection._socket);
      t5.toString;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["shelf.io.connection_info", t5], t1, type$.Object);
      t5 = new A._OnHijack();
      t6 = A._computeUrl(t4, _null, _null);
      t7 = A._computeHandlerPath(t4, _null, _null);
      t8 = A.Body_Body(request, _null);
      t8 = new A.Request(t6, t2, t7, t3, t4, t5, A.Headers_Headers$from(A._adjustHeaders(A.expandToHeadersAll(headers), t8)), A.ShelfUnmodifiableMap_ShelfUnmodifiableMap(t1, false), t8);
      t8.Request$_$10$body$context$encoding$handlerPath$headers$onHijack$protocolVersion$url(t2, t4, request, t1, _null, _null, headers, t5, t3, _null);
      return t8;
    },
    _writeResponse(response, httpResponse) {
      var t2, t3, coding,
        _s22_ = "shelf.io.buffer_output",
        _s17_ = "transfer-encoding",
        t1 = response.context._map;
      if (t1.containsKey$1(_s22_)) {
        t1 = A._asBool(t1.$index(0, _s22_));
        if (httpResponse._outgoing.headersWritten)
          A.throwExpression(A.StateError$("Header already sent"));
        httpResponse._bufferOutput = t1;
      }
      t1 = response.statusCode;
      httpResponse.set$statusCode(t1);
      t2 = httpResponse.headers;
      t2.set$chunkedTransferEncoding(false);
      t3 = response._headers;
      t3._map.forEach$1(0, A._instanceType(t3)._eval$1("~(MapView.K,MapView.V)")._as(new A._writeResponse_closure(httpResponse)));
      coding = t3.get$singleValues()._map.$index(0, _s17_);
      if (coding != null && !A.equalsIgnoreAsciiCase(coding, "identity")) {
        response = response.change$1$body(B.C_ChunkedCodingDecoder.bind$1(response.read$0()));
        t2.$set$2(_s17_, "chunked");
      } else if (t1 >= 200 && t1 !== 204 && t1 !== 304 && response.get$contentLength() == null && response.get$mimeType() !== "multipart/byteranges")
        t2.$set$2(_s17_, "chunked");
      t1 = response._headers;
      if (!t1.get$singleValues()._map.containsKey$1("server"))
        t2.$set$2("server", "dart:io with Shelf");
      if (!t1.get$singleValues()._map.containsKey$1("date"))
        t2.set$date(new A.DateTime(Date.now(), false).toUtc$0());
      return httpResponse.addStream$1(response.read$0()).then$1$1(new A._writeResponse_closure0(httpResponse), type$.dynamic);
    },
    _logError(request, message, stackTrace) {
      var t1 = request.requestedUri,
        t2 = "" + (request.method + " " + t1.get$path());
      t1 = (t1.get$query().length !== 0 ? t2 + ("?" + t1.get$query()) : t2) + "\n" + message;
      A._logTopLevelError(t1.charCodeAt(0) == 0 ? t1 : t1, stackTrace);
      return A.Response$internalServerError();
    },
    _logTopLevelError(message, stackTrace) {
      A.Chain_Chain$forTrace(stackTrace).foldFrames$1(new A._logTopLevelError_closure()).get$terse();
      A.stderr().writeln$1("ERROR - " + A.S(void 1));
    },
    serveRequests_closure: function serveRequests_closure(t0, t1) {
      this.requests = t0;
      this.handler = t1;
    },
    serveRequests__closure: function serveRequests__closure(t0) {
      this.handler = t0;
    },
    serveRequests_closure0: function serveRequests_closure0() {
    },
    handleRequest_closure: function handleRequest_closure(t0) {
      this.message = t0;
    },
    _fromHttpRequest_closure: function _fromHttpRequest_closure(t0) {
      this.headers = t0;
    },
    _writeResponse_closure: function _writeResponse_closure(t0) {
      this.httpResponse = t0;
    },
    _writeResponse_closure0: function _writeResponse_closure0(t0) {
      this.httpResponse = t0;
    },
    _logTopLevelError_closure: function _logTopLevelError_closure() {
    },
    Body_Body(body, encoding) {
      var stream, contentLength, encoded, t1, t2;
      if (body instanceof A.Body)
        return body;
      if (body == null) {
        stream = A.Stream_Stream$fromIterable(A._setArrayType([], type$.JSArray_List_int), type$.List_int);
        contentLength = 0;
      } else if (typeof body == "string") {
        type$.Utf8Codec._eval$1("Codec.S")._as(body);
        encoded = B.C_Utf8Codec.get$encoder().convert$1(body);
        if (!A.Body__isPlainAscii(encoded, body.length))
          encoding = B.C_Utf8Codec;
        contentLength = encoded.length;
        stream = A.Stream_Stream$fromIterable(A._setArrayType([encoded], type$.JSArray_List_int), type$.List_int);
      } else {
        t1 = type$.List_int;
        if (t1._is(body)) {
          contentLength = J.get$length$asx(body);
          stream = A.Stream_Stream$value(body, t1);
        } else if (type$.List_dynamic._is(body)) {
          t2 = J.getInterceptor$asx(body);
          contentLength = t2.get$length(body);
          stream = A.Stream_Stream$value(t2.cast$1$0(body, type$.int), t1);
        } else {
          if (type$.Stream_List_int._is(body))
            stream = body;
          else if (body instanceof A.Stream)
            stream = body.cast$1$0(0, t1);
          else
            throw A.wrapException(A.ArgumentError$('Response body "' + A.S(body) + '" must be a String or a Stream.', null));
          contentLength = null;
        }
      }
      return new A.Body(stream, encoding, contentLength);
    },
    Body__isPlainAscii(bytes, codeUnits) {
      var t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) !== codeUnits)
        return false;
      return t1.every$1(bytes, new A.Body__isPlainAscii_closure());
    },
    Body: function Body(t0, t1, t2) {
      this._stream = t0;
      this.encoding = t1;
      this.contentLength = t2;
    },
    Body__isPlainAscii_closure: function Body__isPlainAscii_closure() {
    },
    Headers_Headers$from(values) {
      if (values == null || values.get$isEmpty(values))
        return $.$get$_emptyHeaders();
      else if (values instanceof A.Headers)
        return values;
      else
        return A.Headers$_(values);
    },
    Headers$_(values) {
      var t1 = values.get$entries().where$1(0, new A.Headers$__closure()),
        t2 = t1.$ti,
        t3 = type$.List_String;
      return new A.Headers(A.CaseInsensitiveMap$from(A.Map_Map$fromEntries(new A.MappedIterable(t1, t2._eval$1("MapEntry<String,List<String>>(1)")._as(new A.Headers$__closure0()), t2._eval$1("MappedIterable<1,MapEntry<String,List<String>>>")), type$.String, t3), t3));
    },
    Headers: function Headers(t0) {
      this.__Headers_singleValues = $;
      this._map = t0;
    },
    Headers_singleValues_closure: function Headers_singleValues_closure() {
    },
    Headers$__closure: function Headers$__closure() {
    },
    Headers$__closure0: function Headers$__closure0() {
    },
    _adjustHeaders(headers, body) {
      var t1, newHeaders, t2, t3, explicitOverrideOfZeroLength, coding,
        _s14_ = "content-length",
        _s12_ = "content-type",
        sameEncoding = A._sameEncoding(headers, body);
      if (sameEncoding) {
        t1 = body.contentLength;
        if (t1 == null || A.findHeader(headers, _s14_) === A.S(t1))
          return headers == null ? $.$get$_emptyHeaders() : headers;
        else {
          if (t1 === 0)
            t1 = headers == null || headers.get$isEmpty(headers);
          else
            t1 = false;
          if (t1)
            return $.$get$_defaultHeaders();
        }
      }
      t1 = type$.List_String;
      newHeaders = headers == null ? A.CaseInsensitiveMap$(t1) : A.CaseInsensitiveMap$from(headers, t1);
      if (!sameEncoding) {
        t1 = type$.JSArray_String;
        t2 = body.encoding;
        if (newHeaders.$index(0, _s12_) == null) {
          t2.toString;
          newHeaders.$indexSet(0, _s12_, A._setArrayType(["application/octet-stream; charset=utf-8"], t1));
        } else {
          t3 = A.joinHeaderValues(newHeaders.$index(0, _s12_));
          t3.toString;
          t3 = A.MediaType_MediaType$parse(t3);
          t2.toString;
          t2 = type$.String;
          newHeaders.$indexSet(0, _s12_, A._setArrayType([t3.change$1$parameters(A.LinkedHashMap_LinkedHashMap$_literal(["charset", "utf-8"], t2, t2)).toString$0(0)], t1));
        }
      }
      t1 = body.contentLength;
      explicitOverrideOfZeroLength = t1 === 0 && A.findHeader(headers, _s14_) != null;
      if (t1 != null && !explicitOverrideOfZeroLength) {
        coding = A.joinHeaderValues(newHeaders.$index(0, "transfer-encoding"));
        if (coding == null || A.equalsIgnoreAsciiCase(coding, "identity"))
          newHeaders.$indexSet(0, _s14_, A._setArrayType([J.toString$0$(t1)], type$.JSArray_String));
      }
      return newHeaders;
    },
    _sameEncoding(headers, body) {
      var contentType,
        t1 = body.encoding;
      if (t1 == null)
        return true;
      contentType = A.findHeader(headers, "content-type");
      if (contentType == null)
        return false;
      return A.Encoding_getByName(A.MediaType_MediaType$parse(contentType).parameters._map.$index(0, "charset")) === t1;
    },
    Message: function Message() {
    },
    createMiddleware(responseHandler) {
      var requestHandler, t1 = {};
      t1.requestHandler = requestHandler;
      t1.responseHandler = responseHandler;
      t1.requestHandler = null;
      t1.requestHandler = new A.createMiddleware_closure();
      t1.onError = null;
      return new A.createMiddleware_closure0(t1);
    },
    createMiddleware_closure: function createMiddleware_closure() {
    },
    createMiddleware_closure0: function createMiddleware_closure0(t0) {
      this._box_0 = t0;
    },
    createMiddleware__closure: function createMiddleware__closure(t0, t1) {
      this._box_0 = t0;
      this.innerHandler = t1;
    },
    createMiddleware___closure: function createMiddleware___closure(t0, t1) {
      this._box_0 = t0;
      this.request = t1;
    },
    createMiddleware___closure0: function createMiddleware___closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.innerHandler = t1;
      this.request = t2;
    },
    createMiddleware____closure: function createMiddleware____closure(t0, t1) {
      this.innerHandler = t0;
      this.request = t1;
    },
    createMiddleware____closure0: function createMiddleware____closure0(t0) {
      this._box_0 = t0;
    },
    Request$_(method, requestedUri, body, context, encoding, handlerPath, headers, onHijack, protocolVersion, url) {
      var t1 = A._computeUrl(requestedUri, handlerPath, url),
        t2 = A._computeHandlerPath(requestedUri, handlerPath, url),
        t3 = A.Body_Body(body, encoding);
      t3 = new A.Request(t1, method, t2, protocolVersion, requestedUri, onHijack, A.Headers_Headers$from(A._adjustHeaders(A.expandToHeadersAll(headers), t3)), A.ShelfUnmodifiableMap_ShelfUnmodifiableMap(context, false), t3);
      t3.Request$_$10$body$context$encoding$handlerPath$headers$onHijack$protocolVersion$url(method, requestedUri, body, context, encoding, handlerPath, headers, onHijack, protocolVersion, url);
      return t3;
    },
    _computeUrl(requestedUri, handlerPath, url) {
      var _null = null;
      if (handlerPath != null && handlerPath !== requestedUri.get$path() && !B.JSString_methods.endsWith$1(handlerPath, "/"))
        handlerPath = J.$add$ansx(handlerPath, "/");
      if (handlerPath != null)
        return A._Uri__Uri(_null, B.JSString_methods.substring$1(requestedUri.get$path(), handlerPath.length), _null, requestedUri.get$query(), _null);
      else
        return A._Uri__Uri(_null, B.JSString_methods.substring$1(requestedUri.get$path(), 1), _null, requestedUri.get$query(), _null);
    },
    _computeHandlerPath(requestedUri, handlerPath, url) {
      if (handlerPath != null && handlerPath !== requestedUri.get$path() && !B.JSString_methods.endsWith$1(handlerPath, "/"))
        handlerPath = J.$add$ansx(handlerPath, "/");
      if (handlerPath != null) {
        if (!B.JSString_methods.startsWith$1(requestedUri.get$path(), handlerPath))
          throw A.wrapException(A.ArgumentError$('handlerPath "' + handlerPath + '" must be a prefix of requestedUri path "' + requestedUri.get$path() + '"', null));
        if (!B.JSString_methods.startsWith$1(handlerPath, "/"))
          throw A.wrapException(A.ArgumentError$('handlerPath "' + handlerPath + '" must be root-relative.', null));
        return handlerPath;
      } else
        return "/";
    },
    Request: function Request(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.url = t0;
      _.method = t1;
      _.handlerPath = t2;
      _.protocolVersion = t3;
      _.requestedUri = t4;
      _._onHijack = t5;
      _._headers = t6;
      _.context = t7;
      _._body = t8;
      _._contentTypeCache = _._contentLengthCache = null;
    },
    _OnHijack: function _OnHijack() {
    },
    Response$ok(body) {
      var _null = null,
        t1 = A.Body_Body(body, _null);
      t1 = new A.Response(200, A.Headers_Headers$from(A._adjustHeaders(A.expandToHeadersAll(_null), t1)), A.ShelfUnmodifiableMap_ShelfUnmodifiableMap(_null, false), t1);
      t1.Response$5$body$context$encoding$headers(200, body, _null, _null, _null);
      return t1;
    },
    Response$internalServerError() {
      var _null = null,
        _s21_ = "Internal Server Error",
        t1 = A._adjustErrorHeaders(_null),
        t2 = A.Body_Body(_s21_, _null);
      t2 = new A.Response(500, A.Headers_Headers$from(A._adjustHeaders(A.expandToHeadersAll(t1), t2)), A.ShelfUnmodifiableMap_ShelfUnmodifiableMap(_null, false), t2);
      t2.Response$5$body$context$encoding$headers(500, _s21_, _null, _null, t1);
      return t2;
    },
    Response$(statusCode, body, context, encoding, headers) {
      var t1 = A.Body_Body(body, encoding);
      t1 = new A.Response(statusCode, A.Headers_Headers$from(A._adjustHeaders(A.expandToHeadersAll(headers), t1)), A.ShelfUnmodifiableMap_ShelfUnmodifiableMap(context, false), t1);
      t1.Response$5$body$context$encoding$headers(statusCode, body, context, encoding, headers);
      return t1;
    },
    _adjustErrorHeaders(headers) {
      var t1 = A.addHeader(headers, "content-type", "text/plain");
      return t1;
    },
    Response: function Response(t0, t1, t2, t3) {
      var _ = this;
      _.statusCode = t0;
      _._headers = t1;
      _.context = t2;
      _._body = t3;
      _._contentTypeCache = _._contentLengthCache = null;
    },
    ShelfUnmodifiableMap_ShelfUnmodifiableMap(source, ignoreKeyCase) {
      var t1;
      if (type$.ShelfUnmodifiableMap._is(source))
        t1 = true;
      else
        t1 = false;
      if (t1)
        return source;
      if (source == null || source.get$isEmpty(source))
        return B._EmptyShelfUnmodifiableMap_Map_empty;
      source = A.LinkedHashMap_LinkedHashMap$from(source, type$.String, type$.Object);
      return new A.ShelfUnmodifiableMap(false, source);
    },
    ShelfUnmodifiableMap: function ShelfUnmodifiableMap(t0, t1) {
      this._ignoreKeyCase = t0;
      this._map = t1;
    },
    _EmptyShelfUnmodifiableMap: function _EmptyShelfUnmodifiableMap(t0) {
      this._map = t0;
    },
    catchTopLevelErrors(callback, onError) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone || t1.get$errorZone() === B.C__RootZone.get$errorZone())
        return A.runZonedGuarded(callback, onError, type$.void);
      else
        return callback.call$0();
    },
    updateMap(original, updates, $K, $V) {
      var value, t1, t2, val;
      if (updates == null || updates.get$isEmpty(updates))
        return original;
      value = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      value.addAll$1(0, original);
      for (t1 = updates.get$entries(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        val = t2.value;
        t2 = t2.key;
        if (val == null)
          value.remove$1(0, t2);
        else
          value.$indexSet(0, t2, val);
      }
      return value;
    },
    addHeader(headers, $name, value) {
      headers = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Object);
      headers.$indexSet(0, $name, value);
      return headers;
    },
    findHeader(headers, $name) {
      var t1, t2;
      if (headers == null)
        return null;
      if (type$.ShelfUnmodifiableMap._is(headers))
        return A.joinHeaderValues(headers._map.$index(0, $name));
      for (t1 = headers.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (A.equalsIgnoreAsciiCase(t2, $name))
          return A.joinHeaderValues(headers.$index(0, t2));
      }
      return null;
    },
    updateHeaders(initialHeaders, changeHeaders) {
      return A.updateMap(initialHeaders, A._expandToHeadersAll(changeHeaders), type$.String, type$.List_String);
    },
    _expandToHeadersAll(headers) {
      if (type$.Map_of_String_and_List_String._is(headers))
        return headers;
      if (headers == null || headers.get$isEmpty(headers))
        return null;
      return A.Map_Map$fromEntries(headers.get$entries().map$1$1(0, new A._expandToHeadersAll_closure(), type$.MapEntry_of_String_and_nullable_List_String), type$.String, type$.nullable_List_String);
    },
    expandToHeadersAll(headers) {
      if (type$.Map_of_String_and_List_String._is(headers))
        return headers;
      if (headers == null || headers.get$isEmpty(headers))
        return null;
      return A.Map_Map$fromEntries(headers.get$entries().map$1$1(0, new A.expandToHeadersAll_closure(), type$.MapEntry_of_String_and_List_String), type$.String, type$.List_String);
    },
    expandHeaderValue(v) {
      var t1;
      if (typeof v == "string")
        return A._setArrayType([v], type$.JSArray_String);
      else if (type$.List_String._is(v))
        return v;
      else {
        t1 = A.ArgumentError$("Expected String or List<String>, got: `" + A.S(v) + "`.", null);
        throw A.wrapException(t1);
      }
    },
    joinHeaderValues(values) {
      var t1;
      if (values == null)
        return null;
      t1 = J.getInterceptor$asx(values);
      if (t1.get$isEmpty(values))
        return "";
      if (t1.get$length(values) === 1)
        return t1.get$single(values);
      return t1.join$1(values, ",");
    },
    _expandToHeadersAll_closure: function _expandToHeadersAll_closure() {
    },
    expandToHeadersAll_closure: function expandToHeadersAll_closure() {
    },
    Router__defaultNotFound(request) {
      type$.Request._as(request);
      return $.$get$Router_routeNotFound();
    },
    _removeBody_closure: function _removeBody_closure() {
    },
    Router: function Router(t0) {
      this._routes = t0;
    },
    _RouteNotFoundResponse: function _RouteNotFoundResponse(t0, t1, t2, t3) {
      var _ = this;
      _.statusCode = t0;
      _._headers = t1;
      _.context = t2;
      _._body = t3;
      _._contentTypeCache = _._contentLengthCache = null;
    },
    RouterEntry_RouterEntry(verb, route, handler, middleware) {
      var params, t1, t2, pattern, m, t3, t4;
      if (middleware == null)
        middleware = new A.RouterEntry_RouterEntry_closure();
      if (!B.JSString_methods.startsWith$1(route, "/"))
        throw A.wrapException(A.ArgumentError$value(route, "route", "expected route to start with a slash"));
      params = A._setArrayType([], type$.JSArray_String);
      for (t1 = $.$get$RouterEntry__parser().allMatches$1(0, route), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1._start), t2 = type$.RegExpMatch, pattern = ""; t1.moveNext$0();) {
        m = t2._as(t1.__js_helper$_current);
        t3 = m._match;
        if (1 >= t3.length)
          return A.ioore(t3, 1);
        t4 = t3[1];
        t4.toString;
        pattern += A.quoteStringForRegExp(t4);
        if (2 >= t3.length)
          return A.ioore(t3, 2);
        t4 = t3[2];
        if (t4 != null) {
          t4 = t4;
          t4.toString;
          B.JSArray_methods.add$1(params, t4);
          if (3 >= t3.length)
            return A.ioore(t3, 3);
          t4 = t3[3];
          if (t4 != null) {
            t4 = t4;
            t4.toString;
            t4 = A.RegExp_RegExp("^(?:" + t4 + ")|.*$", true, false).firstMatch$1("")._match.length - 1 !== 0;
          } else
            t4 = false;
          if (t4)
            throw A.wrapException(A.ArgumentError$value(route, "route", 'expression for "' + A.S(m.group$1(2)) + '" is capturing'));
          if (3 >= t3.length)
            return A.ioore(t3, 3);
          t3 = t3[3];
          pattern += "(" + (t3 == null ? "[^/]+" : t3) + ")";
        }
      }
      return new A.RouterEntry(verb, handler, middleware, A.RegExp_RegExp("^" + pattern + "$", true, false), params);
    },
    RouterEntry: function RouterEntry(t0, t1, t2, t3, t4) {
      var _ = this;
      _.verb = t0;
      _._handler = t1;
      _._middleware = t2;
      _._routePattern = t3;
      _._params = t4;
    },
    RouterEntry_RouterEntry_closure: function RouterEntry_RouterEntry_closure() {
    },
    RouterEntry_invoke_closure: function RouterEntry_invoke_closure(t0, t1) {
      this.$this = t0;
      this.params = t1;
    },
    RouterEntry_invoke__closure: function RouterEntry_invoke__closure(t0) {
      this.params = t0;
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        A.throwExpression(A.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(file) + "."));
      return new A.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    Highlighter$(span, color) {
      var t1 = A.Highlighter__collateLines(A._setArrayType([A._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new A.Highlighter_closure(color).call$0(),
        t3 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1),
        t4 = A.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new A.MappedListIterable(t1, t5._eval$1("int(1)")._as(new A.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT), !A.isAllTheSame(new A.MappedListIterable(t1, t5._eval$1("Object?(1)")._as(new A.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2, t3,
        highlightsByUrl = A.groupBy(highlights, new A.Highlighter__collateLines_closure(), type$._Highlight, type$.nullable_Uri);
      for (t1 = highlightsByUrl.get$values(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        J.sort$1$ax(t1.get$current(), new A.Highlighter__collateLines_closure0());
      t1 = highlightsByUrl.get$values();
      t2 = A._instanceType(t1);
      t3 = t2._eval$1("ExpandIterable<Iterable.E,_Line>");
      return A.List_List$of(new A.ExpandIterable(t1, t2._eval$1("Iterable<_Line>(Iterable.E)")._as(new A.Highlighter__collateLines_closure1()), t3), true, t3._eval$1("Iterable.E"));
    },
    _Highlight$(span, primary) {
      return new A._Highlight(new A._Highlight_closure(span).call$0(), true);
    },
    _Highlight__normalizeNewlines(span) {
      var endOffset, t1, i, t2, t3, t4,
        text = span.get$text();
      if (!B.JSString_methods.contains$1(text, "\r\n"))
        return span;
      endOffset = span.get$end().get$offset();
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (B.JSString_methods._codeUnitAt$1(text, i) === 13 && B.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start();
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      t2 = A.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2);
      t3 = A.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return A.SourceSpanWithContext$(t1, t2, t3, A.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!B.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n\n"))
        return span;
      context = B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text();
      start = span.get$start();
      end = span.get$end();
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n")) {
        t1 = A.findLineStart(span.get$context(), span.get$text(), span.get$start().get$column());
        t1.toString;
        t1 = t1 + span.get$start().get$column() + span.get$length(span) === span.get$context().length;
      } else
        t1 = false;
      if (t1) {
        text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end().get$offset();
          t2 = span.get$sourceUrl();
          t3 = span.get$end().get$line();
          end = A.SourceLocation$(t1 - 1, A._Highlight__lastLineLength(context), t3 - 1, t2);
          start = span.get$start().get$offset() === span.get$end().get$offset() ? end : span.get$start();
        }
      }
      return A.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end().get$column() !== 0)
        return span;
      if (span.get$end().get$line() === span.get$start().get$line())
        return span;
      text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
      t1 = span.get$start();
      t2 = span.get$end().get$offset();
      t3 = span.get$sourceUrl();
      t4 = span.get$end().get$line();
      t3 = A.SourceLocation$(t2 - 1, text.length - B.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return A.SourceSpanWithContext$(t1, t3, text, B.JSString_methods.endsWith$1(span.get$context(), "\n") ? B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1) : span.get$context());
    },
    _Highlight__lastLineLength(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      else if (B.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - B.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - B.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1) {
      this.span = t0;
      this.isPrimary = t1;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line < 0)
        A.throwExpression(A.RangeError$("Line may not be negative, was " + line + "."));
      else if (column < 0)
        A.throwExpression(A.RangeError$("Column may not be negative, was " + column + "."));
      return new A.SourceLocation(sourceUrl, offset, line, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    SourceSpanBase: function SourceSpanBase() {
    },
    SourceSpanFormatException$(message, span, source) {
      return new A.SourceSpanFormatException(source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new A.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!B.JSString_methods.contains$1(_context, text))
        A.throwExpression(A.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (A.findLineStart(_context, text, start.get$column()) == null)
        A.throwExpression(A.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    Chain_Chain$forTrace(trace) {
      var t1;
      if (type$.Chain._is(trace))
        return trace;
      type$.nullable_StackZoneSpecification._as($.Zone__current.$index(0, $.$get$_specKey()));
      t1 = type$.Trace;
      if (t1._is(trace))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([trace], type$.JSArray_Trace), t1));
      return new A.LazyChain(new A.Chain_Chain$forTrace_closure(trace));
    },
    Chain_Chain$parse(chain) {
      var t1, t2,
        _s51_ = string$.x3d_____;
      if (chain.length === 0)
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_Trace), type$.Trace));
      t1 = $.$get$vmChainGap();
      if (B.JSString_methods.contains$1(chain, t1)) {
        t1 = B.JSString_methods.split$1(chain, t1);
        t2 = A._arrayInstanceType(t1);
        return new A.Chain(A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Chain_Chain$parse_closure()), t2._eval$1("WhereIterable<1>")), t2._eval$1("Trace(1)")._as(new A.Chain_Chain$parse_closure0()), t2._eval$1("MappedIterable<1,Trace>")), type$.Trace));
      }
      if (!B.JSString_methods.contains$1(chain, _s51_))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([A.Trace_Trace$parse(chain)], type$.JSArray_Trace), type$.Trace));
      return new A.Chain(A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(chain.split(_s51_), type$.JSArray_String), type$.Trace_Function_String._as(new A.Chain_Chain$parse_closure1()), type$.MappedListIterable_String_Trace), type$.Trace));
    },
    Chain: function Chain(t0) {
      this.traces = t0;
    },
    Chain_Chain$forTrace_closure: function Chain_Chain$forTrace_closure(t0) {
      this.trace = t0;
    },
    Chain_Chain$parse_closure: function Chain_Chain$parse_closure() {
    },
    Chain_Chain$parse_closure0: function Chain_Chain$parse_closure0() {
    },
    Chain_Chain$parse_closure1: function Chain_Chain$parse_closure1() {
    },
    Chain_terse_closure: function Chain_terse_closure() {
    },
    Chain_foldFrames_closure: function Chain_foldFrames_closure(t0, t1) {
      this.predicate = t0;
      this.terse = t1;
    },
    Chain_foldFrames_closure0: function Chain_foldFrames_closure0(t0) {
      this.terse = t0;
    },
    Chain_toTrace_closure: function Chain_toTrace_closure() {
    },
    Chain_toString_closure0: function Chain_toString_closure0() {
    },
    Chain_toString__closure0: function Chain_toString__closure0() {
    },
    Chain_toString_closure: function Chain_toString_closure(t0) {
      this.longest = t0;
    },
    Chain_toString__closure: function Chain_toString__closure(t0) {
      this.longest = t0;
    },
    Frame_Frame$parseVM(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseVM_closure(frame));
    },
    Frame_Frame$parseV8(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseV8_closure(frame));
    },
    Frame_Frame$_parseFirefoxEval(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$_parseFirefoxEval_closure(frame));
    },
    Frame_Frame$parseFirefox(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFirefox_closure(frame));
    },
    Frame_Frame$parseFriendly(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFriendly_closure(frame));
    },
    Frame__uriOrPathToUri(uriOrPath) {
      if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__uriRegExp()))
        return A.Uri_parse(uriOrPath);
      else if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__windowsRegExp()))
        return A._Uri__Uri$file(uriOrPath, true);
      else if (B.JSString_methods.startsWith$1(uriOrPath, "/"))
        return A._Uri__Uri$file(uriOrPath, false);
      if (B.JSString_methods.contains$1(uriOrPath, "\\"))
        return $.$get$windows().toUri$1(uriOrPath);
      return A.Uri_parse(uriOrPath);
    },
    Frame__catchFormatException(text, body) {
      var t1, exception, _null = null;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null), text);
        else
          throw exception;
      }
    },
    Frame: function Frame(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
    },
    Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure_parseLocation: function Frame_Frame$parseV8_closure_parseLocation(t0) {
      this.frame = t0;
    },
    Frame_Frame$_parseFirefoxEval_closure: function Frame_Frame$_parseFirefoxEval_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(t0) {
      this.frame = t0;
    },
    LazyChain: function LazyChain(t0) {
      this._thunk = t0;
      this.__LazyChain__chain = $;
    },
    LazyChain_foldFrames_closure: function LazyChain_foldFrames_closure(t0, t1, t2) {
      this.$this = t0;
      this.predicate = t1;
      this.terse = t2;
    },
    Trace_Trace$parse(trace) {
      var error, t1, exception;
      try {
        if (trace.length === 0) {
          t1 = A.Trace$(A._setArrayType([], type$.JSArray_Frame), null);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_v8Trace())) {
          t1 = A.Trace$parseV8(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, "\tat ")) {
          t1 = A.Trace$parseJSCore(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_firefoxSafariTrace()) || B.JSString_methods.contains$1(trace, $.$get$_firefoxEvalTrace())) {
          t1 = A.Trace$parseFirefox(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, string$.x3d_____)) {
          t1 = A.Chain_Chain$parse(trace).toTrace$0();
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_friendlyTrace())) {
          t1 = A.Trace$parseFriendly(trace);
          return t1;
        }
        t1 = A.Trace$parseVM(trace);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          error = t1;
          throw A.wrapException(A.FormatException$(error.get$message() + "\nStack trace:\n" + trace, null, null));
        } else
          throw exception;
      }
    },
    Trace$parseVM(trace) {
      var t1 = A.List_List$unmodifiable(A.Trace__parseVM(trace), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace__parseVM(trace) {
      var $frames,
        t1 = B.JSString_methods.trim$0(trace),
        t2 = type$.Pattern._as($.$get$vmChainGap()),
        t3 = type$.WhereIterable_String,
        lines = new A.WhereIterable(A._setArrayType(A.stringReplaceAllUnchecked(t1, t2, "").split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace__parseVM_closure()), t3);
      if (!lines.get$iterator(lines).moveNext$0())
        return A._setArrayType([], type$.JSArray_Frame);
      t1 = A.TakeIterable_TakeIterable(lines, lines.get$length(lines) - 1, t3._eval$1("Iterable.E"));
      t2 = A._instanceType(t1);
      t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("Frame(Iterable.E)")._as(new A.Trace__parseVM_closure0()), t2._eval$1("Iterable.E"), type$.Frame);
      $frames = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
      if (!J.endsWith$1$s(lines.get$last(lines), ".da"))
        B.JSArray_methods.add$1($frames, A.Frame_Frame$parseVM(lines.get$last(lines)));
      return $frames;
    },
    Trace$parseV8(trace) {
      var t2, t3,
        t1 = A.SubListIterable$(A._setArrayType(trace.split("\n"), type$.JSArray_String), 1, null, type$.String);
      t1 = t1.super$Iterable$skipWhile(0, t1.$ti._eval$1("bool(ListIterable.E)")._as(new A.Trace$parseV8_closure()));
      t2 = type$.Frame;
      t3 = t1.$ti;
      t2 = A.List_List$unmodifiable(A.MappedIterable_MappedIterable(t1, t3._eval$1("Frame(Iterable.E)")._as(new A.Trace$parseV8_closure0()), t3._eval$1("Iterable.E"), t2), t2);
      return new A.Trace(t2, new A._StringStackTrace(trace));
    },
    Trace$parseJSCore(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(trace.split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseJSCore_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(new A.Trace$parseJSCore_closure0()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$parseFirefox(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFirefox_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(new A.Trace$parseFirefox_closure0()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$parseFriendly(trace) {
      var t1 = trace.length === 0 ? A._setArrayType([], type$.JSArray_Frame) : new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFriendly_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(new A.Trace$parseFriendly_closure0()), type$.MappedIterable_String_Frame);
      t1 = A.List_List$unmodifiable(t1, type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$($frames, original) {
      var t1 = A.List_List$unmodifiable($frames, type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(original == null ? "" : original));
    },
    Trace: function Trace(t0, t1) {
      this.frames = t0;
      this.original = t1;
    },
    Trace__parseVM_closure: function Trace__parseVM_closure() {
    },
    Trace__parseVM_closure0: function Trace__parseVM_closure0() {
    },
    Trace$parseV8_closure: function Trace$parseV8_closure() {
    },
    Trace$parseV8_closure0: function Trace$parseV8_closure0() {
    },
    Trace$parseJSCore_closure: function Trace$parseJSCore_closure() {
    },
    Trace$parseJSCore_closure0: function Trace$parseJSCore_closure0() {
    },
    Trace$parseFirefox_closure: function Trace$parseFirefox_closure() {
    },
    Trace$parseFirefox_closure0: function Trace$parseFirefox_closure0() {
    },
    Trace$parseFriendly_closure: function Trace$parseFriendly_closure() {
    },
    Trace$parseFriendly_closure0: function Trace$parseFriendly_closure0() {
    },
    Trace_foldFrames_closure: function Trace_foldFrames_closure(t0) {
      this.oldPredicate = t0;
    },
    Trace_foldFrames_closure0: function Trace_foldFrames_closure0(t0) {
      this._box_0 = t0;
    },
    Trace_toString_closure0: function Trace_toString_closure0() {
    },
    Trace_toString_closure: function Trace_toString_closure(t0) {
      this.longest = t0;
    },
    UnparsedFrame: function UnparsedFrame(t0, t1) {
      this.uri = t0;
      this.member = t1;
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    Tuple3: function Tuple3(t0, t1, t2, t3) {
      var _ = this;
      _.item1 = t0;
      _.item2 = t1;
      _.item3 = t2;
      _.$ti = t3;
    },
    Uint8Buffer$() {
      return new A.Uint8Buffer(new Uint8Array(0), 0);
    },
    TypedDataBuffer: function TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    Uint8Buffer: function Uint8Buffer(t0, t1) {
      this._typed_buffer$_buffer = t0;
      this._typed_buffer$_length = t1;
    },
    BaseInput: function BaseInput() {
    },
    ScriptEschex_fromJson($name) {
      switch ($name) {
        case "INCIPIO":
          return B.Script_0;
        case "EFECTUS":
          return B.Script_1;
        case "CONFOSSUS":
          return B.Script_2;
        case "EXPRESSI":
          return B.Script_3;
      }
    },
    ToHash$(script, nonce, blockNumber, difficulty, totalDifficulty, timestamp, producer, prevHash, gladiators, refreeTxs, stuckTxs) {
      var t1 = A.Wallet$();
      return new A.ToHash(script, nonce, blockNumber, difficulty, totalDifficulty, timestamp, A.Utils_CreateCryptoRandomString(1), producer, prevHash, gladiators, refreeTxs, t1, stuckTxs);
    },
    ToHash$fromJson(json) {
      var t12, t13,
        t1 = type$.Script._as(A.ScriptEschex_fromJson(A._asString(json.$index(0, "script")))),
        t2 = A._asInt(json.$index(0, "nonce")),
        t3 = A._asInt(json.$index(0, "blockNumber")),
        t4 = A._asInt(json.$index(0, "difficulty")),
        t5 = A._asInt(json.$index(0, "totalDifficulty")),
        t6 = A._asInt(json.$index(0, "timestamp")),
        t7 = A._asString(json.$index(0, "producer")),
        t8 = A._asString(json.$index(0, "prevHash")),
        t9 = A._asString(json.$index(0, "defence")),
        t10 = type$.Map_String_dynamic._as(json.$index(0, "wallet")),
        t11 = t10.$index(0, "privateKey");
      t10 = A._asStringQ(t10.$index(0, "publicKey"));
      t12 = type$.Iterable_dynamic;
      t13 = type$.Tx;
      return new A.ToHash(t1, t2, t3, t4, t5, t6, t9, t7, t8, A.List_List$from(t12._as(J.map$1$ax(json.$index(0, "gladiators"), new A.ToHash$fromJson_closure())), true, type$.Gladiator), A.List_List$from(t12._as(J.map$1$ax(json.$index(0, "refreeTxs"), new A.ToHash$fromJson_closure0())), true, t13), new A.Wallet(t11, t10), A.List_List$from(t12._as(J.map$1$ax(json.$index(0, "stuckTxs"), new A.ToHash$fromJson_closure1())), true, t13));
    },
    Block$fromJson(json) {
      var t1 = A.ToHash$fromJson(type$.Map_String_dynamic._as(json.$index(0, "toHash")));
      return new A.Block(A._asString(json.$index(0, "hash")), t1);
    },
    Block_incipio(toHash) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Block),
        $async$returnValue, t1;
      var $async$Block_incipio = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Utf8Codec._eval$1("Codec.S")._as(B.C_JsonCodec.encode$1(toHash.toJson$0()));
              t1 = type$.HexCodec._eval$1("Codec.S")._as(B.C__Sha512.convert$1(B.C_Utf8Codec.get$encoder().convert$1(t1)).bytes);
              $async$returnValue = new A.Block(B.C_HexCodec.get$encoder().convert$1(t1), toHash);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Block_incipio, $async$completer);
    },
    Block_efectus(toHash) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Block),
        $async$returnValue, t4, hash, t1, t2, t3;
      var $async$Block_efectus = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Utf8Codec._eval$1("Codec.S");
              t2 = type$.HexCodec._eval$1("Codec.S");
              t3 = toHash.difficulty;
              do {
                toHash.mine$0();
                t4 = t1._as(B.C_JsonCodec.encode$1(toHash.toJson$0()));
                t4 = t2._as(B.C__Sha512.convert$1(B.C_Utf8Codec.get$encoder().convert$1(t4)).bytes);
                hash = B.C_HexCodec.get$encoder().convert$1(t4);
              } while (!B.JSString_methods.startsWith$1(hash, B.JSString_methods.$mul("0", t3)));
              $async$returnValue = new A.Block(hash, toHash);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Block_efectus, $async$completer);
    },
    Block_getPublicKeys(privateKey, gladiatorId, file) {
      return A.Block_getPublicKeys$body(privateKey, gladiatorId, file);
    },
    Block_getPublicKeys$body(privateKey, gladiatorId, file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Tuple3_of_List_String_and_String_and_String),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], line, block, t2, t3, t4, t5, t6, t7, result, baseDefence, gladiator, signature, t1, $async$temp1;
      var $async$Block_getPublicKeys = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              baseDefence = "";
              gladiator = null;
              signature = "";
              t1 = new A._StreamIterator(A.checkNotNullable(A.Utils_fischilesche(file), "stream", type$.Object), type$._StreamIterator_String);
              $async$handler = 3;
              t2 = type$.Map_String_dynamic, t3 = type$.Utf8Codec._eval$1("Codec.S"), t4 = type$.String, t5 = type$.dynamic;
            case 6:
              // for condition
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(t1.moveNext$0(), $async$Block_getPublicKeys);
            case 8:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              line = t1.get$current();
              t6 = t2._as(B.C_JsonCodec.decode$1(line));
              t7 = A.ToHash$fromJson(t2._as(t6.$index(0, "toHash")));
              block = new A.Block(A._asString(t6.$index(0, "hash")), t7);
              if (B.JSArray_methods.any$1(block.toHash.gladiators, new A.Block_getPublicKeys_closure(gladiatorId))) {
                gladiator = B.JSArray_methods.singleWhere$1(block.toHash.gladiators, new A.Block_getPublicKeys_closure0(gladiatorId));
                baseDefence = gladiator.output.defence;
                t6 = gladiator.output;
                t6 = A.LinkedHashMap_LinkedHashMap$_literal(["publicKeys", t6.publicKeys, "defence", t6.defence], t4, t5);
                t7 = new A.PrivateKey($.$get$Wallet_curve());
                result = A._BigIntImpl__tryParse(privateKey, 16);
                if (result == null)
                  A.throwExpression(A.FormatException$("Could not parse BigInt", privateKey, null));
                t7.__PrivateKey_D = result;
                t6 = t3._as(B.C_JsonCodec.encode$1(t6));
                t6 = A.signature(t7, B.C_Utf8Codec.get$encoder().convert$1(t6));
                signature = B.JSString_methods.padLeft$2(A._lateReadCheck(t6.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(t6.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
              }
              // goto for condition
              $async$goto = 6;
              break;
            case 7:
              // after for
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              $async$goto = 9;
              return A._asyncAwait(t1.cancel$0(), $async$Block_getPublicKeys);
            case 9:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$returnValue = new A.Tuple3(gladiator.output.publicKeys, baseDefence, signature, type$.Tuple3_of_List_String_and_String_and_String);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$Block_getPublicKeys, $async$completer);
    },
    Block_confossus(privateKey, gladiatorId, toHash, file) {
      return A.Block_confossus$body(privateKey, gladiatorId, toHash, file);
    },
    Block_confossus$body(privateKey, gladiatorId, toHash, file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Block),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], puschub, line, block, refreeTx, i, sig, t2, t3, t4, t5, t6, t7, t8, _i, t9, t10, t11, t12, t13, result, sig0, hash, publicKeys, t1, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
      var $async$Block_confossus = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait(A.Block_getPublicKeys(privateKey, gladiatorId, file), $async$Block_confossus);
              case 3:
                // returning from await.
                publicKeys = $async$result;
                t1 = publicKeys.item1;
                A.print(t1);
                B.JSArray_methods.add$1(toHash.gladiators, A.Gladiator$(null, new A.GladiatorInput(gladiatorId, publicKeys.item3)));
                t2 = A.PrivateKey$fromHex($.$get$Wallet_curve(), privateKey);
                t3 = A._lateReadCheck(t2.__PrivateKey_curve, "curve");
                t2 = t3.scalarBaseMul$1(t2.get$bytes());
                puschub = t3.publicKeyToHex$1(new A.PublicKey(t3, A._lateReadCheck(t2.__AffinePoint_X, "X"), A._lateReadCheck(t2.__AffinePoint_Y, "Y")));
                t2 = t1.length, t3 = type$.Utf8Codec._eval$1("Codec.S"), t4 = toHash.refreeTxs, t5 = type$.JSArray_TxInput, t6 = type$.JSArray_TxOutput, t7 = type$.String, t8 = type$.dynamic, _i = 0;
              case 4:
                // for condition
                if (!(_i < t1.length)) {
                  // goto after for
                  $async$goto = 6;
                  break;
                }
                $async$temp1 = J;
                $async$goto = 7;
                return A._asyncAwait(A.Wallet_outputs(false, t1[_i], file), $async$Block_confossus);
              case 7:
                // returning from await.
                t9 = $async$temp1.get$iterator$ax($async$result);
              case 8:
                // for condition
                if (!t9.moveNext$0()) {
                  // goto after for
                  $async$goto = 9;
                  break;
                }
                t10 = t9.get$current();
                t11 = t10.output;
                t12 = t11.value;
                t11 = A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", t11.publicKey, "value", t12.toString$0(0)], t7, t8);
                t13 = new A.PrivateKey($.$get$Wallet_curve());
                result = A._BigIntImpl__tryParse(privateKey, 16);
                if (result == null)
                  A.throwExpression(A.FormatException$("Could not parse BigInt", privateKey, null));
                t13.__PrivateKey_D = result;
                t11 = t3._as(B.C_JsonCodec.encode$1(t11));
                t11 = A.signature(t13, B.C_Utf8Codec.get$encoder().convert$1(t11));
                sig0 = B.JSString_methods.padLeft$2(A._lateReadCheck(t11.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(t11.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
                t11 = t10.idx;
                B.JSArray_methods.add$1(t4, A.Tx$(A._setArrayType([new A.TxInput(t10.txId, t11, sig0)], t5), A._setArrayType([new A.TxOutput(t12, puschub)], t6)));
                // goto for condition
                $async$goto = 8;
                break;
              case 9:
                // after for
              case 5:
                // for update
                t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i;
                // goto for condition
                $async$goto = 4;
                break;
              case 6:
                // after for
                t1 = new A._StreamIterator(A.checkNotNullable(A.Utils_fischilesche(file), "stream", type$.Object), type$._StreamIterator_String);
                $async$handler = 10;
                t2 = toHash.stuckTxs, t9 = type$.Map_String_dynamic;
              case 13:
                // for condition
                $async$temp1 = A;
                $async$goto = 15;
                return A._asyncAwait(t1.moveNext$0(), $async$Block_confossus);
              case 15:
                // returning from await.
                if (!$async$temp1.boolConversionCheck($async$result)) {
                  // goto after for
                  $async$goto = 14;
                  break;
                }
                line = t1.get$current();
                t10 = t9._as(B.C_JsonCodec.decode$1(line));
                t11 = A.ToHash$fromJson(t9._as(t10.$index(0, "toHash")));
                block = new A.Block(A._asString(t10.$index(0, "hash")), t11);
                for (t10 = block.toHash.refreeTxs, t11 = t10.length, _i = 0; _i < t10.length; t10.length === t11 || (0, A.throwConcurrentModificationError)(t10), ++_i) {
                  refreeTx = t10[_i];
                  i = 0;
                  while (true) {
                    t12 = i;
                    t13 = refreeTx.outputs.length;
                    if (typeof t12 !== "number") {
                      $async$returnValue = t12.$lt();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 11;
                      break $async$outer;
                    }
                    if (!(t12 < t13))
                      break;
                    if (B.JSArray_methods.$index(refreeTx.outputs, i).publicKey === puschub) {
                      t12 = B.JSArray_methods.$index(refreeTx.outputs, i);
                      t12 = A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", t12.publicKey, "value", t12.value.toString$0(0)], t7, t8);
                      t13 = new A.PrivateKey($.$get$Wallet_curve());
                      result = A._BigIntImpl__tryParse(privateKey, 16);
                      if (result == null)
                        A.throwExpression(A.FormatException$("Could not parse BigInt", privateKey, null));
                      t13.__PrivateKey_D = result;
                      t12 = t3._as(B.C_JsonCodec.encode$1(t12));
                      t12 = A.signature(t13, B.C_Utf8Codec.get$encoder().convert$1(t12));
                      sig = B.JSString_methods.padLeft$2(A._lateReadCheck(t12.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(t12.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
                      t12 = i;
                      B.JSArray_methods.add$1(t4, A.Tx$(A._setArrayType([new A.TxInput(refreeTx.id, t12, sig)], t5), A._setArrayType([], t6)));
                      B.JSArray_methods.add$1(t2, A.Tx$(A._setArrayType([], t5), A._setArrayType([B.JSArray_methods.$index(refreeTx.outputs, i)], t6)));
                    }
                    t12 = i;
                    if (typeof t12 !== "number") {
                      $async$returnValue = t12.$add();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 11;
                      break $async$outer;
                    }
                    i = t12 + 1;
                  }
                }
                // goto for condition
                $async$goto = 13;
                break;
              case 14:
                // after for
                $async$next.push(12);
                // goto finally
                $async$goto = 11;
                break;
              case 10:
                // uncaught
                $async$next = [2];
              case 11:
                // finally
                $async$handler = 2;
                $async$goto = 16;
                return A._asyncAwait(t1.cancel$0(), $async$Block_confossus);
              case 16:
                // returning from await.
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 12:
                // after finally
                t1 = type$.HexCodec._eval$1("Codec.S");
                t2 = toHash.difficulty;
                t4 = publicKeys.item2;
              case 17:
                // do body
                toHash.mine$0();
                t5 = t3._as(B.C_JsonCodec.encode$1(toHash.toJson$0()));
                t5 = t1._as(B.C__Sha512.convert$1(B.C_Utf8Codec.get$encoder().convert$1(t5)).bytes);
                hash = B.C_HexCodec.get$encoder().convert$1(t5);
                A.print(hash);
              case 18:
                // do condition
                $async$temp1 = !B.JSString_methods.startsWith$1(hash, B.JSString_methods.$mul("0", t2));
                if ($async$temp1)
                  $async$result = $async$temp1;
                else {
                  // goto then
                  $async$goto = 20;
                  break;
                }
                // goto join
                $async$goto = 21;
                break;
              case 20:
                // then
                $async$temp1 = B.JSString_methods;
                $async$temp2 = hash;
                $async$temp3 = B.JSString_methods;
                $async$temp4 = t4;
                $async$goto = 22;
                return A._asyncAwait(A.Wallet_getDefences(gladiatorId, file), $async$Block_confossus);
              case 22:
                // returning from await.
                $async$result = !$async$temp1.contains$1($async$temp2, $async$temp3.$add($async$temp4, $async$result));
              case 21:
                // join
                if ($async$result) {
                  // goto do body
                  $async$goto = 17;
                  break;
                }
              case 19:
                // after do
                $async$returnValue = new A.Block(hash, toHash);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return A._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return A._asyncStartSync($async$Block_confossus, $async$completer);
    },
    Block_blockNumber(file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, t1;
      var $async$Block_blockNumber = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.Utils_fischilesche(file);
              $async$goto = 3;
              return A._asyncAwait(t1.get$length(t1), $async$Block_blockNumber);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Block_blockNumber, $async$completer);
    },
    Block_difficulty(file) {
      return A.Block_difficulty$body(file);
    },
    Block_difficulty$body(file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], line, block, gladiator, input, gladiator0, t2, t3, _i, t4, t5, _i0, inputs, outputs, gladiators, t1, $async$temp1;
      var $async$Block_difficulty = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              inputs = A._setArrayType([], type$.JSArray_GladiatorInput);
              outputs = A._setArrayType([], type$.JSArray_GladiatorOutput);
              gladiators = A._setArrayType([], type$.JSArray_Gladiator);
              t1 = new A._StreamIterator(A.checkNotNullable(A.Utils_fischilesche(file), "stream", type$.Object), type$._StreamIterator_String);
              $async$handler = 3;
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(t1.moveNext$0(), $async$Block_difficulty);
            case 6:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                line = t1.get$current();
                t2 = type$.Map_String_dynamic;
                t3 = t2._as(B.C_JsonCodec.decode$1(line));
                t2 = A.ToHash$fromJson(t2._as(t3.$index(0, "toHash")));
                block = new A.Block(A._asString(t3.$index(0, "hash")), t2);
                J.addAll$1$ax(gladiators, block.toHash.gladiators);
                for (t2 = block.toHash.gladiators, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
                  gladiator = t2[_i];
                  if (gladiator.input != null) {
                    t4 = gladiator.input;
                    t4.toString;
                    J.add$1$ax(inputs, t4);
                  }
                  if (gladiator.output != null) {
                    t4 = gladiator.output;
                    t4.toString;
                    J.add$1$ax(outputs, t4);
                  }
                }
                for (t2 = inputs, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
                  input = t2[_i];
                  for (t4 = gladiators, t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i0) {
                    gladiator0 = t4[_i0];
                    if (input.gladiatorId === gladiator0.id)
                      J.remove$1$ax(outputs, gladiator0.output);
                  }
                }
                t2 = J.get$length$asx(outputs);
                $async$returnValue = t2;
                $async$next = [1];
                // goto finally
                $async$goto = 4;
                break;
              }
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              $async$goto = 7;
              return A._asyncAwait(t1.cancel$0(), $async$Block_difficulty);
            case 7:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$returnValue = 0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$Block_difficulty, $async$completer);
    },
    Block_totalDifficulty(file) {
      return A.Block_totalDifficulty$body(file);
    },
    Block_totalDifficulty$body(file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], line, block, t2, t3, t4, totalDifficulty, t1, $async$temp1;
      var $async$Block_totalDifficulty = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              totalDifficulty = 0;
              t1 = new A._StreamIterator(A.checkNotNullable(A.Utils_fischilesche(file), "stream", type$.Object), type$._StreamIterator_String);
              $async$handler = 3;
              t2 = type$.Map_String_dynamic;
            case 6:
              // for condition
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(t1.moveNext$0(), $async$Block_totalDifficulty);
            case 8:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                // goto after for
                $async$goto = 7;
                break;
              }
              line = t1.get$current();
              t3 = t2._as(B.C_JsonCodec.decode$1(line));
              t4 = A.ToHash$fromJson(t2._as(t3.$index(0, "toHash")));
              block = new A.Block(A._asString(t3.$index(0, "hash")), t4);
              t4 = totalDifficulty;
              t3 = block.toHash;
              if (typeof t4 !== "number") {
                $async$returnValue = t4.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 4;
                break;
              }
              totalDifficulty = t4 + t3.difficulty;
              // goto for condition
              $async$goto = 6;
              break;
            case 7:
              // after for
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              $async$goto = 9;
              return A._asyncAwait(t1.cancel$0(), $async$Block_totalDifficulty);
            case 9:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$returnValue = totalDifficulty;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$Block_totalDifficulty, $async$completer);
    },
    Block$prevBlock(last) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Block$fromJson(t1._as(B.C_JsonCodec.decode$1(last)));
      return new A.Block(A.Block$fromJson(t1._as(B.C_JsonCodec.decode$1(last))).hash, t2.toHash);
    },
    Script: function Script(t0) {
      this._name = t0;
    },
    ToHash: function ToHash(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.script = t0;
      _.nonce = t1;
      _.blockNumber = t2;
      _.difficulty = t3;
      _.totalDifficulty = t4;
      _.timestamp = t5;
      _.defence = t6;
      _.producer = t7;
      _.prevHash = t8;
      _.gladiators = t9;
      _.refreeTxs = t10;
      _.wallet = t11;
      _.stuckTxs = t12;
    },
    ToHash$fromJson_closure: function ToHash$fromJson_closure() {
    },
    ToHash$fromJson_closure0: function ToHash$fromJson_closure0() {
    },
    ToHash$fromJson_closure1: function ToHash$fromJson_closure1() {
    },
    ToHash_toJson_closure: function ToHash_toJson_closure() {
    },
    ToHash_toJson_closure0: function ToHash_toJson_closure0() {
    },
    ToHash_toJson_closure1: function ToHash_toJson_closure1() {
    },
    Block: function Block(t0, t1) {
      this.hash = t0;
      this.toHash = t1;
    },
    Block_getPublicKeys_closure: function Block_getPublicKeys_closure(t0) {
      this.gladiatorId = t0;
    },
    Block_getPublicKeys_closure0: function Block_getPublicKeys_closure0(t0) {
      this.gladiatorId = t0;
    },
    Gladiator$(output, input) {
      var t1 = type$.Utf8Codec._eval$1("Codec.S"),
        t2 = t1._as(B.C_JsonCodec.encode$1(input == null ? null : input.toJson$0()));
      t2 = B.C_Utf8Codec.get$encoder().convert$1(t2);
      t1 = t1._as(B.C_JsonCodec.encode$1(output == null ? null : output.toJson$0()));
      t1 = type$.HexCodec._eval$1("Codec.S")._as(B.C__Sha512.convert$1(B.NativeUint8List_methods.$add(t2, B.C_Utf8Codec.get$encoder().convert$1(t1))).bytes);
      return new A.Gladiator(output, input, B.C_HexCodec.get$encoder().convert$1(t1));
    },
    GladiatorInput: function GladiatorInput(t0, t1) {
      this.gladiatorId = t0;
      this.signature = t1;
    },
    GladiatorOutput: function GladiatorOutput(t0, t1) {
      this.publicKeys = t0;
      this.defence = t1;
    },
    Gladiator: function Gladiator(t0, t1, t2) {
      this.output = t0;
      this.input = t1;
      this.id = t2;
    },
    main($arguments) {
      return A.main$body($arguments);
    },
    main$body($arguments) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        aschargs, t5, t6, peerServer, privateKey, wallet, signKey, publicKey, file, app, t1, accPool, t2, refreeTxPool, stuckTxPool, t3, t4, parser, $async$temp1;
      var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              accPool = new A.AccountPool(A._setArrayType([], type$.JSArray_Account));
              t2 = type$.JSArray_Tx;
              refreeTxPool = new A.RefreeTxPool(A._setArrayType([], t2));
              stuckTxPool = new A.StuckTxPool(A._setArrayType([], t2));
              t3 = type$.String;
              t4 = A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.Option);
              parser = new A.ArgParser(t4, A.LinkedHashMap_LinkedHashMap$_empty(t3, t3), new A.UnmodifiableMapView(t4, type$.UnmodifiableMapView_String_Option), new A.UnmodifiableMapView(A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.ArgParser), type$.UnmodifiableMapView_String_ArgParser), [], true);
              parser.addOption$1("bootnode");
              parser.addOption$1("privateKey");
              parser.addOption$2$mandatory("external-ip", true);
              parser.addOption$2$mandatory("internal-ip", true);
              parser.addOption$2$mandatory("port", true);
              parser.addOption$2$mandatory("rpc-port", true);
              parser.addOption$2$mandatory("saveTxt", true);
              type$.Iterable_String._as($arguments);
              t3 = new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, type$.nullable_String), type$.ListQueue_String);
              t3.addAll$1(0, $arguments);
              aschargs = A.Parser$(null, parser, t3, null, null).parse$0();
              t3 = A._asString(aschargs.$index(0, "internal-ip"));
              t4 = A.int_parse(A._asString(aschargs.$index(0, "port")), null);
              t5 = type$.JSArray_String;
              t6 = A._setArrayType([], t5);
              peerServer = new A.PeerServer(t3, t4, refreeTxPool, t6);
              B.JSArray_methods.add$1(t6, t3 + ":" + B.JSInt_methods.toString$0(t4));
              peerServer.bind$0();
              if (aschargs.$index(0, "bootnode") != null)
                peerServer.connect$2(A._asString(aschargs.$index(0, "external-ip")), A._asString(aschargs.$index(0, "bootnode")));
              privateKey = A._asStringQ(aschargs.$index(0, "privateKey"));
              t1.privateKey = privateKey;
              if (privateKey == null) {
                wallet = A.Wallet$();
                A.print("Please store your new keypair");
                A.print(wallet.privateKey);
                A.print(wallet.publicKey);
                t3 = t1.privateKey = A._asStringQ(wallet.privateKey);
              } else
                t3 = privateKey;
              t4 = $.$get$Wallet_curve();
              t3.toString;
              signKey = A.PrivateKey$fromHex(t4, t3);
              t3 = A._lateReadCheck(signKey.__PrivateKey_curve, "curve");
              t4 = t3.scalarBaseMul$1(signKey.get$bytes());
              publicKey = t3.publicKeyToHex$1(new A.PublicKey(t3, A._lateReadCheck(t4.__AffinePoint_X, "X"), A._lateReadCheck(t4.__AffinePoint_Y, "Y")));
              file = A.File_File(A._asString(aschargs.$index(0, "saveTxt")));
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(file.exists$0(), $async$main);
            case 4:
              // returning from await.
              $async$goto = !$async$temp1.boolConversionCheck($async$result) && A.boolConversionCheck(J.$eq$(aschargs.$index(0, "bootnode"), 0)) ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.Block_incipio(A.ToHash$(B.Script_0, 0, 0, 0, 0, Date.now(), publicKey, "", A._setArrayType([A.Gladiator$(new A.GladiatorOutput(A._setArrayType([publicKey], t5), A.Utils_CreateCryptoRandomString(2)), null)], type$.JSArray_Gladiator), A._setArrayType([A.Tx$(A._setArrayType([], type$.JSArray_TxInput), A._setArrayType([new A.TxOutput(A._BigIntImpl_parse("10000000000000000000000000", null), publicKey)], type$.JSArray_TxOutput))], t2), A._setArrayType([], t2))), $async$main);
            case 5:
              // returning from await.
              $async$result.save$1(file);
            case 3:
              // join
              app = new A.Router(A._setArrayType([], type$.JSArray_RouterEntry));
              app.add$3(0, "GET", "/block/<number>", new A.main_closure(file));
              app.add$3(0, "GET", "/new-account", new A.main_closure0());
              app.add$3(0, "GET", "/defences/<gladiatorId>", new A.main_closure1(file));
              app.add$3(0, "GET", "/sockets", new A.main_closure2(peerServer));
              app.add$3(0, "GET", "/refree-tx-pool", new A.main_closure3(refreeTxPool));
              app.add$3(0, "POST", "/create-refree-transaction", new A.main_closure4(file, refreeTxPool, peerServer));
              app.add$3(0, "POST", "/create-stuck-transactions", new A.main_closure5(file, stuckTxPool));
              app.add$3(0, "POST", "/apply-refree-account/<publicKey>", new A.main_closure6(file, accPool));
              app.add$3(0, "POST", "/mine-efectus", new A.main_closure7(file, refreeTxPool, publicKey, accPool, stuckTxPool));
              app.add$3(0, "POST", "/mine-confossus/<gladiatorId>", new A.main_closure8(t1, file, refreeTxPool, publicKey, accPool, stuckTxPool));
              $async$goto = 6;
              return A._asyncAwait(A.serve(app.get$$call(), "127.0.0.1", A.int_parse(A._asString(aschargs.$index(0, "rpc-port")), null)), $async$main);
            case 6:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main, $async$completer);
    },
    main_closure: function main_closure(t0) {
      this.file = t0;
    },
    main_closure0: function main_closure0() {
    },
    main_closure1: function main_closure1(t0) {
      this.file = t0;
    },
    main_closure2: function main_closure2(t0) {
      this.peerServer = t0;
    },
    main_closure3: function main_closure3(t0) {
      this.refreeTxPool = t0;
    },
    main_closure4: function main_closure4(t0, t1, t2) {
      this.file = t0;
      this.refreeTxPool = t1;
      this.peerServer = t2;
    },
    main_closure5: function main_closure5(t0, t1) {
      this.file = t0;
      this.stuckTxPool = t1;
    },
    main_closure6: function main_closure6(t0, t1) {
      this.file = t0;
      this.accPool = t1;
    },
    main_closure7: function main_closure7(t0, t1, t2, t3, t4) {
      var _ = this;
      _.file = t0;
      _.refreeTxPool = t1;
      _.publicKey = t2;
      _.accPool = t3;
      _.stuckTxPool = t4;
    },
    main__closure2: function main__closure2() {
    },
    main__closure3: function main__closure3(t0, t1, t2, t3) {
      var _ = this;
      _.file = t0;
      _.refreeTxPool = t1;
      _.stuckTxPool = t2;
      _.accPool = t3;
    },
    main_closure8: function main_closure8(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.file = t1;
      _.refreeTxPool = t2;
      _.publicKey = t3;
      _.accPool = t4;
      _.stuckTxPool = t5;
    },
    main__closure: function main__closure() {
    },
    main__closure0: function main__closure0(t0, t1, t2, t3) {
      var _ = this;
      _.file = t0;
      _.refreeTxPool = t1;
      _.stuckTxPool = t2;
      _.accPool = t3;
    },
    main__closure1: function main__closure1() {
    },
    PeerServer: function PeerServer(t0, t1, t2, t3) {
      var _ = this;
      _.host = t0;
      _.port = t1;
      _.refreeTxPool = t2;
      _.serverSocket = null;
      _.sockets = t3;
    },
    Account: function Account(t0) {
      this.publicKey = t0;
    },
    AccountPool: function AccountPool(t0) {
      this.accounts = t0;
    },
    RefreeTxPool: function RefreeTxPool(t0) {
      this.txs = t0;
    },
    StuckTxPool: function StuckTxPool(t0) {
      this.txs = t0;
    },
    Tx$(inputs, outputs) {
      var t4,
        t1 = A._arrayInstanceType(inputs),
        t2 = t1._eval$1("MappedListIterable<1,Map<String,@>>"),
        t3 = type$.Utf8Codec._eval$1("Codec.S");
      t2 = t3._as(B.C_JsonCodec.encode$1(A.List_List$of(new A.MappedListIterable(inputs, t1._eval$1("Map<String,@>(1)")._as(new A.Tx_closure()), t2), true, t2._eval$1("ListIterable.E"))));
      t2 = B.C_Utf8Codec.get$encoder().convert$1(t2);
      t1 = A._arrayInstanceType(outputs);
      t4 = t1._eval$1("MappedListIterable<1,Map<String,@>>");
      t4 = t3._as(B.C_JsonCodec.encode$1(A.List_List$of(new A.MappedListIterable(outputs, t1._eval$1("Map<String,@>(1)")._as(new A.Tx_closure0()), t4), true, t4._eval$1("ListIterable.E"))));
      t4 = type$.HexCodec._eval$1("Codec.S")._as(B.C__Sha512.convert$1(B.NativeUint8List_methods.$add(t2, B.C_Utf8Codec.get$encoder().convert$1(t4))).bytes);
      return new A.Tx(inputs, outputs, B.C_HexCodec.get$encoder().convert$1(t4), A.Utils_CreateCryptoRandomString(51));
    },
    Tx$fromJson(json) {
      var t1 = type$.Iterable_dynamic;
      return new A.Tx(A.List_List$from(t1._as(J.map$1$ax(json.$index(0, "inputs"), new A.Tx$fromJson_closure())), true, type$.TxInput), A.List_List$from(t1._as(J.map$1$ax(json.$index(0, "outputs"), new A.Tx$fromJson_closure0())), true, type$.TxOutput), A._asString(json.$index(0, "id")), A._asString(json.$index(0, "random")));
    },
    TxInput: function TxInput(t0, t1, t2) {
      this.txId = t0;
      this.idx = t1;
      this.signature = t2;
    },
    TxOutput: function TxOutput(t0, t1) {
      this.value = t0;
      this.publicKey = t1;
    },
    Tx: function Tx(t0, t1, t2, t3) {
      var _ = this;
      _.inputs = t0;
      _.outputs = t1;
      _.id = t2;
      _.random = t3;
    },
    Tx_closure: function Tx_closure() {
    },
    Tx_closure0: function Tx_closure0() {
    },
    Tx$fromJson_closure: function Tx$fromJson_closure() {
    },
    Tx$fromJson_closure0: function Tx$fromJson_closure0() {
    },
    Tx_toJson_closure: function Tx_toJson_closure() {
    },
    Tx_toJson_closure0: function Tx_toJson_closure0() {
    },
    Wallet$() {
      var t1 = new A.Wallet(null, null),
        t2 = t1.privateKey = $.$get$Wallet_curve().generatePrivateKey$0();
      t1.publicKey = t2.get$publicKey().toString$0(0);
      t1.privateKey = t2.toString$0(0);
      return t1;
    },
    Wallet_getDefences(gladiatorId, file) {
      return A.Wallet_getDefences$body(gladiatorId, file);
    },
    Wallet_getDefences$body(gladiatorId, file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], line, block, t2, t3, t4, t5, _i, tx, t6, t7, t8, _i0, output, t9, t10, t11, t12, _i1, ttxx, t13, t14, _i2, oschout, t15, hex, t16, t17, pub, prefix, byteLen, t18, result, result0, y2, t19, prevBidValue, totalBid, t1, blockHashes, txs, bids, defences, blocks, publicKeys, $async$temp1;
      var $async$Wallet_getDefences = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = type$.JSArray_String;
                blockHashes = A._setArrayType([], t1);
                txs = A._setArrayType([], type$.JSArray_Tx);
                bids = new A.JsLinkedHashMap(type$.JsLinkedHashMap_String_BigInt);
                defences = A._setArrayType([], t1);
                blocks = A._setArrayType([], type$.JSArray_Block);
                publicKeys = A._setArrayType([], t1);
                t1 = new A._StreamIterator(A.checkNotNullable(A.Utils_fischilesche(file), "stream", type$.Object), type$._StreamIterator_String);
                $async$handler = 3;
                t2 = type$.Map_String_dynamic;
              case 6:
                // for condition
                $async$temp1 = A;
                $async$goto = 8;
                return A._asyncAwait(t1.moveNext$0(), $async$Wallet_getDefences);
              case 8:
                // returning from await.
                if (!$async$temp1.boolConversionCheck($async$result)) {
                  // goto after for
                  $async$goto = 7;
                  break;
                }
                line = t1.get$current();
                t3 = t2._as(B.C_JsonCodec.decode$1(line));
                t4 = A.ToHash$fromJson(t2._as(t3.$index(0, "toHash")));
                block = new A.Block(A._asString(t3.$index(0, "hash")), t4);
                if (B.JSArray_methods.any$1(block.toHash.gladiators, new A.Wallet_getDefences_closure(gladiatorId)))
                  publicKeys = B.JSArray_methods.singleWhere$1(block.toHash.gladiators, new A.Wallet_getDefences_closure0(gladiatorId)).output.publicKeys;
                J.add$1$ax(blocks, block);
                J.addAll$1$ax(txs, block.toHash.refreeTxs);
                J.add$1$ax(blockHashes, block.hash);
                // goto for condition
                $async$goto = 6;
                break;
              case 7:
                // after for
                $async$next.push(5);
                // goto finally
                $async$goto = 4;
                break;
              case 3:
                // uncaught
                $async$next = [2];
              case 4:
                // finally
                $async$handler = 2;
                $async$goto = 9;
                return A._asyncAwait(t1.cancel$0(), $async$Wallet_getDefences);
              case 9:
                // returning from await.
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 5:
                // after finally
                for (t1 = txs, t2 = t1.length, t3 = type$.String, t4 = type$.dynamic, t5 = type$.Utf8Codec._eval$1("Codec.S"), _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
                  tx = t1[_i];
                  for (t6 = tx.outputs, t7 = t6.length, t8 = tx.inputs, _i0 = 0; _i0 < t6.length; t6.length === t7 || (0, A.throwConcurrentModificationError)(t6), ++_i0) {
                    output = t6[_i0];
                    t9 = output.publicKey;
                    if (J.contains$1$asx(blockHashes, t9))
                      for (t10 = txs, t11 = t10.length, t12 = output.value, _i1 = 0; _i1 < t10.length; t10.length === t11 || (0, A.throwConcurrentModificationError)(t10), ++_i1) {
                        ttxx = t10[_i1];
                        if (0 >= t8.length) {
                          $async$returnValue = A.ioore(t8, 0);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        if (t8[0].txId === ttxx.id)
                          for (t13 = ttxx.outputs, t14 = t13.length, _i2 = 0; _i2 < t13.length; t13.length === t14 || (0, A.throwConcurrentModificationError)(t13), ++_i2) {
                            oschout = t13[_i2];
                            t15 = $.$get$Wallet_curve();
                            hex = oschout.publicKey;
                            t16 = new A.PublicKey(t15, $, $);
                            t16.__AffinePoint_Y = t16.__AffinePoint_X = $.$get$_BigIntImpl_zero();
                            t17 = hex.length;
                            if (t17 <= 2)
                              A.throwExpression($.$get$ErrInvalidPublicKeyHexLength());
                            pub = A._Cell$named("pub");
                            prefix = B.JSString_methods.substring$2(hex, 0, 2);
                            switch (prefix) {
                              case "02":
                                pub._value = t15.compressedHexToPublicKey$1(hex);
                                break;
                              case "03":
                                pub._value = t15.compressedHexToPublicKey$1(hex);
                                break;
                              case "04":
                                if (prefix !== "04")
                                  A.throwExpression("invalid public key hex string");
                                byteLen = B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(t15.__EllipticCurve_bitSize, "bitSize") + 7, 3);
                                if (t17 !== 2 * (1 + 2 * byteLen))
                                  A.throwExpression("invalid public key hex string");
                                t17 = 2 * (1 + byteLen);
                                t18 = B.JSString_methods.substring$2(hex, 2, t17);
                                result = A._BigIntImpl__tryParse(t18, 16);
                                if (result == null)
                                  A.throwExpression(A.FormatException$("Could not parse BigInt", t18, null));
                                t17 = B.JSString_methods.substring$1(hex, t17);
                                result0 = A._BigIntImpl__tryParse(t17, 16);
                                if (result0 == null)
                                  A.throwExpression(A.FormatException$("Could not parse BigInt", t17, null));
                                y2 = A._lateReadCheck(result0, "Y").$mul(0, A._lateReadCheck(result0, "Y")).$mod(0, A._lateReadCheck(t15.__EllipticCurve_p, "p"));
                                t17 = t15._polynomial$1(A._lateReadCheck(result, "X")).compareTo$1(0, y2);
                                if (t17 !== 0)
                                  A.throwExpression("public key is not on this curve");
                                pub._value = new A.PublicKey(t15, result, result0);
                                break;
                              default:
                                A.throwExpression($.$get$ErrInvalidPublicKeyHexPrefix());
                            }
                            t15 = pub._value;
                            if (t15 === pub)
                              A.throwExpression(A.LateError$localNI(pub.__late_helper$_name));
                            t16.__AffinePoint_X = A._lateReadCheck(t15.__AffinePoint_X, "X");
                            t15 = pub._value;
                            if (t15 === pub)
                              A.throwExpression(A.LateError$localNI(pub.__late_helper$_name));
                            t16.__AffinePoint_Y = A._lateReadCheck(t15.__AffinePoint_Y, "Y");
                            t15 = t5._as(B.C_JsonCodec.encode$1(A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", hex, "value", oschout.value.toString$0(0)], t3, t4)));
                            t15 = B.C_Utf8Codec.get$encoder().convert$1(t15);
                            if (0 >= t8.length) {
                              $async$returnValue = A.ioore(t8, 0);
                              // goto return
                              $async$goto = 1;
                              break $async$outer;
                            }
                            t17 = t8[0].signature;
                            t18 = new A.Signature($, $);
                            t19 = B.JSString_methods.substring$2(t17, 0, 64);
                            result = A._BigIntImpl__tryParse(t19, 16);
                            if (result == null)
                              A.throwExpression(A.FormatException$("Could not parse BigInt", t19, null));
                            t18.__Signature_R = result;
                            t17 = B.JSString_methods.substring$2(t17, 64, 128);
                            result = A._BigIntImpl__tryParse(t17, 16);
                            if (result == null)
                              A.throwExpression(A.FormatException$("Could not parse BigInt", t17, null));
                            t18.__Signature_S = result;
                            if (A.verify(t16, t15, t18))
                              if (J.contains$1$asx(publicKeys, hex))
                                if (bids.$index(0, t9) == null)
                                  bids.$indexSet(0, t9, t12);
                                else {
                                  prevBidValue = bids.$index(0, t9);
                                  prevBidValue.toString;
                                  bids.$indexSet(0, t9, t12.$add(0, prevBidValue));
                                }
                          }
                      }
                  }
                }
                for (t1 = bids.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
                  t2 = t1.get$current();
                  result = A._BigIntImpl__tryParse("0", null);
                  if (result == null)
                    A.throwExpression(A.FormatException$("Could not parse BigInt", "0", null));
                  for (t3 = txs, t4 = t3.length, totalBid = result, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i)
                    for (t5 = t3[_i].outputs, t6 = A._arrayInstanceType(t5), t7 = t6._eval$1("bool(1)")._as(new A.Wallet_getDefences_closure1(t2)), t5 = B.JSArray_methods.get$iterator(t5), t6 = new A.WhereIterator(t5, t7, t6._eval$1("WhereIterator<1>")); t6.moveNext$0();)
                      totalBid = totalBid.$add(0, t5.get$current().value);
                  t3 = bids.$index(0, t2);
                  t3.toString;
                  t4 = $.$get$_BigIntImpl_two();
                  t4 = B.JSInt_methods.toString$0(B.JSNumber_methods.round$0(totalBid.toDouble$0(0) / t4.toDouble$0(0)));
                  result = A._BigIntImpl__tryParse(t4, null);
                  if (result == null)
                    A.throwExpression(A.FormatException$("Could not parse BigInt", t4, null));
                  if (J.compareTo$1$ns(t3, result) > 0)
                    B.JSArray_methods.add$1(defences, J.singleWhere$1$ax(blocks, new A.Wallet_getDefences_closure2(t2)).toHash.defence);
                }
                for (t1 = defences.length, _i = 0; _i < t1; ++_i)
                  ;
                $async$returnValue = "";
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return A._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return A._asyncStartSync($async$Wallet_getDefences, $async$completer);
    },
    Wallet_outputs(stuck, publicKey, file) {
      return A.Wallet_outputs$body(stuck, publicKey, file);
    },
    Wallet_outputs$body(stuck, publicKey, file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_WalletOutput),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], line, block, innerTxs, tx, i, t2, t3, t4, _i, t5, t6, input, outputs, inputs, txs, t1, $async$temp1;
      var $async$Wallet_outputs = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                outputs = A._setArrayType([], type$.JSArray_WalletOutput);
                inputs = A._setArrayType([], type$.JSArray_TxInput);
                txs = A._setArrayType([], type$.JSArray_Tx);
                t1 = new A._StreamIterator(A.checkNotNullable(A.Utils_fischilesche(file), "stream", type$.Object), type$._StreamIterator_String);
                $async$handler = 3;
                t2 = type$.Map_String_dynamic;
              case 6:
                // for condition
                $async$temp1 = A;
                $async$goto = 8;
                return A._asyncAwait(t1.moveNext$0(), $async$Wallet_outputs);
              case 8:
                // returning from await.
                if (!$async$temp1.boolConversionCheck($async$result)) {
                  // goto after for
                  $async$goto = 7;
                  break;
                }
                line = t1.get$current();
                t3 = t2._as(B.C_JsonCodec.decode$1(line));
                t4 = A.ToHash$fromJson(t2._as(t3.$index(0, "toHash")));
                block = new A.Block(A._asString(t3.$index(0, "hash")), t4);
                innerTxs = stuck ? block.toHash.stuckTxs : block.toHash.refreeTxs;
                J.addAll$1$ax(txs, innerTxs);
                for (t3 = innerTxs, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
                  tx = t3[_i];
                  i = 0;
                  while (true) {
                    t5 = i;
                    t6 = tx.outputs.length;
                    if (typeof t5 !== "number") {
                      $async$returnValue = t5.$lt();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    if (!(t5 < t6))
                      break;
                    if (B.JSArray_methods.$index(tx.outputs, i).publicKey === publicKey) {
                      t5 = tx.id;
                      J.add$1$ax(outputs, new A.WalletOutput(i, t5, B.JSArray_methods.$index(tx.outputs, i)));
                    }
                    t5 = i;
                    if (typeof t5 !== "number") {
                      $async$returnValue = t5.$add();
                      $async$next = [1];
                      // goto finally
                      $async$goto = 4;
                      break $async$outer;
                    }
                    i = t5 + 1;
                  }
                  J.addAll$1$ax(inputs, tx.inputs);
                }
                // goto for condition
                $async$goto = 6;
                break;
              case 7:
                // after for
                $async$next.push(5);
                // goto finally
                $async$goto = 4;
                break;
              case 3:
                // uncaught
                $async$next = [2];
              case 4:
                // finally
                $async$handler = 2;
                $async$goto = 9;
                return A._asyncAwait(t1.cancel$0(), $async$Wallet_outputs);
              case 9:
                // returning from await.
                // goto the next finally handler
                $async$goto = $async$next.pop();
                break;
              case 5:
                // after finally
                for (t1 = inputs, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
                  input = t1[_i];
                  tx = J.firstWhere$1$ax(txs, new A.Wallet_outputs_closure(input));
                  t3 = outputs;
                  t4 = A.instanceType(t3);
                  t4 = new A.WhereIterable(t3, t4._eval$1("bool(1)")._as(new A.Wallet_outputs_closure0(tx)), t4._eval$1("WhereIterable<1>"));
                  if (!t4.get$isEmpty(t4)) {
                    t3 = tx.id;
                    t4 = input.idx;
                    t5 = tx.outputs;
                    if (!(t4 >= 0 && t4 < t5.length)) {
                      $async$returnValue = A.ioore(t5, t4);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    J.remove$1$ax(outputs, new A.WalletOutput(t4, t3, t5[t4]));
                  }
                }
                $async$returnValue = outputs;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return A._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return A._asyncStartSync($async$Wallet_outputs, $async$completer);
    },
    Wallet_newTx(stuck, privateKey, to, value, file) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Tx),
        $async$returnValue, publicKey, outputs, balance, toAddInputs, toAddOutputs, t3, t4, toFulfill, t5, t6, t7, t8, t9, result, t1, t2;
      var $async$Wallet_newTx = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.PrivateKey$fromHex($.$get$Wallet_curve(), privateKey);
              t2 = A._lateReadCheck(t1.__PrivateKey_curve, "curve");
              t1 = t2.scalarBaseMul$1(t1.get$bytes());
              publicKey = t2.publicKeyToHex$1(new A.PublicKey(t2, A._lateReadCheck(t1.__AffinePoint_X, "X"), A._lateReadCheck(t1.__AffinePoint_Y, "Y")));
              $async$goto = 3;
              return A._asyncAwait(A.Wallet_outputs(stuck, publicKey, file), $async$Wallet_newTx);
            case 3:
              // returning from await.
              outputs = $async$result;
              balance = A._BigIntImpl_parse("0", null);
              for (t1 = J.getInterceptor$ax(outputs), t2 = t1.get$iterator(outputs); t2.moveNext$0();)
                balance = balance.$add(0, t2.get$current().output.value);
              if (balance.compareTo$1(0, value) < 0)
                throw A.wrapException("Insufficient funds");
              toAddInputs = A._setArrayType([], type$.JSArray_TxInput);
              toAddOutputs = A._setArrayType([], type$.JSArray_TxOutput);
              for (t1 = t1.get$iterator(outputs), t2 = type$.Utf8Codec._eval$1("Codec.S"), t3 = type$.String, t4 = type$.dynamic, toFulfill = value; t1.moveNext$0();) {
                t5 = t1.get$current();
                t6 = t5.output;
                t7 = t6.value;
                if (t7.compareTo$1(0, toFulfill) < 0) {
                  t8 = t5.idx;
                  t6 = A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", t6.publicKey, "value", t7.toString$0(0)], t3, t4);
                  t9 = new A.PrivateKey($.$get$Wallet_curve());
                  result = A._BigIntImpl__tryParse(privateKey, 16);
                  if (result == null)
                    A.throwExpression(A.FormatException$("Could not parse BigInt", privateKey, null));
                  t9.__PrivateKey_D = result;
                  t6 = t2._as(B.C_JsonCodec.encode$1(t6));
                  t6 = A.signature(t9, B.C_Utf8Codec.get$encoder().convert$1(t6));
                  t6 = B.JSString_methods.padLeft$2(A._lateReadCheck(t6.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(t6.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
                  B.JSArray_methods.add$1(toAddInputs, new A.TxInput(t5.txId, t8, t6));
                  B.JSArray_methods.add$1(toAddOutputs, new A.TxOutput(t7, to));
                  toFulfill = toFulfill.$sub(0, t7);
                } else {
                  t1 = t7.compareTo$1(0, toFulfill);
                  t8 = t5.idx;
                  t6 = t6.publicKey;
                  if (t1 > 0) {
                    t1 = A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", t6, "value", t7.toString$0(0)], t3, t4);
                    t3 = new A.PrivateKey($.$get$Wallet_curve());
                    result = A._BigIntImpl__tryParse(privateKey, 16);
                    if (result == null)
                      A.throwExpression(A.FormatException$("Could not parse BigInt", privateKey, null));
                    t3.__PrivateKey_D = result;
                    t1 = t2._as(B.C_JsonCodec.encode$1(t1));
                    t1 = A.signature(t3, B.C_Utf8Codec.get$encoder().convert$1(t1));
                    t1 = B.JSString_methods.padLeft$2(A._lateReadCheck(t1.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(t1.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
                    B.JSArray_methods.add$1(toAddInputs, new A.TxInput(t5.txId, t8, t1));
                    B.JSArray_methods.add$1(toAddOutputs, new A.TxOutput(t7.$sub(0, toFulfill), publicKey));
                    B.JSArray_methods.add$1(toAddOutputs, new A.TxOutput(toFulfill, to));
                    break;
                  } else {
                    t1 = A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", t6, "value", t7.toString$0(0)], t3, t4);
                    t3 = new A.PrivateKey($.$get$Wallet_curve());
                    result = A._BigIntImpl__tryParse(privateKey, 16);
                    if (result == null)
                      A.throwExpression(A.FormatException$("Could not parse BigInt", privateKey, null));
                    t3.__PrivateKey_D = result;
                    t1 = t2._as(B.C_JsonCodec.encode$1(t1));
                    t1 = A.signature(t3, B.C_Utf8Codec.get$encoder().convert$1(t1));
                    t1 = B.JSString_methods.padLeft$2(A._lateReadCheck(t1.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(t1.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
                    B.JSArray_methods.add$1(toAddInputs, new A.TxInput(t5.txId, t8, t1));
                    B.JSArray_methods.add$1(toAddOutputs, new A.TxOutput(toFulfill, to));
                    break;
                  }
                }
              }
              $async$returnValue = A.Tx$(toAddInputs, toAddOutputs);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Wallet_newTx, $async$completer);
    },
    WalletOutput: function WalletOutput(t0, t1, t2) {
      this.idx = t0;
      this.txId = t1;
      this.output = t2;
    },
    Wallet: function Wallet(t0, t1) {
      this.privateKey = t0;
      this.publicKey = t1;
    },
    Wallet_getDefences_closure: function Wallet_getDefences_closure(t0) {
      this.gladiatorId = t0;
    },
    Wallet_getDefences_closure0: function Wallet_getDefences_closure0(t0) {
      this.gladiatorId = t0;
    },
    Wallet_getDefences_closure1: function Wallet_getDefences_closure1(t0) {
      this.key = t0;
    },
    Wallet_getDefences_closure2: function Wallet_getDefences_closure2(t0) {
      this.key = t0;
    },
    Wallet_outputs_closure: function Wallet_outputs_closure(t0) {
      this.input = t0;
    },
    Wallet_outputs_closure0: function Wallet_outputs_closure0(t0) {
      this.tx = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    equalsIgnoreAsciiCase(a, b) {
      var i, aChar, bChar, aCharLowerCase,
        t1 = a.length;
      if (t1 !== b.length)
        return false;
      for (i = 0; i < t1; ++i) {
        aChar = B.JSString_methods._codeUnitAt$1(a, i);
        bChar = B.JSString_methods._codeUnitAt$1(b, i);
        if (aChar === bChar)
          continue;
        if ((aChar ^ bChar) !== 32)
          return false;
        aCharLowerCase = aChar | 32;
        if (97 <= aCharLowerCase && aCharLowerCase <= 122)
          continue;
        return false;
      }
      return true;
    },
    groupBy(values, key, $S, $T) {
      var t1, _i, element, t2, t3,
        map = A.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = $S._eval$1("JSArray<0>"), _i = 0; _i < 1; ++_i) {
        element = values[_i];
        t2 = key.call$1(element);
        t3 = map.$index(0, t2);
        if (t3 == null) {
          t3 = A._setArrayType([], t1);
          map.$indexSet(0, t2, t3);
          t2 = t3;
        } else
          t2 = t3;
        B.JSArray_methods.add$1(t2, element);
      }
      return map;
    },
    signature(priv, hash) {
      var rand, byteLen, k, kInv, t6, t7, t8, t9, t10, t11, _list, i, result, t12, t13, e,
        t1 = priv.__PrivateKey_curve,
        t2 = A._lateReadCheck(t1, "curve"),
        t3 = $.$get$_BigIntImpl_zero(),
        sig = new A.Signature(t3, t3),
        t4 = t2.__EllipticCurve_n,
        t5 = A._lateReadCheck(t4, "n");
      if (t5.get$sign(t5) === 0)
        throw A.wrapException(B.Type_ErrInvalidCurve_lZK);
      t5 = $.$get$Random__secureRandom();
      rand = A._Cell$named("rand");
      byteLen = B.JSInt_methods._tdivFast$1(A._lateReadCheck(t2.__EllipticCurve_bitSize, "bitSize"), 8) + 8;
      k = A._Cell$named("k");
      kInv = A._Cell$named("kInv");
      for (t2 = type$.BigInt, t6 = type$.List_int, t7 = rand.__late_helper$_name, t8 = type$.JSArray_String, t9 = byteLen < 0, t10 = type$.JSArray_int, t11 = kInv.__late_helper$_name; true;) {
        for (; true; t3 = t12) {
          if (t9)
            A.throwExpression(A.ArgumentError$("Length must be a non-negative integer: " + byteLen, null));
          _list = A._setArrayType(new Array(byteLen), t10);
          for (i = 0; i < byteLen; ++i)
            _list[i] = t5.nextInt$1(256);
          rand._value = _list;
          _list = A._setArrayType(new Array(byteLen), t8);
          for (i = 0; i < byteLen; ++i) {
            t3 = rand._value;
            if (t3 === rand)
              A.throwExpression(A.LateError$localNI(t7));
            _list[i] = B.JSString_methods.padLeft$2(J.toRadixString$1$n(J.$index$asx(t3, i), 16), 2, "0");
          }
          t3 = B.JSArray_methods.join$0(_list);
          result = A._BigIntImpl__tryParse(t3, 16);
          if (result == null)
            A.throwExpression(A.FormatException$("Could not parse BigInt", t3, null));
          k._value = result;
          kInv._value = result.modInverse$1(0, A._lateReadCheck(t4, "n"));
          t3 = A._lateReadCheck(t1, "curve");
          t12 = rand._value;
          if (t12 === rand)
            A.throwExpression(A.LateError$localNI(t7));
          t6._as(t12);
          t13 = t3.__EllipticCurve_G;
          t12 = A._lateReadCheck(t3.scalarMul$2(new A.AffinePoint(A._lateReadCheck(A._lateReadCheck(t13, "G").__AffinePoint_X, "X"), A._lateReadCheck(A._lateReadCheck(t13, "G").__AffinePoint_Y, "Y")), t12).__AffinePoint_X, "X");
          sig.__Signature_R = t12;
          t12 = sig.__Signature_R = A._lateReadCheck(t12, "R").$mod(0, A._lateReadCheck(t4, "n"));
          t3 = A._lateReadCheck(t12, "R");
          if (t3.get$sign(t3) !== 0) {
            t3 = t12;
            break;
          }
        }
        t12 = A._lateReadCheck(t4, "n");
        e = A.bitsToInt(hash, t12.get$bitLength(t12));
        t12 = t2._as(A._lateReadCheck(priv.__PrivateKey_D, "D").$mul(0, A._lateReadCheck(t3, "R")));
        sig.__Signature_S = t12;
        t12 = t2._as(A._lateReadCheck(t12, "S").$add(0, e));
        sig.__Signature_S = t12;
        t12 = A._lateReadCheck(t12, "S");
        t13 = kInv._value;
        if (t13 === kInv)
          A.throwExpression(A.LateError$localNI(t11));
        t12 = t2._as(t12.$mul(0, t13));
        sig.__Signature_S = t12;
        t12 = A._lateReadCheck(t12, "S").$mod(0, A._lateReadCheck(t4, "n"));
        sig.__Signature_S = t12;
        t12 = A._lateReadCheck(t12, "S");
        if (t12.get$sign(t12) !== 0)
          break;
      }
      return sig;
    },
    verify(pub, hash, sig) {
      var t2, e, w, u1, u2, hexU1, hexU2, _length, _list, i, t3, p1, p2, z1, z2, _p, p, _s1_ = "n", _s1_0 = "X",
        curve = pub.curve,
        byteLen = B.JSInt_methods._tdivFast$1(A._lateReadCheck(curve.__EllipticCurve_bitSize, "bitSize") + 7, 8),
        t1 = A._lateReadCheck(sig.__Signature_R, "R");
      if (t1.get$sign(t1) > 0) {
        t1 = A._lateReadCheck(sig.__Signature_S, "S");
        t1 = t1.get$sign(t1) <= 0;
      } else
        t1 = true;
      if (t1)
        return false;
      t1 = curve.__EllipticCurve_n;
      if (A._lateReadCheck(sig.__Signature_R, "R").compareTo$1(0, A._lateReadCheck(t1, _s1_)) >= 0 || A._lateReadCheck(sig.__Signature_S, "S").compareTo$1(0, A._lateReadCheck(t1, _s1_)) >= 0)
        return false;
      t2 = A._lateReadCheck(t1, _s1_);
      e = A.bitsToInt(hash, t2.get$bitLength(t2));
      w = A._lateReadCheck(sig.__Signature_S, "S").modInverse$1(0, A._lateReadCheck(t1, _s1_));
      u1 = e.$mul(0, w).$mod(0, A._lateReadCheck(t1, _s1_));
      u2 = A._lateReadCheck(sig.__Signature_R, "R").$mul(0, w).$mod(0, A._lateReadCheck(t1, _s1_));
      t2 = byteLen * 2;
      hexU1 = B.JSString_methods.padLeft$2(u1.toRadixString$1(0, 16), t2, "0");
      hexU2 = B.JSString_methods.padLeft$2(u2.toRadixString$1(0, 16), t2, "0");
      _length = B.JSInt_methods._tdivFast$1(hexU1.length, 2);
      t2 = type$.int;
      _list = J.JSArray_JSArray$allocateGrowable(_length, t2);
      for (i = 0; i < _length; ++i) {
        t3 = i * 2;
        _list[i] = A.int_parse(B.JSString_methods.substring$2(hexU1, t3, t3 + 2), 16);
      }
      p1 = curve.scalarBaseMul$1(_list);
      _length = B.JSInt_methods._tdivFast$1(hexU2.length, 2);
      _list = J.JSArray_JSArray$allocateGrowable(_length, t2);
      for (i = 0; i < _length; ++i) {
        t2 = i * 2;
        _list[i] = A.int_parse(B.JSString_methods.substring$2(hexU2, t2, t2 + 2), 16);
      }
      p2 = curve.scalarMul$2(pub, _list);
      z1 = A.zForAffine(p1);
      z2 = A.zForAffine(p2);
      _p = curve._addJacobian$6(A._lateReadCheck(p1.__AffinePoint_X, _s1_0), A._lateReadCheck(p1.__AffinePoint_Y, "Y"), z1, A._lateReadCheck(p2.__AffinePoint_X, _s1_0), A._lateReadCheck(p2.__AffinePoint_Y, "Y"), z2);
      p = curve._affineFromJacobian$3(A._lateReadCheck(_p.__JacobianPoint_X, _s1_0), A._lateReadCheck(_p.__JacobianPoint_Y, "Y"), A._lateReadCheck(_p.__JacobianPoint_Z, "Z"));
      t2 = A._lateReadCheck(p.__AffinePoint_X, _s1_0);
      if (t2.get$sign(t2) === 0) {
        t2 = A._lateReadCheck(p.__AffinePoint_Y, "Y");
        t2 = t2.get$sign(t2) === 0;
      } else
        t2 = false;
      if (t2)
        return false;
      t1 = A._lateReadCheck(p.__AffinePoint_X, _s1_0).$mod(0, A._lateReadCheck(t1, _s1_));
      p.__AffinePoint_X = t1;
      t1 = A._lateReadCheck(t1, _s1_0).compareTo$1(0, A._lateReadCheck(sig.__Signature_R, "R"));
      return t1 === 0;
    },
    bitsToInt(hash, qBitLen) {
      var _length, _list, i, ret, excess,
        orderBytes = B.JSInt_methods._tdivFast$1(qBitLen + 7, 8),
        t1 = J.getInterceptor$asx(hash);
      if (t1.get$length(hash) > qBitLen)
        hash = t1.sublist$2(hash, 0, orderBytes);
      t1 = J.getInterceptor$asx(hash);
      _length = t1.get$length(hash);
      _list = J.JSArray_JSArray$allocateGrowable(_length, type$.String);
      for (i = 0; i < _length; ++i)
        _list[i] = B.JSString_methods.padLeft$2(J.toRadixString$1$n(t1.$index(hash, i), 16), 2, "0");
      ret = A._BigIntImpl_parse(B.JSArray_methods.join$0(_list), 16);
      excess = t1.get$length(hash) * 8 - qBitLen;
      if (excess > 0)
        ret.$shr(0, excess);
      return ret;
    },
    wrapFormatException($name, value, body, $T) {
      var error, error0, t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SourceSpanFormatException) {
          error = t1;
          throw A.wrapException(A.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, error.get$source()));
        } else if (type$.FormatException._is(t1)) {
          error0 = t1;
          throw A.wrapException(A.FormatException$("Invalid " + $name + ' "' + value + '": ' + error0.get$message(), error0.get$source(), error0.get$offset()));
        } else
          throw exception;
      }
    },
    bigIntToBytes(number, outLen) {
      var result, pos, i, pos0, t1,
        size = B.JSInt_methods._shrOtherPositive$1(number.get$bitLength(number) + 7, 3);
      if (outLen == null)
        outLen = size;
      else if (outLen < size)
        throw A.wrapException(A.Exception_Exception("Number too large"));
      result = new Uint8Array(outLen);
      pos = outLen - 1;
      for (i = 0; i < size; ++i, pos = pos0) {
        pos0 = pos - 1;
        t1 = number.$and(0, $.$get$_byteMask()).toInt$0(0);
        if (!(pos >= 0 && pos < outLen))
          return A.ioore(result, pos);
        result[pos] = t1;
        number = number.$shr(0, 8);
      }
      return result;
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!A.isAlphabetic(B.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (B.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return B.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    _combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    isAllTheSame(iter) {
      var firstValue, t1, t2;
      if (iter.get$length(iter) === 0)
        return true;
      firstValue = iter.get$first(iter);
      for (t1 = A.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();)
        if (!A.boolConversionCheck(J.$eq$(t2._as(t1.__internal$_current), firstValue)))
          return false;
      return true;
    },
    replaceFirstNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no null elements.", null));
      B.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      B.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits(string, codeUnit) {
      var t1, t2, count;
      for (t1 = new A.CodeUnits(string), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E"), count = 0; t1.moveNext$0();)
        if (t2._as(t1.__internal$_current) === codeUnit)
          ++count;
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = B.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = B.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : B.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = B.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    },
    Utils_CreateCryptoRandomString($length) {
      var i,
        values = J.JSArray_JSArray$allocateGrowable($length, type$.int);
      for (i = 0; i < $length; ++i)
        values[i] = $.$get$Utils__random().nextInt$1(256);
      type$.HexCodec._eval$1("Codec.S")._as(values);
      return B.C_HexCodec.get$encoder().convert$1(values);
    },
    Utils_HexToListOfInt(hex) {
      var i, t1,
        _length = B.JSInt_methods._tdivFast$1(hex.length, 2),
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.int);
      for (i = 0; i < _length; ++i) {
        t1 = i * 2;
        _list[i] = A.int_parse(B.JSString_methods.substring$2(hex, t1, t1 + 2), 16);
      }
      return _list;
    },
    Utils_fischilesche(file) {
      var t1 = $.Zone__current;
      t1 = type$._FileStream._eval$1("StreamTransformer<Stream.T,String>")._as(B.Utf8Decoder_false).bind$1(new A._FileStream(file._io$_path, 0, null, new A._AsyncCompleter(new A._Future(t1, type$._Future_dynamic), type$._AsyncCompleter_dynamic)));
      return t1.$ti._eval$1("StreamTransformer<Stream.T,String>")._as(new A.LineSplitter()).bind$1(t1);
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = B.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$single$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$single(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    allMatches$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    firstWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    map$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    remove$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    singleWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).singleWhere$1(receiver, a0);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  A.JS_CONST.prototype = {};
  A.HttpException.prototype = {
    toString$0(_) {
      var t1 = "" + "HttpException: " + this.message,
        uri = this.uri;
      if (uri != null)
        t1 += ", uri = " + uri.toString$0(0);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A._HttpHeaders.prototype = {
    _HttpHeaders$3$defaultPortForScheme$initialHeaders(protocolVersion, defaultPortForScheme, initialHeaders) {
      var _this = this;
      if (initialHeaders != null) {
        initialHeaders.__http$_headers.forEach$1(0, new A._HttpHeaders_closure(_this));
        _this._contentLength = initialHeaders._contentLength;
        _this._persistentConnection = initialHeaders._persistentConnection;
        _this._chunkedTransferEncoding = initialHeaders._chunkedTransferEncoding;
        _this.__http$_host = initialHeaders.__http$_host;
        _this.__http$_port = initialHeaders.__http$_port;
      }
      if (_this.protocolVersion === "1.0")
        _this._chunkedTransferEncoding = _this._persistentConnection = false;
    },
    $index(_, $name) {
      return this.__http$_headers.$index(0, A._HttpHeaders__validateField(A._asString($name)));
    },
    add$3$preserveHeaderCase(_, $name, value, preserveHeaderCase) {
      var lowercaseName, t1, t2, _this = this;
      if (!_this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      lowercaseName = A._HttpHeaders__validateField($name);
      t1 = preserveHeaderCase && $name !== lowercaseName;
      t2 = _this._originalHeaderNames;
      if (t1) {
        if (t2 == null) {
          t1 = type$.String;
          t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
          _this.set$_originalHeaderNames(t1);
        } else
          t1 = t2;
        t1.$indexSet(0, lowercaseName, $name);
      } else if (t2 != null)
        t2.remove$1(0, lowercaseName);
      _this.__http$_addAll$2(lowercaseName, value);
    },
    add$2($receiver, $name, value) {
      return this.add$3$preserveHeaderCase($receiver, $name, value, false);
    },
    __http$_addAll$2($name, value) {
      var t1, t2;
      if (type$.Iterable_dynamic._is(value))
        for (t1 = J.get$iterator$ax(value), t2 = type$.Object; t1.moveNext$0();)
          this.__http$_add$2($name, A._HttpHeaders__validateValue(t2._as(t1.get$current())));
      else
        this.__http$_add$2($name, A._HttpHeaders__validateValue(value));
    },
    $set$2($name, value) {
      var lowercaseName, t1, _this = this;
      if (!_this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      lowercaseName = A._HttpHeaders__validateField($name);
      _this.__http$_headers.remove$1(0, lowercaseName);
      t1 = _this._originalHeaderNames;
      if (t1 != null)
        t1.remove$1(0, lowercaseName);
      if (lowercaseName === "content-length")
        _this._contentLength = -1;
      if (lowercaseName === "transfer-encoding")
        _this._chunkedTransferEncoding = false;
      _this.__http$_addAll$2(lowercaseName, value);
    },
    remove$2(_, $name, value) {
      var t1, values, t2, _this = this;
      if (!_this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      $name = A._HttpHeaders__validateField($name);
      value = A._HttpHeaders__validateValue(value);
      t1 = _this.__http$_headers;
      values = t1.$index(0, $name);
      if (values != null) {
        t2 = J.getInterceptor$ax(values);
        t2.remove$1(values, _this._valueToString$1(value));
        if (t2.get$isEmpty(values)) {
          t1.remove$1(0, $name);
          t1 = _this._originalHeaderNames;
          if (t1 != null)
            t1.remove$1(0, $name);
        }
      }
      if ($name === "transfer-encoding" && A.boolConversionCheck(J.$eq$(value, "chunked")))
        _this._chunkedTransferEncoding = false;
    },
    forEach$1(_, action) {
      this.__http$_headers.forEach$1(0, new A._HttpHeaders_forEach_closure(this, type$.void_Function_2_String_and_List_String._as(action)));
    },
    set$persistentConnection(persistentConnection) {
      var originalName, _this = this,
        _s10_ = "connection",
        _s10_0 = "keep-alive";
      if (!_this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      if (persistentConnection === _this._persistentConnection)
        return;
      originalName = _this._originalHeaderName$1(_s10_);
      if (persistentConnection)
        if (_this.protocolVersion === "1.1")
          _this.remove$2(0, _s10_, "close");
        else {
          if (_this._contentLength < 0)
            throw A.wrapException(A.HttpException$("Trying to set 'Connection: Keep-Alive' on HTTP 1.0 headers with no ContentLength", null));
          _this.add$3$preserveHeaderCase(0, originalName, _s10_0, true);
        }
      else if (_this.protocolVersion === "1.1")
        _this.add$3$preserveHeaderCase(0, originalName, "close", true);
      else
        _this.remove$2(0, _s10_, _s10_0);
      _this._persistentConnection = persistentConnection;
    },
    set$contentLength(contentLength) {
      var t1, _this = this,
        _s14_ = "content-length";
      if (!_this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      t1 = _this.protocolVersion;
      if (t1 === "1.0" && _this._persistentConnection && contentLength === -1)
        throw A.wrapException(A.HttpException$("Trying to clear ContentLength on HTTP 1.0 headers with 'Connection: Keep-Alive' set", null));
      if (_this._contentLength === contentLength)
        return;
      _this._contentLength = contentLength;
      if (contentLength >= 0) {
        if (_this._chunkedTransferEncoding)
          _this.set$chunkedTransferEncoding(false);
        _this.__http$_headers.$indexSet(0, _s14_, A._setArrayType([B.JSInt_methods.toString$0(contentLength)], type$.JSArray_String));
      } else {
        _this.__http$_headers.remove$1(0, _s14_);
        if (t1 === "1.1")
          _this.set$chunkedTransferEncoding(true);
      }
    },
    set$chunkedTransferEncoding(chunkedTransferEncoding) {
      var values, _this = this,
        _s17_ = "transfer-encoding",
        _s7_ = "chunked";
      if (!_this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      if (chunkedTransferEncoding && _this.protocolVersion === "1.0")
        throw A.wrapException(A.HttpException$("Trying to set 'Transfer-Encoding: Chunked' on HTTP 1.0 headers", null));
      if (chunkedTransferEncoding === _this._chunkedTransferEncoding)
        return;
      if (chunkedTransferEncoding) {
        values = _this.__http$_headers.$index(0, _s17_);
        if (values == null || !J.contains$1$asx(values, _s7_))
          _this._addValue$2(_s17_, _s7_);
        _this.set$contentLength(-1);
      } else
        _this.remove$2(0, _s17_, _s7_);
      _this._chunkedTransferEncoding = chunkedTransferEncoding;
    },
    set$date(date) {
      if (!this._mutable)
        A.throwExpression(A.HttpException$("HTTP headers are not mutable", null));
      this.__http$_headers.$indexSet(0, "date", A._setArrayType([A.HttpDate_format(date.toUtc$0())], type$.JSArray_String));
    },
    __http$_add$2($name, value) {
      var lowerCaseValue, _this = this, _null = null,
        _s33_ = "Unexpected type for header named ",
        _s28_ = "HTTP headers are not mutable",
        _s17_ = "transfer-encoding",
        _s17_0 = "if-modified-since";
      switch ($name.length) {
        case 4:
          if ("date" === $name) {
            if (value instanceof A.DateTime)
              _this.set$date(value);
            else if (typeof value == "string")
              _this.__http$_headers.$indexSet(0, "date", A._setArrayType([value], type$.JSArray_String));
            else
              A.throwExpression(A.HttpException$(_s33_ + $name, _null));
            return;
          }
          if ("host" === $name) {
            _this._addHost$2($name, value);
            return;
          }
          break;
        case 7:
          if ("expires" === $name) {
            if (value instanceof A.DateTime) {
              if (!_this._mutable)
                A.throwExpression(A.HttpException$(_s28_, _null));
              _this.__http$_headers.$indexSet(0, "expires", A._setArrayType([A.HttpDate_format(value.toUtc$0())], type$.JSArray_String));
            } else if (typeof value == "string")
              _this.__http$_headers.$indexSet(0, "expires", A._setArrayType([value], type$.JSArray_String));
            else
              A.throwExpression(A.HttpException$(_s33_ + $name, _null));
            return;
          }
          break;
        case 10:
          if ("connection" === $name) {
            A._asString(value);
            lowerCaseValue = value.toLowerCase();
            if (lowerCaseValue === "close")
              _this._persistentConnection = false;
            else if (lowerCaseValue === "keep-alive")
              _this._persistentConnection = true;
            _this._addValue$2($name, value);
            return;
          }
          break;
        case 12:
          if ("content-type" === $name) {
            _this.__http$_headers.$indexSet(0, "content-type", A._setArrayType([A._asString(value)], type$.JSArray_String));
            return;
          }
          break;
        case 14:
          if ("content-length" === $name) {
            if (A._isInt(value))
              _this.set$contentLength(value);
            else if (typeof value == "string")
              _this.set$contentLength(A.int_parse(value, _null));
            else
              A.throwExpression(A.HttpException$(_s33_ + $name, _null));
            return;
          }
          break;
        case 17:
          if (_s17_ === $name) {
            if (A.boolConversionCheck(J.$eq$(value, "chunked")))
              _this.set$chunkedTransferEncoding(true);
            else
              _this._addValue$2(_s17_, value);
            return;
          }
          if (_s17_0 === $name) {
            if (value instanceof A.DateTime) {
              if (!_this._mutable)
                A.throwExpression(A.HttpException$(_s28_, _null));
              _this.__http$_headers.$indexSet(0, _s17_0, A._setArrayType([A.HttpDate_format(value.toUtc$0())], type$.JSArray_String));
            } else if (typeof value == "string")
              _this.__http$_headers.$indexSet(0, _s17_0, A._setArrayType([value], type$.JSArray_String));
            else
              A.throwExpression(A.HttpException$(_s33_ + $name, _null));
            return;
          }
          break;
      }
      _this._addValue$2($name, value);
    },
    _addHost$2($name, value) {
      var pos, t1, exception, _this = this;
      if (typeof value == "string") {
        pos = B.JSString_methods.lastIndexOf$1(value, ":");
        if (!J.$eq$(pos, -1))
          t1 = B.JSString_methods.startsWith$1(value, "[") && B.JSString_methods.endsWith$1(value, "]");
        else
          t1 = true;
        if (t1) {
          _this.__http$_host = value;
          _this.__http$_port = 80;
        } else {
          t1 = pos;
          if (typeof t1 !== "number")
            return t1.$gt();
          if (t1 > 0)
            _this.__http$_host = B.JSString_methods.substring$2(value, 0, pos);
          else
            _this.__http$_host = null;
          t1 = pos;
          if (typeof t1 !== "number")
            return t1.$add();
          if (t1 + 1 === value.length)
            _this.__http$_port = 80;
          else
            try {
              t1 = pos;
              if (typeof t1 !== "number")
                return t1.$add();
              _this.__http$_port = A.int_parse(B.JSString_methods.substring$1(value, t1 + 1), null);
            } catch (exception) {
              if (type$.FormatException._is(A.unwrapException(exception)))
                _this.__http$_port = null;
              else
                throw exception;
            }
        }
        _this.__http$_headers.$indexSet(0, "host", A._setArrayType([value], type$.JSArray_String));
      } else
        throw A.wrapException(A.HttpException$("Unexpected type for header named " + $name, null));
    },
    _addValue$2($name, value) {
      var t1 = this.__http$_headers,
        values = t1.$index(0, $name);
      if (values == null) {
        values = A._setArrayType([], type$.JSArray_String);
        t1.$indexSet(0, $name, values);
      }
      J.add$1$ax(values, this._valueToString$1(value));
    },
    _valueToString$1(value) {
      if (value instanceof A.DateTime)
        return A.HttpDate_format(value);
      else if (typeof value == "string")
        return value;
      else
        return A._asString(A._HttpHeaders__validateValue(J.toString$0$(value)));
    },
    _foldHeader$1($name) {
      if ($name === "set-cookie")
        return false;
      return true;
    },
    _build$1(builder) {
      this.__http$_headers.forEach$1(0, new A._HttpHeaders__build_closure(this, null, builder));
    },
    toString$0(_) {
      var t1,
        sb = new A.StringBuffer("");
      this.__http$_headers.forEach$1(0, new A._HttpHeaders_toString_closure(this, sb));
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _parseCookies$0() {
      var t1,
        cookies = A._setArrayType([], type$.JSArray_Cookie),
        parseCookieString = new A._HttpHeaders__parseCookies_parseCookieString(cookies),
        values = this.__http$_headers.$index(0, "cookie");
      if (values != null)
        for (t1 = J.get$iterator$ax(values); t1.moveNext$0();)
          parseCookieString.call$1(t1.get$current());
      return cookies;
    },
    _originalHeaderName$1($name) {
      var t1 = this._originalHeaderNames;
      t1 = t1 == null ? null : t1.$index(0, $name);
      return t1 == null ? $name : t1;
    },
    set$_originalHeaderNames(_originalHeaderNames) {
      this._originalHeaderNames = type$.nullable_Map_String_String._as(_originalHeaderNames);
    },
    $isHttpHeaders: 1
  };
  A._HttpHeaders_closure.prototype = {
    call$2($name, value) {
      A._asString($name);
      type$.List_String._as(value);
      this.$this.__http$_headers.$indexSet(0, $name, value);
      return value;
    },
    $signature: 6
  };
  A._HttpHeaders_forEach_closure.prototype = {
    call$2($name, values) {
      A._asString($name);
      type$.List_String._as(values);
      this.action.call$2(this.$this._originalHeaderName$1($name), values);
    },
    $signature: 6
  };
  A._HttpHeaders__build_closure.prototype = {
    call$2($name, values) {
      var t1, originalName, fold, nameData, t2, i;
      A._asString($name);
      type$.List_String._as(values);
      if (this.ignoreHeader === $name)
        return;
      t1 = this.$this;
      originalName = t1._originalHeaderName$1($name);
      fold = t1._foldHeader$1($name);
      nameData = new A.CodeUnits(originalName);
      t1 = this.builder;
      t1.add$1(0, nameData);
      t1.addByte$1(58);
      t1.addByte$1(32);
      for (t2 = J.getInterceptor$asx(values), i = 0; i < t2.get$length(values); ++i) {
        if (i > 0)
          if (fold) {
            t1.addByte$1(44);
            t1.addByte$1(32);
          } else {
            t1.addByte$1(13);
            t1.addByte$1(10);
            t1.add$1(0, nameData);
            t1.addByte$1(58);
            t1.addByte$1(32);
          }
        t1.add$1(0, new A.CodeUnits(t2.$index(values, i)));
      }
      t1.addByte$1(13);
      t1.addByte$1(10);
    },
    $signature: 6
  };
  A._HttpHeaders_toString_closure.prototype = {
    call$2($name, values) {
      var t1, originalName, t2, t3, fold, i;
      A._asString($name);
      type$.List_String._as(values);
      t1 = this.$this;
      originalName = t1._originalHeaderName$1($name);
      t2 = this.sb;
      t3 = t2._contents += originalName;
      t2._contents = t3 + ": ";
      fold = t1._foldHeader$1($name);
      for (t1 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(values); ++i) {
        if (i > 0) {
          t3 = t2._contents;
          if (fold)
            t2._contents = t3 + ", ";
          else {
            t3 += "\n";
            t2._contents = t3;
            t3 += originalName;
            t2._contents = t3;
            t2._contents = t3 + ": ";
          }
        }
        t2._contents += A.S(t1.$index(values, i));
      }
      t2._contents += "\n";
    },
    $signature: 6
  };
  A._HttpHeaders__parseCookies_parseCookieString.prototype = {
    call$1(s) {
      var $name, value, done, skipWS, parseName, parseValue, expect, t1, exception, _box_0 = {};
      _box_0.index = 0;
      done = new A._HttpHeaders__parseCookies_parseCookieString_done(_box_0, s);
      skipWS = new A._HttpHeaders__parseCookies_parseCookieString_skipWS(_box_0, done, s);
      parseName = new A._HttpHeaders__parseCookies_parseCookieString_parseName(_box_0, done, s);
      parseValue = new A._HttpHeaders__parseCookies_parseCookieString_parseValue(_box_0, done, s);
      expect = new A._HttpHeaders__parseCookies_parseCookieString_expect(_box_0, done, s);
      for (t1 = this.cookies; !A.boolConversionCheck(done.call$0());) {
        skipWS.call$0();
        if (A.boolConversionCheck(done.call$0()))
          return;
        $name = parseName.call$0();
        skipWS.call$0();
        if (!A.boolConversionCheck(expect.call$1("="))) {
          _box_0.index = B.JSString_methods.indexOf$2(s, ";", _box_0.index);
          continue;
        }
        skipWS.call$0();
        value = parseValue.call$0();
        try {
          B.JSArray_methods.add$1(t1, new A._Cookie(A._Cookie__validateName($name), A._Cookie__validateValue(value)));
        } catch (exception) {
        }
        skipWS.call$0();
        if (A.boolConversionCheck(done.call$0()))
          return;
        if (!A.boolConversionCheck(expect.call$1(";"))) {
          _box_0.index = B.JSString_methods.indexOf$2(s, ";", _box_0.index);
          continue;
        }
      }
    },
    $signature: 48
  };
  A._HttpHeaders__parseCookies_parseCookieString_done.prototype = {
    call$0() {
      var t1 = this._box_0.index;
      return t1 === -1 || t1 === this.s.length;
    },
    $signature: 60
  };
  A._HttpHeaders__parseCookies_parseCookieString_skipWS.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, t6;
      for (t1 = this.done, t2 = this._box_0, t3 = this.s, t4 = t3.length; !A.boolConversionCheck(t1.call$0());) {
        t5 = t2.index;
        if (!(t5 >= 0 && t5 < t4))
          return A.ioore(t3, t5);
        t6 = t3[t5];
        if (t6 !== " " && t6 !== "\t")
          return;
        t2.index = t5 + 1;
      }
    },
    $signature: 0
  };
  A._HttpHeaders__parseCookies_parseCookieString_parseName.prototype = {
    call$0() {
      var t2, t3, t4, t5, t6,
        t1 = this._box_0,
        start = t1.index;
      for (t2 = this.done, t3 = this.s, t4 = t3.length; !A.boolConversionCheck(t2.call$0());) {
        t5 = t1.index;
        if (!(t5 >= 0 && t5 < t4))
          return A.ioore(t3, t5);
        t6 = t3[t5];
        if (t6 === " " || t6 === "\t" || t6 === "=")
          break;
        t1.index = t5 + 1;
      }
      return B.JSString_methods.substring$2(t3, start, t1.index);
    },
    $signature: 47
  };
  A._HttpHeaders__parseCookies_parseCookieString_parseValue.prototype = {
    call$0() {
      var t2, t3, t4, t5, t6,
        t1 = this._box_0,
        start = t1.index;
      for (t2 = this.done, t3 = this.s, t4 = t3.length; !A.boolConversionCheck(t2.call$0());) {
        t5 = t1.index;
        if (!(t5 >= 0 && t5 < t4))
          return A.ioore(t3, t5);
        t6 = t3[t5];
        if (t6 === " " || t6 === "\t" || t6 === ";")
          break;
        t1.index = t5 + 1;
      }
      return B.JSString_methods.substring$2(t3, start, t1.index);
    },
    $signature: 47
  };
  A._HttpHeaders__parseCookies_parseCookieString_expect.prototype = {
    call$1(expected) {
      var t1, t2, t3;
      if (A.boolConversionCheck(this.done.call$0()))
        return false;
      t1 = this.s;
      t2 = this._box_0;
      t3 = t2.index;
      if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
      if (t1[t3] !== expected)
        return false;
      t2.index = t3 + 1;
      return true;
    },
    $signature: 1
  };
  A._HeaderValue.prototype = {
    _HeaderValue$2(_value, parameters) {
      var t1 = parameters.get$isNotEmpty(parameters);
      if (t1)
        this.set$_parameters(A.HashMap_HashMap$from(parameters, type$.String, type$.nullable_String));
    },
    _ensureParameters$0() {
      var t1 = this._parameters;
      if (t1 == null) {
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_String);
        this.set$_parameters(t1);
      }
      return t1;
    },
    toString$0(_) {
      var parameters, t1,
        sb = new A.StringBuffer("");
      sb._contents = "" + this.__http$_value;
      parameters = this._parameters;
      if (parameters != null && parameters.get$isNotEmpty(parameters))
        parameters.forEach$1(0, new A._HeaderValue_toString_closure(sb));
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$_parameters(_parameters) {
      this._parameters = type$.nullable_Map_of_String_and_nullable_String._as(_parameters);
    }
  };
  A._HeaderValue_toString_closure.prototype = {
    call$2($name, value) {
      var t1, t2, t3, start, i, codeUnit;
      A._asString($name);
      A._asStringQ(value);
      t1 = this.sb;
      t2 = t1._contents += "; ";
      t2 += $name;
      t1._contents = t2;
      if (value != null) {
        t1._contents = t2 + "=";
        t2 = A._HeaderValue__isToken(value);
        t3 = t1._contents;
        if (t2)
          t1._contents = t3 + value;
        else {
          t1._contents = t3 + '"';
          for (t2 = value.length, start = 0, i = 0; i < t2; ++i) {
            codeUnit = B.JSString_methods._codeUnitAt$1(value, i);
            if (codeUnit === 92 || codeUnit === 34) {
              t3 = t1._contents += B.JSString_methods.substring$2(value, start, i);
              t1._contents = t3 + "\\";
              start = i;
            }
          }
          t2 = t1._contents += B.JSString_methods.substring$1(value, start);
          t1._contents = t2 + '"';
        }
      }
    },
    $signature: 43
  };
  A._ContentType.prototype = {
    _ContentType$4(primaryType, subType, charset, parameters) {
      var _this = this,
        t1 = new A._ContentType_emptyIfNull();
      _this.set$_primaryType(t1.call$1(_this._primaryType));
      _this.set$_subType(t1.call$1(_this._subType));
      _this.__http$_value = _this._primaryType + "/" + _this._subType;
      parameters.forEach$1(0, new A._ContentType_closure(_this._ensureParameters$0()));
      _this._ensureParameters$0().$indexSet(0, "charset", charset.toLowerCase());
    },
    set$_primaryType(_primaryType) {
      this._primaryType = A._asString(_primaryType);
    },
    set$_subType(_subType) {
      this._subType = A._asString(_subType);
    },
    $isContentType: 1
  };
  A._ContentType_emptyIfNull.prototype = {
    call$1(string) {
      return string;
    },
    $signature: 37
  };
  A._ContentType_closure.prototype = {
    call$2(key, value) {
      var lowerCaseKey;
      A._asString(key);
      A._asStringQ(value);
      lowerCaseKey = key.toLowerCase();
      if (lowerCaseKey === "charset")
        value = value == null ? null : value.toLowerCase();
      this.parameterMap.$indexSet(0, lowerCaseKey, value);
    },
    $signature: 43
  };
  A._Cookie.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = "" + _this.__http$_name + "=" + _this.__http$_value,
        t2 = _this._path;
      if (t2 != null)
        t1 = t1 + "; Path=" + t2;
      if (_this.httpOnly)
        t1 += "; HttpOnly";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isCookie: 1
  };
  A._ServiceObject.prototype = {
    get$_serviceId() {
      var t1 = this._ServiceObject___serviceId;
      if (t1 === 0) {
        t1 = $._nextServiceId;
        $._nextServiceId = t1 + 1;
        this._ServiceObject___serviceId = t1;
      }
      return t1;
    }
  };
  A._CopyingBytesBuilder.prototype = {
    add$1(_, bytes) {
      var t1, bytesLength, required, i, t2, _this = this;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      bytesLength = t1.get$length(bytes);
      if (bytesLength === 0)
        return;
      required = _this.__http$_length + bytesLength;
      if (_this.__http$_buffer.length < required)
        _this.__http$_grow$1(required);
      for (i = 0; i < bytesLength; ++i) {
        t2 = _this.__http$_buffer;
        (t2 && B.NativeUint8List_methods).$indexSet(t2, _this.__http$_length + i, t1.$index(bytes, i));
      }
      _this.__http$_length = required;
    },
    addByte$1(byte) {
      var _this = this,
        t1 = _this.__http$_buffer.length,
        t2 = _this.__http$_length;
      if (t1 === t2)
        _this.__http$_grow$1(t2);
      t1 = _this.__http$_buffer;
      t2 = _this.__http$_length;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = byte;
      _this.__http$_length = t2 + 1;
    },
    __http$_grow$1(required) {
      var newBuffer, t1,
        newSize = required * 2;
      newSize = newSize < 1024 ? 1024 : A._CopyingBytesBuilder__pow2roundup(newSize);
      newBuffer = new Uint8Array(newSize);
      t1 = this.__http$_buffer;
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this.__http$_buffer = newBuffer;
    },
    takeBytes$0() {
      var t2, buffer, _this = this,
        t1 = _this.__http$_length;
      if (t1 === 0)
        return $.$get$_CopyingBytesBuilder__emptyList();
      t2 = _this.__http$_buffer;
      buffer = A.NativeUint8List_NativeUint8List$view(t2.buffer, t2.byteOffset, t1);
      _this.__http$_length = 0;
      _this.set$__http$_buffer($.$get$_CopyingBytesBuilder__emptyList());
      return buffer;
    },
    get$length(_) {
      return this.__http$_length;
    },
    set$__http$_buffer(_buffer) {
      this.__http$_buffer = type$.Uint8List._as(_buffer);
    },
    $isBytesBuilder: 1
  };
  A._HttpIncoming.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1, t2;
      type$.nullable_void_Function_Uint8List._as(onData);
      type$.nullable_void_Function._as(onDone);
      this.hasSubscriber = true;
      t1 = this.__http$_stream;
      t2 = new A._HttpIncoming_listen_closure(this);
      type$.nullable_bool_Function_dynamic._as(null);
      if (!type$.void_Function_Object_StackTrace._is(t2) && !type$.void_Function_Object._is(t2))
        A.throwExpression(A.ArgumentError$value(t2, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments."));
      return new A._HandleErrorStream(t2, null, t1, t1.$ti._eval$1("_HandleErrorStream<Stream.T>")).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._HttpIncoming_listen_closure.prototype = {
    call$1(error) {
      throw A.wrapException(A.HttpException$(A._asString(error.get$message()), this.$this.uri));
    },
    $signature: 61
  };
  A._HttpInboundMessage.prototype = {
    set$_cookies(_cookies) {
      this._cookies = type$.nullable_List_Cookie._as(_cookies);
    }
  };
  A._HttpRequest.prototype = {
    _HttpRequest$4(response, _incoming, _httpServer, _httpConnection) {
      var t2, t3, t4, t5, t6, t7, _this = this,
        t1 = _this._incoming.headers;
      if (t1.protocolVersion === "1.1") {
        t2 = _this.response.headers;
        t2.set$chunkedTransferEncoding(true);
        t2.set$persistentConnection(t1._persistentConnection);
      }
      t2 = _this._httpServer;
      if (t2._sessionManagerInstance != null) {
        t3 = _this._cookies;
        if (t3 == null) {
          t1 = t1._parseCookies$0();
          _this.set$_cookies(t1);
        } else
          t1 = t3;
        t3 = A._arrayInstanceType(t1);
        t1 = new A.WhereIterable(t1, t3._eval$1("bool(1)")._as(new A._HttpRequest_closure()), t3._eval$1("WhereIterable<1>"));
        t4 = t3._eval$1("String(1)")._as(new A._HttpRequest_closure0());
        for (t3 = t3._eval$1("@<1>")._bind$1(t3._eval$1("String")), t4 = new A.MappedIterator(t1.get$iterator(t1), t4, t3._eval$1("MappedIterator<1,2>")), t3 = t3._rest[1], t1 = type$.String, t5 = type$._HttpSession; t4.moveNext$0();) {
          t6 = t3._as(t4.__internal$_current);
          t7 = t2._sessionManagerInstance;
          _this._session = (t7 == null ? t2._sessionManagerInstance = new A._HttpSessionManager(A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)) : t7)._sessions.$index(0, t6);
        }
      }
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._incoming.listen$4$cancelOnError$onDone$onError(type$.nullable_void_Function_Uint8List._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    get$requestedUri() {
      var t1, t2, t3, scheme, host, _this = this,
        requestedUri = _this._requestedUri;
      if (requestedUri != null)
        return requestedUri;
      t1 = _this._incoming;
      t2 = t1.headers.__http$_headers;
      t3 = t2.$index(0, A._HttpHeaders__validateField("x-forwarded-proto"));
      if (t3 != null)
        scheme = J.get$first$ax(t3);
      else
        scheme = "http";
      t3 = t2.$index(0, A._HttpHeaders__validateField("x-forwarded-host"));
      if (t3 != null)
        host = J.get$first$ax(t3);
      else {
        t2 = t2.$index(0, A._HttpHeaders__validateField("host"));
        if (t2 != null)
          host = J.get$first$ax(t2);
        else {
          t2 = _this._httpServer;
          host = A.S(t2.get$address().get$host()) + ":" + A.S(t2.get$port());
        }
      }
      return _this._requestedUri = A.Uri_parse(scheme + "://" + host + t1.uri.toString$0(0));
    },
    $isHttpRequest: 1
  };
  A._HttpRequest_closure.prototype = {
    call$1(cookie) {
      return type$.Cookie._as(cookie).__http$_name.toUpperCase() === "DARTSESSID";
    },
    $signature: 75
  };
  A._HttpRequest_closure0.prototype = {
    call$1(cookie) {
      return type$.Cookie._as(cookie).__http$_value;
    },
    $signature: 128
  };
  A._StreamSinkImpl.prototype = {
    add$1(_, data) {
      A._instanceType(this)._eval$1("_StreamSinkImpl.T")._as(data);
      if (this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      this.get$__http$_controller().add$1(0, data);
    },
    addError$2(error, stackTrace) {
      if (this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      this.get$__http$_controller().addError$2(error, stackTrace);
    },
    addStream$1(stream) {
      var t1, controller, future, _this = this;
      A._instanceType(_this)._eval$1("Stream<_StreamSinkImpl.T>")._as(stream);
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is already bound to a stream"));
      _this._isBound = true;
      if (_this._hasError)
        return _this._doneCompleter.future;
      t1 = new A._StreamSinkImpl_addStream_targetAddStream(_this, stream);
      controller = _this._controllerInstance;
      if (controller == null)
        return t1.call$0();
      future = _this._controllerCompleter.future;
      controller.close$0();
      return future.then$1$1(new A._StreamSinkImpl_addStream_closure(t1), type$.dynamic);
    },
    close$0() {
      var controller, _this = this;
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (!_this._isClosed) {
        _this._isClosed = true;
        controller = _this._controllerInstance;
        if (controller != null)
          controller.close$0();
        else
          _this._closeTarget$0();
      }
      return _this._doneCompleter.future;
    },
    _closeTarget$0() {
      this._target.close$0().then$1$2$onError(this.get$_completeDoneValue(), this.get$_completeDoneError(), type$.void);
    },
    _completeDoneValue$1(value) {
      var t1 = this._doneCompleter;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(value);
    },
    _completeDoneError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._doneCompleter;
      if ((t1.future._state & 30) === 0) {
        this._hasError = true;
        t1.completeError$2(error, stackTrace);
      }
    },
    get$__http$_controller() {
      var t1, _this = this, _null = null;
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (_this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      if (_this._controllerInstance == null) {
        _this.set$_controllerInstance(A.StreamController_StreamController(_null, _null, _null, _null, true, A._instanceType(_this)._eval$1("_StreamSinkImpl.T")));
        _this._controllerCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
        t1 = _this.get$__http$_controller();
        _this._target.addStream$1(new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new A._StreamSinkImpl__controller_closure(_this), new A._StreamSinkImpl__controller_closure0(_this), type$.Null);
      }
      t1 = _this._controllerInstance;
      t1.toString;
      return t1;
    },
    set$_controllerInstance(_controllerInstance) {
      this._controllerInstance = A._instanceType(this)._eval$1("StreamController<_StreamSinkImpl.T>?")._as(_controllerInstance);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isSink: 1
  };
  A._StreamSinkImpl_addStream_targetAddStream.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1._target.addStream$1(this.stream).whenComplete$1(new A._StreamSinkImpl_addStream_targetAddStream_closure(t1));
    },
    $signature: 15
  };
  A._StreamSinkImpl_addStream_targetAddStream_closure.prototype = {
    call$0() {
      this.$this._isBound = false;
    },
    $signature: 3
  };
  A._StreamSinkImpl_addStream_closure.prototype = {
    call$1(_) {
      return this.targetAddStream.call$0();
    },
    $signature: 29
  };
  A._StreamSinkImpl__controller_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      if (t1._isBound) {
        t1._controllerCompleter.complete$1(t1);
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._closeTarget$0();
    },
    $signature: 2
  };
  A._StreamSinkImpl__controller_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this;
      if (t1._isBound) {
        t1._controllerCompleter.completeError$2(error, stackTrace);
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._completeDoneError$2(error, stackTrace);
    },
    $signature: 21
  };
  A._IOSinkImpl0.prototype = {$isStringSink: 1};
  A._HttpOutboundMessage.prototype = {
    add$1(_, data) {
      type$.List_int._as(data);
      if (J.get$isEmpty$asx(data))
        return;
      this.super$_StreamSinkImpl$add(0, data);
    },
    addStream$1(s) {
      var t1 = this.super$_StreamSinkImpl$addStream(type$.Stream_List_int._as(s));
      return t1;
    }
  };
  A._HttpResponse.prototype = {
    set$statusCode(statusCode) {
      if (this._outgoing.headersWritten)
        throw A.wrapException(A.StateError$("Header already sent"));
      this._statusCode = statusCode;
    },
    set$deadline(d) {
      var t1 = this._deadlineTimer;
      if (t1 != null)
        t1.cancel$0();
      return;
    },
    _writeHeader$0() {
      var buffer, t2, headerBytes, _this = this,
        t1 = A._CopyingBytesBuilder__pow2roundup(8192);
      t1 = new Uint8Array(t1);
      buffer = new A._CopyingBytesBuilder(t1);
      t1 = _this.headers;
      if (t1.protocolVersion === "1.1")
        buffer.add$1(0, B.List_2Vk0);
      else
        buffer.add$1(0, B.List_2Vk1);
      buffer.addByte$1(32);
      buffer.add$1(0, new A.CodeUnits(B.JSInt_methods.toString$0(_this._statusCode)));
      buffer.addByte$1(32);
      buffer.add$1(0, new A.CodeUnits(_this._findReasonPhrase$1(_this._statusCode)));
      buffer.addByte$1(13);
      buffer.addByte$1(10);
      _this._httpRequest.toString;
      t2 = _this._cookies;
      if (t2 != null)
        B.JSArray_methods.forEach$1(t2, new A._HttpResponse__writeHeader_closure(_this));
      t1._mutable = false;
      t1._build$1(buffer);
      buffer.addByte$1(13);
      buffer.addByte$1(10);
      headerBytes = buffer.takeBytes$0();
      t1 = _this._outgoing;
      t2 = headerBytes.length;
      t1.__http$_buffer = type$.List_int._as(headerBytes);
      t1.__http$_length = t2;
    },
    _findReasonPhrase$1(statusCode) {
      switch (statusCode) {
        case 100:
          return "Continue";
        case 101:
          return "Switching Protocols";
        case 200:
          return "OK";
        case 201:
          return "Created";
        case 202:
          return "Accepted";
        case 203:
          return "Non-Authoritative Information";
        case 204:
          return "No Content";
        case 205:
          return "Reset Content";
        case 206:
          return "Partial Content";
        case 300:
          return "Multiple Choices";
        case 301:
          return "Moved Permanently";
        case 302:
          return "Found";
        case 303:
          return "See Other";
        case 304:
          return "Not Modified";
        case 305:
          return "Use Proxy";
        case 307:
          return "Temporary Redirect";
        case 400:
          return "Bad Request";
        case 401:
          return "Unauthorized";
        case 402:
          return "Payment Required";
        case 403:
          return "Forbidden";
        case 404:
          return "Not Found";
        case 405:
          return "Method Not Allowed";
        case 406:
          return "Not Acceptable";
        case 407:
          return "Proxy Authentication Required";
        case 408:
          return "Request Time-out";
        case 409:
          return "Conflict";
        case 410:
          return "Gone";
        case 411:
          return "Length Required";
        case 412:
          return "Precondition Failed";
        case 413:
          return "Request Entity Too Large";
        case 414:
          return "Request-URI Too Long";
        case 415:
          return "Unsupported Media Type";
        case 416:
          return "Requested range not satisfiable";
        case 417:
          return "Expectation Failed";
        case 500:
          return "Internal Server Error";
        case 501:
          return "Not Implemented";
        case 502:
          return "Bad Gateway";
        case 503:
          return "Service Unavailable";
        case 504:
          return "Gateway Time-out";
        case 505:
          return "Http Version not supported";
        default:
          return "Status " + statusCode;
      }
    },
    $isHttpResponse: 1
  };
  A._HttpResponse__writeHeader_closure.prototype = {
    call$1(cookie) {
      this.$this.headers.add$2(0, "set-cookie", type$.Cookie._as(cookie));
    },
    $signature: 83
  };
  A._HttpOutgoing.prototype = {
    writeHeaders$2$drainRequest$setOutgoing(drainRequest, setOutgoing) {
      var response, t1, drainFuture, contentLength, _this = this;
      if (_this.headersWritten)
        return null;
      _this.headersWritten = true;
      response = _this.outbound;
      t1 = response._httpRequest;
      t1.toString;
      drainFuture = drainRequest && !t1._incoming.hasSubscriber ? t1.drain$1$0(type$.void).catchError$1(new A._HttpOutgoing_writeHeaders_closure()) : null;
      if (!_this.ignoreBody) {
        if (setOutgoing) {
          t1 = response.headers;
          contentLength = t1._contentLength;
          if (t1._chunkedTransferEncoding)
            _this.chunked = true;
          else if (contentLength >= 0)
            _this.contentLength = contentLength;
        }
        if (drainFuture != null)
          return drainFuture.then$1$1(new A._HttpOutgoing_writeHeaders_closure0(response), type$.void);
      }
      response._writeHeader$0();
      return null;
    },
    writeHeaders$0() {
      return this.writeHeaders$2$drainRequest$setOutgoing(true, true);
    },
    addStream$1(stream) {
      var t1, future, controller, sub, _this = this, _null = null;
      type$.Stream_List_int._as(stream);
      if (_this._socketError) {
        stream.listen$1(_null).cancel$0();
        return A.Future_Future$value(_this.outbound, type$.dynamic);
      }
      if (_this.ignoreBody) {
        t1 = type$.dynamic;
        stream.drain$1$0(t1).catchError$1(new A._HttpOutgoing_addStream_closure());
        future = _this.writeHeaders$0();
        if (future != null)
          return future.then$1$1(new A._HttpOutgoing_addStream_closure0(_this), t1);
        return _this.close$0();
      }
      controller = A.StreamController_StreamController(_null, _null, _null, _null, true, type$.List_int);
      sub = stream.listen$4$cancelOnError$onDone$onError(new A._HttpOutgoing_addStream_onData(_this, controller), true, controller.get$close(), controller.get$addError());
      controller.set$onPause(sub.get$pause());
      controller.set$onResume(sub.get$resume());
      if (!_this.headersWritten) {
        future = _this.writeHeaders$0();
        if (future != null)
          sub.pause$1(future);
      }
      return _this.socket.addStream$1(new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new A._HttpOutgoing_addStream_closure1(_this), new A._HttpOutgoing_addStream_closure2(_this), type$.dynamic);
    },
    close$0() {
      var t1, t2, t3, error, contentLength, future, _this = this,
        closeFuture = _this._closeFuture;
      if (closeFuture != null)
        return closeFuture;
      t1 = _this.outbound;
      t1.toString;
      if (_this._socketError)
        return A.Future_Future$value(t1, type$.dynamic);
      if (t1._httpRequest._httpConnection.__http$_state === 2)
        return A.Future_Future$value(t1, type$.dynamic);
      if (!_this.headersWritten && !_this.ignoreBody) {
        t2 = t1.headers;
        t3 = t2._contentLength;
        if (t3 === -1) {
          t2.set$chunkedTransferEncoding(false);
          t2.set$contentLength(0);
        } else if (t3 > 0) {
          error = new A.HttpException("No content even though contentLength was specified to be greater than 0: " + t3 + ".", t1.__http$_uri);
          _this._doneCompleter.completeError$1(error);
          return _this._closeFuture = A.Future_Future$error(error, type$.dynamic);
        }
      }
      contentLength = _this.contentLength;
      if (contentLength != null) {
        t2 = _this._bytesWritten;
        if (t2 < contentLength) {
          error = new A.HttpException("Content size below specified contentLength.  " + t2 + " bytes written but expected " + A.S(contentLength) + ".", t1.__http$_uri);
          _this._doneCompleter.completeError$1(error);
          return _this._closeFuture = A.Future_Future$error(error, type$.dynamic);
        }
      }
      t1 = new A._HttpOutgoing_close_finalize(_this, t1);
      future = _this.writeHeaders$0();
      if (future != null)
        return _this._closeFuture = future.whenComplete$1(t1);
      t1 = t1.call$0();
      _this.set$_closeFuture(t1);
      return t1;
    },
    _addGZipChunk$2(chunk, add) {
      var t1, t2, t3, t4, currentLength, newLength, _this = this;
      type$.List_int._as(chunk);
      type$.void_Function_List_int._as(add);
      if (!_this.outbound._bufferOutput) {
        add.call$1(chunk);
        return;
      }
      t1 = _this._gzipBuffer;
      t1.toString;
      t2 = J.getInterceptor$asx(chunk);
      t3 = t2.get$length(chunk);
      t4 = _this._gzipBufferLength;
      if (t3 > 8192 - t4) {
        add.call$1(A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset, t4));
        _this._gzipBuffer = new Uint8Array(8192);
        _this._gzipBufferLength = 0;
      }
      if (t2.get$length(chunk) > 8192)
        add.call$1(chunk);
      else {
        currentLength = _this._gzipBufferLength;
        newLength = currentLength + t2.get$length(chunk);
        t1 = _this._gzipBuffer;
        t1.toString;
        B.NativeUint8List_methods.setRange$3(t1, currentLength, newLength, chunk);
        _this._gzipBufferLength = newLength;
      }
    },
    _addChunk$2(chunk, add) {
      var t1, t2, t3, t4, t5, _this = this;
      type$.List_int._as(chunk);
      type$.void_Function_List_int._as(add);
      if (!_this.outbound._bufferOutput) {
        t1 = _this.__http$_buffer;
        if (t1 != null) {
          add.call$1(A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset, _this.__http$_length));
          _this.__http$_buffer = null;
          _this.__http$_length = 0;
        }
        add.call$1(chunk);
        return;
      }
      t1 = J.getInterceptor$asx(chunk);
      t2 = t1.get$length(chunk);
      t3 = _this.__http$_buffer;
      t4 = t3.length;
      t5 = _this.__http$_length;
      if (t2 > t4 - t5) {
        add.call$1(A.NativeUint8List_NativeUint8List$view(t3.buffer, t3.byteOffset, t5));
        _this.__http$_buffer = new Uint8Array(8192);
        _this.__http$_length = 0;
      }
      if (t1.get$length(chunk) > 8192)
        add.call$1(chunk);
      else {
        t2 = _this.__http$_buffer;
        t2.toString;
        t3 = _this.__http$_length;
        B.NativeUint8List_methods.setRange$3(t2, t3, t3 + t1.get$length(chunk), chunk);
        _this.__http$_length = _this.__http$_length + t1.get$length(chunk);
      }
    },
    _chunkHeader$1($length) {
      var size, len, size0, t1, footerAndHeader, index, t2;
      if ($length === 0) {
        if (this._pendingChunkedFooter === 2)
          return B.List_E7y;
        return B.List_yTu;
      }
      size = this._pendingChunkedFooter;
      for (len = $length, size0 = size; len > 0;) {
        ++size0;
        len = B.JSInt_methods._shrOtherPositive$1(len, 4);
      }
      t1 = size0 + 2;
      footerAndHeader = new Uint8Array(t1);
      if (size === 2) {
        footerAndHeader[0] = 13;
        footerAndHeader[1] = 10;
      }
      for (index = size0; index > size;) {
        --index;
        t2 = B.List_cGl[$length & 15];
        if (!(index < t1))
          return A.ioore(footerAndHeader, index);
        footerAndHeader[index] = t2;
        $length = B.JSInt_methods._shrOtherPositive$1($length, 4);
      }
      if (!(size0 < t1))
        return A.ioore(footerAndHeader, size0);
      footerAndHeader[size0] = 13;
      t2 = size0 + 1;
      if (!(t2 < t1))
        return A.ioore(footerAndHeader, t2);
      footerAndHeader[t2] = 10;
      return footerAndHeader;
    },
    set$_closeFuture(_closeFuture) {
      this._closeFuture = type$.nullable_Future_dynamic._as(_closeFuture);
    },
    set$_gzipAdd(_gzipAdd) {
      this._gzipAdd = type$.nullable_void_Function_List_int._as(_gzipAdd);
    },
    $isStreamConsumer: 1
  };
  A._HttpOutgoing_writeHeaders_closure.prototype = {
    call$1(_) {
    },
    $signature: 2
  };
  A._HttpOutgoing_writeHeaders_closure0.prototype = {
    call$1(_) {
      return this.response._writeHeader$0();
    },
    $signature: 95
  };
  A._HttpOutgoing_addStream_closure.prototype = {
    call$1(_) {
    },
    $signature: 2
  };
  A._HttpOutgoing_addStream_closure0.prototype = {
    call$1(_) {
      return this.$this.close$0();
    },
    $signature: 114
  };
  A._HttpOutgoing_addStream_onData.prototype = {
    call$1(data) {
      var t1, t2, t3, contentLength, _this = this;
      type$.List_int._as(data);
      t1 = _this.$this;
      if (t1._socketError)
        return;
      t2 = J.getInterceptor$asx(data);
      if (t2.get$isEmpty(data))
        return;
      if (t1.chunked) {
        if (t1._gzip) {
          t2 = _this.controller;
          t3 = type$.void_Function_List_int;
          t1.set$_gzipAdd(t3._as(t2.get$add(t2)));
          t2 = t1._gzipSink;
          t1._addGZipChunk$2(data, t3._as(t2.get$add(t2)));
          t1.set$_gzipAdd(null);
          return;
        }
        t3 = _this.controller;
        t1._addChunk$2(t1._chunkHeader$1(t2.get$length(data)), type$.void_Function_List_int._as(t3.get$add(t3)));
        t1._pendingChunkedFooter = 2;
      } else {
        contentLength = t1.contentLength;
        if (contentLength != null) {
          t2 = t1._bytesWritten = t1._bytesWritten + t2.get$length(data);
          if (t2 > contentLength) {
            _this.controller.addError$1(new A.HttpException("Content size exceeds specified contentLength. " + t2 + " bytes written while expected " + A.S(contentLength) + ". [" + A.String_String$fromCharCodes(data, 0, null) + "]", null));
            return;
          }
        }
      }
      t2 = _this.controller;
      t1._addChunk$2(data, type$.void_Function_List_int._as(t2.get$add(t2)));
    },
    $signature: 31
  };
  A._HttpOutgoing_addStream_closure1.prototype = {
    call$1(_) {
      return this.$this.outbound;
    },
    $signature: 132
  };
  A._HttpOutgoing_addStream_closure2.prototype = {
    call$2(error, stackTrace) {
      var t1 = this.$this;
      if (t1._gzip)
        t1._gzipSink.close$0();
      t1._socketError = true;
      t1._doneCompleter.completeError$2(error, stackTrace);
      t1 = t1.outbound;
      if (type$.HttpResponse._is(t1))
        return t1;
      else
        throw A.wrapException(error);
    },
    $signature: 137
  };
  A._HttpOutgoing_close_finalize.prototype = {
    call$0() {
      var t2, t3, t4,
        t1 = this.$this;
      if (t1.chunked) {
        if (t1._gzip) {
          t2 = t1.socket;
          t1.set$_gzipAdd(t2.get$add(t2));
          t2 = t1._gzipBufferLength;
          if (t2 > 0) {
            t3 = t1._gzipSink;
            t3.toString;
            t4 = t1._gzipBuffer;
            t2 = type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t4.buffer, t4.byteOffset, t2));
            t3.addSlice$4(t2, 0, t2.length, false);
          }
          t1._gzipBuffer = null;
          t1._gzipSink.close$0();
          t1.set$_gzipAdd(null);
        }
        t2 = t1.socket;
        t1._addChunk$2(t1._chunkHeader$1(0), t2.get$add(t2));
      }
      t2 = t1.__http$_length;
      if (t2 > 0) {
        t3 = t1.__http$_buffer;
        t1.socket._socket.add$1(0, type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t3.buffer, t3.byteOffset, t2)));
      }
      t1.__http$_buffer = null;
      t2 = this.outbound;
      return t1.socket.flush$0().then$1$2$onError(new A._HttpOutgoing_close_finalize_closure(t1, t2), new A._HttpOutgoing_close_finalize_closure0(t1, t2), type$.dynamic);
    },
    $signature: 15
  };
  A._HttpOutgoing_close_finalize_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      t1._doneCompleter.complete$1(t1.socket);
      return this.outbound;
    },
    $signature: 138
  };
  A._HttpOutgoing_close_finalize_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1 = this.$this;
      t1._doneCompleter.completeError$2(error, stackTrace);
      t1 = t1.outbound;
      if (type$.HttpResponse._is(t1))
        return this.outbound;
      else
        throw A.wrapException(error);
    },
    $signature: 145
  };
  A._HttpConnection.prototype = {
    _HttpConnection$2(_socket, _httpServer) {
      var t1, _this = this;
      $.$get$_HttpConnection__connections().$indexSet(0, _this.get$_serviceId(), _this);
      t1 = _this._httpParser;
      t1.set$_socketSubscription(type$.Stream_Uint8List._as(_this._socket).listen$3$onDone$onError(t1.get$__http$_onData(), t1.get$__http$_onDone(), t1.__http$_controller.get$addError()));
      _this.__http$_subscription = t1.listen$3$onDone$onError(new A._HttpConnection_closure(_this), new A._HttpConnection_closure0(_this), new A._HttpConnection_closure1(_this));
    },
    destroy$0() {
      var _this = this,
        t1 = _this.__http$_state;
      if (t1 === 2 || t1 === 3)
        return;
      _this.__http$_state = 2;
      _this._socket._socket.destroy$0();
      t1 = _this._list;
      t1.toString;
      t1._unlink$1(A._instanceType(_this)._eval$1("LinkedListEntry.E")._as(_this));
      _this._httpServer._maybePerformCleanup$0();
      $.$get$_HttpConnection__connections().remove$1(0, _this.get$_serviceId());
    }
  };
  A._HttpConnection_closure.prototype = {
    call$1(incoming) {
      var t1, t2, t3, outgoing, t4, t5, response, request;
      type$._HttpIncoming._as(incoming);
      t1 = this.$this;
      t2 = t1._httpServer;
      t2._idleConnections.remove$1(0, t1);
      t3 = t2._activeConnections;
      t3.$ti._precomputed1._as(t1);
      t3._insertBefore$3$updateFirst(t3._collection$_first, t1, false);
      incoming._dataCompleter.future.then$1$1(new A._HttpConnection__closure(t1), type$.Null);
      t1.__http$_subscription.pause$0();
      t1.__http$_state = 0;
      t3 = new A._Future($.Zone__current, type$._Future_Socket);
      outgoing = new A._HttpOutgoing(new A._AsyncCompleter(t3, type$._AsyncCompleter_Socket), t1._socket);
      t4 = incoming.uri;
      t5 = t4.get$scheme() === "https" ? 443 : 80;
      response = outgoing.outbound = new A._HttpResponse(t4, outgoing, A._HttpHeaders$(incoming.headers.protocolVersion, t5, t2.defaultResponseHeaders), B.C_Latin1Codec, null, outgoing, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void));
      if (incoming.statusCode === 400)
        response.set$statusCode(400);
      request = A._HttpRequest$(response, incoming, t2, t1);
      t1._streamFuture = t3.then$1$2$onError(new A._HttpConnection__closure0(t1, response, request, incoming), new A._HttpConnection__closure1(t1), type$.dynamic);
      t1 = request._incoming.method;
      t1.toString;
      outgoing.ignoreBody = t1 === "HEAD";
      response._httpRequest = request;
      if (!t2.closed)
        t2.__http$_controller.add$1(0, request);
      else
        request._httpConnection.destroy$0();
    },
    $signature: 146
  };
  A._HttpConnection__closure.prototype = {
    call$1(closing) {
      if (A._asBool(closing))
        this.$this.destroy$0();
    },
    $signature: 163
  };
  A._HttpConnection__closure0.prototype = {
    call$1(_) {
      var t1, t2, _this = this;
      type$.Socket._as(_);
      t1 = _this.response;
      t1.set$deadline(null);
      t2 = _this.$this;
      if (t2.__http$_state === 3)
        return;
      if (t1.headers._persistentConnection)
        if (_this.request._incoming.headers._persistentConnection)
          if (_this.incoming.fullBodyRead) {
            t1 = t2._httpParser;
            t1 = !(t1._connectionUpgrade && t1.__http$_state === 26) && !t2._httpServer.closed;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        t2.__http$_state = 1;
        t2._idleMark = false;
        t1 = t2._httpServer;
        t1._activeConnections.remove$1(0, t2);
        t1 = t1._idleConnections;
        t1.$ti._precomputed1._as(t2);
        t1._insertBefore$3$updateFirst(t1._collection$_first, t2, false);
        t2.__http$_subscription.resume$0();
      } else
        t2.destroy$0();
    },
    $signature: 28
  };
  A._HttpConnection__closure1.prototype = {
    call$1(_) {
      this.$this.destroy$0();
    },
    $signature: 2
  };
  A._HttpConnection_closure0.prototype = {
    call$0() {
      this.$this.destroy$0();
    },
    $signature: 0
  };
  A._HttpConnection_closure1.prototype = {
    call$1(error) {
      this.$this.destroy$0();
    },
    $signature: 2
  };
  A._HttpServer.prototype = {
    set$idleTimeout(duration) {
      var _this = this,
        idleTimer = _this._idleTimer;
      if (idleTimer != null) {
        idleTimer.cancel$0();
        _this._idleTimer = null;
      }
      if (duration != null)
        _this._idleTimer = A.Timer_Timer$periodic(duration, new A._HttpServer_idleTimeout_closure(_this));
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1, _this = this;
      type$.nullable_void_Function_HttpRequest._as(onData);
      type$.nullable_void_Function._as(onDone);
      t1 = _this.__http$_controller;
      _this._serverSocket.listen$3$onDone$onError(new A._HttpServer_listen_closure(_this), t1.get$close(), new A._HttpServer_listen_closure0(_this));
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    close$1$force(force) {
      var result, t1, t2, _i, _this = this;
      A._asBool(force);
      _this.closed = true;
      result = _this._serverSocket.close$0();
      _this.set$idleTimeout(null);
      if (force)
        for (t1 = _this._activeConnections, t1 = A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E")), t2 = t1.length, _i = 0; _i < t2; ++_i)
          t1[_i].destroy$0();
      for (t1 = _this._idleConnections, t1 = A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E")), t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].destroy$0();
      _this._maybePerformCleanup$0();
      return result;
    },
    close$0() {
      return this.close$1$force(false);
    },
    _maybePerformCleanup$0() {
      var _this = this,
        sessionManager = _this._sessionManagerInstance;
      if (_this.closed && _this._idleConnections._collection$_length === 0 && _this._activeConnections._collection$_length === 0 && sessionManager != null) {
        _this._sessionManagerInstance = null;
        $._HttpServer__servers.remove$1(0, _this.get$_serviceId());
      }
    },
    get$port() {
      if (this.closed)
        throw A.wrapException(A.HttpException$("HttpServer is not bound to a socket", null));
      return this._serverSocket.get$port();
    },
    get$address() {
      if (this.closed)
        throw A.wrapException(A.HttpException$("HttpServer is not bound to a socket", null));
      return this._serverSocket.get$address();
    },
    $isHttpServer: 1
  };
  A._HttpServer_bind_closure.prototype = {
    call$1(socket) {
      return A._HttpServer$_(socket, true);
    },
    $signature: 67
  };
  A._HttpServer_idleTimeout_closure.prototype = {
    call$1(_) {
      var t1, t2, _i, idle;
      type$.Timer._as(_);
      for (t1 = this.$this._idleConnections, t1 = A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E")), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        idle = t1[_i];
        if (idle._idleMark)
          idle.destroy$0();
        else
          idle._idleMark = true;
      }
    },
    $signature: 69
  };
  A._HttpServer_listen_closure.prototype = {
    call$1(socket) {
      var t1, t2;
      type$.Socket._as(socket);
      socket.get$address().get$type();
      socket.setOption$2(B.C_SocketOption, true);
      t1 = this.$this;
      t2 = t1._idleConnections;
      t1 = t2.$ti._precomputed1._as(A._HttpConnection$(socket, t1));
      t2._insertBefore$3$updateFirst(t2._collection$_first, t1, false);
    },
    $signature: 28
  };
  A._HttpServer_listen_closure0.prototype = {
    call$2(error, stackTrace) {
      if (!(error instanceof A.HandshakeException))
        this.$this.__http$_controller.addError$2(type$.Object._as(error), type$.nullable_StackTrace._as(stackTrace));
    },
    $signature: 14
  };
  A._HttpParser.prototype = {
    _HttpParser$_$1(_requestParser) {
      var _this = this,
        t1 = _this.__http$_controller;
      t1.set$onListen(new A._HttpParser$__closure(_this));
      t1.set$onPause(new A._HttpParser$__closure0(_this));
      t1.set$onResume(new A._HttpParser$__closure1(_this));
      t1.set$onCancel(new A._HttpParser$__closure2(_this));
      _this._reset$0();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.__http$_controller;
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$4$cancelOnError$onDone$onError(type$.nullable_void_Function__HttpIncoming._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _parse$0() {
      var e, s, exception, t1, _this = this;
      try {
        _this._doParse$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.__http$_state;
        if (t1 >= 17 && t1 <= 24) {
          _this.__http$_state = 27;
          _this._reportBodyError$2(e, s);
        } else {
          _this.__http$_state = 27;
          _this._reportHttpError$2(e, s);
        }
      }
    },
    _headersEnd$0() {
      var t1, t2, incoming, _this = this,
        headers = _this.__http$_headers;
      headers._mutable = false;
      t1 = headers._contentLength;
      _this._transferLength = t1;
      t2 = _this._chunked;
      if (t2) {
        _this._transferLength = -1;
        t1 = -1;
      }
      if (_this._messageType === 1 && t1 < 0 && !t2) {
        _this._transferLength = 0;
        t1 = 0;
      }
      if (_this._connectionUpgrade) {
        _this.__http$_state = 26;
        t1 = _this._transferLength = 0;
      }
      incoming = _this._createIncoming$1(t1);
      t1 = _this.__http$_method;
      incoming.method = A.String_String$fromCharCodes(t1, 0, null);
      t2 = _this._uriOrReasonPhrase;
      incoming.uri = A.Uri_parse(A.String_String$fromCharCodes(t2, 0, null));
      B.JSArray_methods.set$length(t1, 0);
      B.JSArray_methods.set$length(t2, 0);
      if (_this._connectionUpgrade) {
        _this._parserCalled = false;
        _this._closeIncoming$0();
        _this.__http$_controller.add$1(0, incoming);
        return true;
      }
      t1 = _this._transferLength;
      if (t1 !== 0)
        t2 = _this._messageType === 0 && _this._noMessageBody;
      else
        t2 = true;
      if (t2) {
        _this._reset$0();
        _this._closeIncoming$0();
        _this.__http$_controller.add$1(0, incoming);
        return false;
      } else if (_this._chunked) {
        _this.__http$_state = 19;
        _this._remainingContent = 0;
      } else if (t1 > 0) {
        _this._remainingContent = t1;
        _this.__http$_state = 24;
      } else
        _this.__http$_state = 24;
      _this._parserCalled = false;
      _this.__http$_controller.add$1(0, incoming);
      return true;
    },
    _doParse$0() {
      var t1, t2, t3, t4, t5, buffer, t6, t7, index, byte, i, headerField, headerValue, tokens, isResponse, isUpgradeCode, isUpgrade, t8, value, dataAvailable, dataAvailable0, data, lastEvent, _this = this, _null = null,
        _s22_ = "Invalid request method",
        _s22_0 = "Failed to parse HTTP, ",
        _s16_ = " does not match ",
        _s79_ = "Both Content-Length and Transfer-Encoding are specified, at most one is allowed",
        _s18_ = " does not match 10",
        _s18_0 = " does not match 13";
      _this._parserCalled = true;
      t1 = _this.__http$_state;
      if (t1 === 25)
        throw A.wrapException(A.HttpException$("Data on closed connection", _null));
      if (t1 === 27)
        throw A.wrapException(A.HttpException$("Data on failed connection", _null));
      t1 = type$.List_int;
      t2 = _this._headerField;
      t3 = _this._headerValue;
      t4 = _this._uriOrReasonPhrase;
      t5 = _this.__http$_method;
      while (true) {
        buffer = _this.__http$_buffer;
        t6 = buffer != null;
        if (t6)
          if (_this.__http$_index < buffer.length) {
            t7 = _this.__http$_state;
            t7 = t7 !== 27 && t7 !== 26;
          } else
            t7 = false;
        else
          t7 = false;
        if (!t7)
          break;
        t6 = _this._incoming == null;
        if (!(!t6 && _this._bodyPaused))
          t6 = t6 && _this._paused;
        else
          t6 = true;
        if (t6) {
          _this._parserCalled = false;
          return;
        }
        index = _this.__http$_index;
        t6 = buffer.length;
        if (!(index >= 0 && index < t6))
          return A.ioore(buffer, index);
        byte = buffer[index];
        t7 = _this.__http$_index = index + 1;
        switch (_this.__http$_state) {
          case 0:
            if (byte === 72)
              _this.__http$_state = _this._httpVersionIndex = 1;
            else {
              if (!(byte > 31 && byte < 128 && !B.List_NUU[byte]))
                throw A.wrapException(A.HttpException$(_s22_, _null));
              t1._as(t5);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t5, byte);
              else
                _this._reportSizeLimitError$0();
              _this.__http$_state = 3;
            }
            break;
          case 1:
            t6 = _this._httpVersionIndex;
            t6.toString;
            if (t6 < 4 && byte === B.List_72_84_84_80[t6])
              _this._httpVersionIndex = t6 + 1;
            else if (t6 === 4 && byte === 47) {
              _this._httpVersionIndex = t6 + 1;
              t6 = A.HttpException$("Invalid request line", _null);
              throw A.wrapException(t6);
            } else {
              for (i = 0; i < t6; ++i) {
                if (!(i < 4))
                  return A.ioore(B.List_72_84_84_80, i);
                t7 = B.List_72_84_84_80[i];
                t1._as(t5);
                if (++_this._headersReceivedSize < 1048576)
                  B.JSArray_methods.add$1(t5, t7);
                else
                  _this._reportSizeLimitError$0();
              }
              if (byte === 32)
                _this.__http$_state = 4;
              else {
                t1._as(t5);
                if (++_this._headersReceivedSize < 1048576)
                  B.JSArray_methods.add$1(t5, byte);
                else
                  _this._reportSizeLimitError$0();
                _this._httpVersion = 0;
                _this.__http$_state = 3;
              }
            }
            break;
          case 2:
            t6 = _this._httpVersionIndex;
            t6.toString;
            if (t6 < 7) {
              t7 = B.List_E7y0[t6];
              if (byte !== t7)
                A.throwExpression(A.HttpException$(_s22_0 + byte + _s16_ + t7, _null));
              _this._httpVersionIndex = t6 + 1;
            } else {
              t7 = t6 === 7;
              if (t7 && byte === 49) {
                _this._httpVersion = 2;
                _this._httpVersionIndex = t6 + 1;
              } else if (t7 && byte === 48) {
                _this._httpVersion = 1;
                _this._httpVersionIndex = t6 + 1;
              } else if (t6 === 8) {
                if (byte !== 32)
                  A.throwExpression(A.HttpException$(_s22_0 + byte + " does not match 32", _null));
                _this.__http$_state = 7;
              } else
                throw A.wrapException(A.HttpException$("Invalid response line, failed to parse HTTP version", _null));
            }
            break;
          case 3:
            if (byte === 32)
              _this.__http$_state = 4;
            else {
              if (!(byte < 256))
                return A.ioore(B.List_NUU, byte);
              if (B.List_NUU[byte] || byte === 13 || byte === 10)
                throw A.wrapException(A.HttpException$(_s22_, _null));
              t1._as(t5);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t5, byte);
              else
                _this._reportSizeLimitError$0();
            }
            break;
          case 4:
            if (byte === 32) {
              if (t4.length === 0)
                throw A.wrapException(A.HttpException$("Invalid request, empty URI", _null));
              _this.__http$_state = 5;
              _this._httpVersionIndex = 0;
            } else {
              if (byte === 13 || byte === 10)
                throw A.wrapException(A.HttpException$("Invalid request, unexpected " + byte + " in URI", _null));
              t1._as(t4);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t4, byte);
              else
                _this._reportSizeLimitError$0();
            }
            break;
          case 5:
            t6 = _this._httpVersionIndex;
            t6.toString;
            if (t6 < 7) {
              t7 = B.List_2Vk0[t6];
              if (byte !== t7)
                A.throwExpression(A.HttpException$(_s22_0 + byte + _s16_ + t7, _null));
              _this._httpVersionIndex = t6 + 1;
            } else if (t6 === 7)
              if (byte === 49) {
                _this._httpVersion = 2;
                _this._httpVersionIndex = t6 + 1;
              } else if (byte === 48) {
                _this._httpVersion = 1;
                _this._httpVersionIndex = t6 + 1;
              } else
                throw A.wrapException(A.HttpException$("Invalid response, invalid HTTP version", _null));
            else if (byte === 13)
              _this.__http$_state = 6;
            else if (byte === 10) {
              _this.__http$_state = 6;
              _this.__http$_index = t7 - 1;
            }
            break;
          case 6:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            _this._messageType = 1;
            _this.__http$_state = 10;
            break;
          case 7:
            if (byte === 32)
              _this.__http$_state = 8;
            else if (byte === 13)
              _this.__http$_state = 9;
            else if (byte === 10) {
              _this.__http$_state = 9;
              _this.__http$_index = t7 - 1;
            } else {
              t6 = ++_this._statusCodeLength;
              if (byte < 48 || byte > 57)
                throw A.wrapException(A.HttpException$("Invalid response status code with " + byte, _null));
              else if (t6 > 3)
                throw A.wrapException(A.HttpException$("Invalid response, status code is over 3 digits", _null));
              else
                _this._statusCode = _this._statusCode * 10 + byte - 48;
            }
            break;
          case 8:
            if (byte === 13)
              _this.__http$_state = 9;
            else if (byte === 10) {
              _this.__http$_state = 9;
              _this.__http$_index = t7 - 1;
            } else {
              t1._as(t4);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t4, byte);
              else
                _this._reportSizeLimitError$0();
            }
            break;
          case 9:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            t6 = _this._statusCode;
            if (t6 <= 199 || t6 === 204 || t6 === 304)
              _this._noMessageBody = true;
            _this.__http$_state = 10;
            break;
          case 10:
            t6 = _this.get$version();
            t6.toString;
            _this.__http$_headers = A._HttpHeaders$(t6, 80, _null);
            if (byte === 13)
              _this.__http$_state = 16;
            else if (byte === 10) {
              _this.__http$_state = 16;
              --_this.__http$_index;
            } else {
              t6 = (byte - 65 & 127) < 26 ? byte | 32 : byte;
              t1._as(t2);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t2, t6);
              else
                _this._reportSizeLimitError$0();
              _this.__http$_state = 11;
            }
            break;
          case 11:
            if (byte === 58)
              _this.__http$_state = 12;
            else {
              if (!(byte > 31 && byte < 128 && !B.List_NUU[byte]))
                throw A.wrapException(A.HttpException$("Invalid header field name, with " + byte, _null));
              t6 = (byte - 65 & 127) < 26 ? byte | 32 : byte;
              t1._as(t2);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t2, t6);
              else
                _this._reportSizeLimitError$0();
            }
            break;
          case 12:
            if (byte === 13)
              _this.__http$_state = 14;
            else if (byte === 10)
              _this.__http$_state = 15;
            else if (byte !== 32 && byte !== 9) {
              t1._as(t3);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t3, byte);
              else
                _this._reportSizeLimitError$0();
              _this.__http$_state = 13;
            }
            break;
          case 13:
            if (byte === 13)
              _this.__http$_state = 14;
            else if (byte === 10)
              _this.__http$_state = 15;
            else {
              t1._as(t3);
              if (++_this._headersReceivedSize < 1048576)
                B.JSArray_methods.add$1(t3, byte);
              else
                _this._reportSizeLimitError$0();
            }
            break;
          case 14:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            _this.__http$_state = 15;
            break;
          case 15:
            if (byte === 32 || byte === 9)
              _this.__http$_state = 12;
            else {
              headerField = A.String_String$fromCharCodes(t2, 0, _null);
              headerValue = A.String_String$fromCharCodes(t3, 0, _null);
              if (headerField === "content-length") {
                if (_this._contentLength)
                  throw A.wrapException(A.HttpException$("The Content-Length header occurred more than once, at most one is allowed.", _null));
                else if (_this._transferEncoding)
                  throw A.wrapException(A.HttpException$(_s79_, _null));
                _this._contentLength = true;
              } else if (headerField === "transfer-encoding") {
                _this._transferEncoding = true;
                if (A._HttpParser__caseInsensitiveCompare(new A.CodeUnits("chunked"), t3))
                  _this._chunked = true;
                if (_this._contentLength)
                  throw A.wrapException(A.HttpException$(_s79_, _null));
              }
              t6 = _this.__http$_headers;
              t6.toString;
              if (headerField === "connection") {
                tokens = A._HttpParser__tokenizeFieldValue(headerValue);
                isResponse = _this._messageType === 0;
                t7 = _this._statusCode;
                isUpgradeCode = t7 === 426 || t7 === 101;
                for (t7 = !isResponse, i = 0; i < tokens.length; ++i) {
                  isUpgrade = A._HttpParser__caseInsensitiveCompare(new A.CodeUnits("upgrade"), new A.CodeUnits(tokens[i]));
                  if (!(isUpgrade && t7))
                    t8 = isUpgrade && isResponse && isUpgradeCode;
                  else
                    t8 = true;
                  if (t8)
                    _this._connectionUpgrade = true;
                  if (!(i < tokens.length))
                    return A.ioore(tokens, i);
                  t6.__http$_add$2(headerField, tokens[i]);
                }
              } else
                t6.__http$_add$2(headerField, headerValue);
              B.JSArray_methods.set$length(t2, 0);
              B.JSArray_methods.set$length(t3, 0);
              if (byte === 13)
                _this.__http$_state = 16;
              else if (byte === 10) {
                _this.__http$_state = 16;
                --_this.__http$_index;
              } else {
                _this.__http$_state = 11;
                t6 = (byte - 65 & 127) < 26 ? (byte | 32) >>> 0 : byte;
                t1._as(t2);
                if (++_this._headersReceivedSize < 1048576)
                  B.JSArray_methods.add$1(t2, t6);
                else
                  _this._reportSizeLimitError$0();
              }
            }
            break;
          case 16:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            if (_this._headersEnd$0())
              return;
            break;
          case 17:
            if (byte === 10) {
              _this.__http$_state = 18;
              _this.__http$_index = t7 - 1;
              break;
            }
            if (byte !== 13)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_0, _null));
            _this.__http$_state = 18;
            break;
          case 18:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            _this.__http$_state = 19;
            break;
          case 19:
            if (byte === 13)
              _this.__http$_state = 21;
            else if (byte === 10) {
              _this.__http$_state = 21;
              _this.__http$_index = t7 - 1;
            } else if (byte === 59)
              _this.__http$_state = 20;
            else {
              value = _this._expectHexDigit$1(byte);
              t6 = _this._remainingContent;
              if (t6 > 134217727)
                throw A.wrapException(A.HttpException$("Chunk size overflows the integer", _null));
              _this._remainingContent = t6 * 16 + value;
            }
            break;
          case 20:
            if (byte === 13)
              _this.__http$_state = 21;
            else if (byte === 10) {
              _this.__http$_state = 21;
              _this.__http$_index = t7 - 1;
            }
            break;
          case 21:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            if (_this._remainingContent > 0)
              _this.__http$_state = 24;
            else
              _this.__http$_state = 22;
            break;
          case 22:
            if (byte === 10) {
              _this.__http$_state = 23;
              _this.__http$_index = t7 - 1;
              break;
            }
            if (byte !== 13)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_0, _null));
            break;
          case 23:
            if (byte !== 10)
              A.throwExpression(A.HttpException$(_s22_0 + byte + _s18_, _null));
            _this._reset$0();
            _this._closeIncoming$0();
            break;
          case 24:
            t7 = _this.__http$_index = t7 - 1;
            dataAvailable = t6 - t7;
            dataAvailable0 = _this._remainingContent;
            if (dataAvailable0 >= 0 && dataAvailable > dataAvailable0)
              dataAvailable = dataAvailable0;
            t6 = buffer.buffer;
            t8 = buffer.byteOffset;
            data = new Uint8Array(t6, t8 + t7, dataAvailable);
            t6 = _this._bodyController;
            t6.toString;
            t7 = A._instanceType(t6);
            t7._precomputed1._as(data);
            t8 = t6._state;
            if (t8 >= 4)
              A.throwExpression(t6._badEventState$0());
            if ((t8 & 1) !== 0)
              t6._sendData$1(data);
            else if ((t8 & 3) === 0) {
              t6 = t6._ensurePendingEvents$0();
              t7 = new A._DelayedData(data, t7._eval$1("_DelayedData<1>"));
              lastEvent = t6.lastPendingEvent;
              if (lastEvent == null)
                t6.firstPendingEvent = t6.lastPendingEvent = t7;
              else {
                lastEvent.set$next(t7);
                t6.lastPendingEvent = t7;
              }
            }
            t6 = _this._remainingContent;
            if (t6 !== -1)
              t6 = _this._remainingContent = t6 - data.length;
            _this.__http$_index = _this.__http$_index + data.length;
            if (t6 === 0)
              if (!_this._chunked) {
                _this._reset$0();
                _this._closeIncoming$0();
              } else
                _this.__http$_state = 17;
            break;
          case 27:
            break;
          default:
            break;
        }
      }
      _this._parserCalled = false;
      if (t6 && _this.__http$_index === buffer.length) {
        _this.__http$_buffer = null;
        _this.__http$_index = -1;
        t1 = _this.__http$_state;
        if (t1 !== 26 && t1 !== 27)
          _this._socketSubscription.resume$0();
      }
    },
    __http$_onData$1(buffer) {
      var _this = this;
      type$.Uint8List._as(buffer);
      _this._socketSubscription.pause$0();
      _this.__http$_buffer = buffer;
      _this.__http$_index = 0;
      _this._parse$0();
    },
    __http$_onDone$0() {
      var t1, t2, _this = this, _null = null;
      _this.set$_socketSubscription(_null);
      t1 = _this.__http$_state;
      if (t1 === 25 || t1 === 27)
        return;
      if (_this._incoming != null) {
        if (t1 !== 26) {
          t2 = !(t1 === 24 && !_this._chunked && _this._transferLength === -1);
          t1 = t2;
        } else
          t1 = false;
        if (t1)
          _this._reportBodyError$1(new A.HttpException("Connection closed while receiving data", _null));
        _this._closeIncoming$1(true);
        _this.__http$_controller.close$0();
        return;
      }
      if (t1 === 0) {
        _this.__http$_controller.close$0();
        return;
      }
      if (t1 === 26) {
        _this.__http$_controller.close$0();
        return;
      }
      if (t1 < 17) {
        _this.__http$_state = 27;
        _this._reportHttpError$1(new A.HttpException("Connection closed before full header was received", _null));
        _this.__http$_controller.close$0();
        return;
      }
      if (!_this._chunked && _this._transferLength === -1)
        _this.__http$_state = 25;
      else {
        _this.__http$_state = 27;
        _this._reportHttpError$1(new A.HttpException("Connection closed before full body was received", _null));
      }
      _this.__http$_controller.close$0();
    },
    get$version() {
      switch (this._httpVersion) {
        case 1:
          return "1.0";
        case 2:
          return "1.1";
      }
      return null;
    },
    _reset$0() {
      var _this = this;
      if (_this.__http$_state === 26)
        return;
      _this._messageType = _this.__http$_state = 0;
      B.JSArray_methods.set$length(_this._headerField, 0);
      B.JSArray_methods.set$length(_this._headerValue, 0);
      _this._headersReceivedSize = 0;
      B.JSArray_methods.set$length(_this.__http$_method, 0);
      B.JSArray_methods.set$length(_this._uriOrReasonPhrase, 0);
      _this._httpVersion = _this._statusCodeLength = _this._statusCode = 0;
      _this._transferLength = -1;
      _this._noMessageBody = _this._chunked = _this._connectionUpgrade = false;
      _this._remainingContent = -1;
      _this._transferEncoding = _this._contentLength = false;
      _this.__http$_headers = null;
    },
    _expectHexDigit$1(byte) {
      if (48 <= byte && byte <= 57)
        return byte - 48;
      else if (65 <= byte && byte <= 70)
        return byte - 65 + 10;
      else if (97 <= byte && byte <= 102)
        return byte - 97 + 10;
      else
        throw A.wrapException(A.HttpException$("Failed to parse HTTP, " + byte + " is expected to be a Hex digit", null));
    },
    _reportSizeLimitError$0() {
      var method,
        t1 = this.__http$_state;
      switch (t1) {
        case 0:
        case 1:
        case 3:
          method = "Method";
          break;
        case 4:
          method = "URI";
          break;
        case 8:
          method = "Reason phrase";
          break;
        case 10:
        case 11:
          method = "Header field";
          break;
        case 12:
        case 13:
          method = "Header value";
          break;
        default:
          throw A.wrapException(A.UnsupportedError$("Unexpected state: " + t1));
      }
      throw A.wrapException(A.HttpException$(method + " exceeds the 1048576 size limit", null));
    },
    _createIncoming$1(transferLength) {
      var t1, incoming, _this = this, _null = null,
        controller = A.StreamController_StreamController(_null, _null, _null, _null, true, type$.Uint8List);
      _this.set$_bodyController(controller);
      t1 = _this.__http$_headers;
      t1.toString;
      incoming = _this._incoming = new A._HttpIncoming(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_bool), type$._AsyncCompleter_bool), new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>")), t1);
      controller.set$onListen(new A._HttpParser__createIncoming_closure(_this, incoming));
      controller.set$onPause(new A._HttpParser__createIncoming_closure0(_this, incoming));
      controller.set$onResume(new A._HttpParser__createIncoming_closure1(_this, incoming));
      controller.set$onCancel(new A._HttpParser__createIncoming_closure2(_this, incoming));
      _this._bodyPaused = true;
      _this._pauseStateChanged$0();
      return incoming;
    },
    _closeIncoming$1(closing) {
      var controller, _this = this,
        tmp = _this._incoming;
      if (tmp == null)
        return;
      tmp.hasSubscriber = tmp.fullBodyRead = true;
      tmp._dataCompleter.complete$1(closing);
      _this._incoming = null;
      controller = _this._bodyController;
      if (controller != null) {
        controller.close$0();
        _this.set$_bodyController(null);
      }
      _this._bodyPaused = false;
      _this._pauseStateChanged$0();
    },
    _closeIncoming$0() {
      return this._closeIncoming$1(false);
    },
    _pauseStateChanged$0() {
      var _this = this;
      if (_this._incoming != null) {
        if (!_this._bodyPaused && !_this._parserCalled)
          _this._parse$0();
      } else if (!_this._paused && !_this._parserCalled)
        _this._parse$0();
    },
    _reportHttpError$2(error, stackTrace) {
      var t1 = this._socketSubscription;
      if (t1 != null)
        t1.cancel$0();
      this.__http$_state = 27;
      t1 = this.__http$_controller;
      t1.addError$2(error, type$.nullable_StackTrace._as(stackTrace));
      t1.close$0();
    },
    _reportHttpError$1(error) {
      return this._reportHttpError$2(error, null);
    },
    _reportBodyError$2(error, stackTrace) {
      var _this = this,
        t1 = _this._socketSubscription;
      if (t1 != null)
        t1.cancel$0();
      _this.__http$_state = 27;
      t1 = _this._bodyController;
      if (t1 != null)
        t1.addError$2(error, type$.nullable_StackTrace._as(stackTrace));
      t1 = _this._bodyController;
      if (t1 != null)
        t1.close$0();
    },
    _reportBodyError$1(error) {
      return this._reportBodyError$2(error, null);
    },
    set$_socketSubscription(_socketSubscription) {
      this._socketSubscription = type$.nullable_StreamSubscription_Uint8List._as(_socketSubscription);
    },
    set$_bodyController(_bodyController) {
      this._bodyController = type$.nullable_StreamController_Uint8List._as(_bodyController);
    }
  };
  A._HttpParser$__closure.prototype = {
    call$0() {
      this.$this._paused = false;
    },
    $signature: 0
  };
  A._HttpParser$__closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._paused = true;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  A._HttpParser$__closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._paused = false;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  A._HttpParser$__closure2.prototype = {
    call$0() {
      var t1 = this.$this._socketSubscription;
      if (t1 != null)
        t1.cancel$0();
    },
    $signature: 3
  };
  A._HttpParser__createIncoming_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._bodyPaused = false;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  A._HttpParser__createIncoming_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._bodyPaused = true;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  A._HttpParser__createIncoming_closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t1._bodyPaused = false;
      t1._pauseStateChanged$0();
    },
    $signature: 0
  };
  A._HttpParser__createIncoming_closure2.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      if (this.incoming !== t1._incoming)
        return;
      t2 = t1._socketSubscription;
      if (t2 != null)
        t2.cancel$0();
      t1._closeIncoming$1(true);
      t1.__http$_controller.close$0();
    },
    $signature: 3
  };
  A._HttpSessionManager.prototype = {};
  A.__HttpConnection_LinkedListEntry__ServiceObject.prototype = {};
  A.__HttpServer_Stream__ServiceObject.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(J.$eq$(receiver[i], element))) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!A.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    firstWhere$1(receiver, test) {
      var end, i, element;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    singleWhere$1(receiver, test) {
      var $length, match, matchFound, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      $length = receiver.length;
      for (match = null, matchFound = false, i = 0; i < $length; ++i) {
        element = receiver[i];
        if (A.boolConversionCheck(test.call$1(element))) {
          if (matchFound)
            throw A.wrapException(A.IterableElementError_tooMany());
          match = element;
          matchFound = true;
        }
        if ($length !== receiver.length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (matchFound)
        return t1._precomputed1._as(match);
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      var t1 = receiver.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, "start", null));
      if (end < start || end > t1)
        throw A.wrapException(A.RangeError$range(end, start, t1, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return A.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      throw A.wrapException(A.IterableElementError_tooMany());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!A.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      t2 = compare == null ? J._interceptors_JSArray__compareAny$closure() : compare;
      A.Sort_sort(receiver, t2, t1._precomputed1);
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (A.boolConversionCheck(J.$eq$(receiver[i], element)))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(J.$eq$(receiver[i], other)))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    indexWhere$1(receiver, test) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return i;
      return -1;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      return this.$ti._precomputed1._as(this._current);
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $add(receiver, other) {
      return receiver + other;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isComparable: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits, i,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      i = nonneg | nonneg >> 1;
      i |= i >> 2;
      i |= i >> 4;
      i |= i >> 8;
      i = (i | i >> 16) >>> 0;
      i = (i >>> 0) - (i >>> 1 & 1431655765);
      i = (i & 858993459) + (i >>> 2 & 858993459);
      i = i + (i >>> 4) & 252645135;
      i += i >>> 8;
      return wordBits - (32 - (i + (i >>> 16) & 63));
    },
    $isint: 1
  };
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, i, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return _null;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return _null;
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      A._asString(other);
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      type$.Pattern._as(from);
      A.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      type$.Pattern._as(pattern);
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else if (pattern instanceof A.JSSyntaxRegExp && pattern.get$_nativeAnchoredVersion().exec("").length - 2 === 0)
        return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current();
        matchStart = match.get$start();
        matchEnd = match.get$end();
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      type$.Pattern._as(pattern);
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    toUpperCase$0(receiver) {
      return receiver.toUpperCase();
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1(receiver, other) {
      type$.Pattern._as(other);
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A.CastStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      t2 = this._source.listen$3$cancelOnError$onDone(null, cancelOnError, type$.nullable_void_Function._as(onDone));
      t1 = new A.CastStreamSubscription(t2, $.Zone__current, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastStreamSubscription<1,2>"));
      t2.onData$1(t1.get$_onData());
      t1.onData$1(onData);
      t1.onError$1(onError);
      return t1;
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    cast$1$0(_, $R) {
      return new A.CastStream(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastStream<1,2>"));
    }
  };
  A.CastStreamSubscription.prototype = {
    cancel$0() {
      return this._source.cancel$0();
    },
    onData$1(handleData) {
      var t1 = this.$ti;
      t1._eval$1("~(2)?")._as(handleData);
      this.set$_handleData(handleData == null ? null : this.__internal$_zone.registerUnaryCallback$2$1(handleData, type$.dynamic, t1._rest[1]));
    },
    onError$1(handleError) {
      var _this = this;
      _this._source.onError$1(handleError);
      if (handleError == null)
        _this._handleError = null;
      else if (type$.void_Function_Object_StackTrace._is(handleError))
        _this._handleError = _this.__internal$_zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      else if (type$.void_Function_Object._is(handleError))
        _this._handleError = _this.__internal$_zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      else
        throw A.wrapException(A.ArgumentError$(string$.handle, null));
    },
    _onData$1(data) {
      var targetData, error, stack, handleError, t2, exception, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this._handleData;
      if (t2 == null)
        return;
      targetData = null;
      try {
        targetData = t1._rest[1]._as(data);
      } catch (exception) {
        error = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        handleError = _this._handleError;
        if (handleError == null)
          _this.__internal$_zone.handleUncaughtError$2(error, stack);
        else {
          t1 = type$.Object;
          t2 = _this.__internal$_zone;
          if (type$.void_Function_Object_StackTrace._is(handleError))
            t2.runBinaryGuarded$2$3(handleError, error, stack, t1, type$.StackTrace);
          else
            t2.runUnaryGuarded$1$2(type$.void_Function_Object._as(handleError), error, t1);
        }
        return;
      }
      _this.__internal$_zone.runUnaryGuarded$1$2(t2, targetData, t1._rest[1]);
    },
    pause$1(resumeSignal) {
      this._source.pause$1(resumeSignal);
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      this._source.resume$0();
    },
    asFuture$1$1(futureValue, $E) {
      return this._source.asFuture$1$1($E._eval$1("0?")._as(futureValue), $E);
    },
    set$_handleData(_handleData) {
      this._handleData = this.$ti._eval$1("~(2)?")._as(_handleData);
    },
    $isStreamSubscription: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$single(_) {
      return A._instanceType(this)._rest[1]._as(J.get$single$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    addAll$1(_, values) {
      var t1 = this.$ti;
      J.addAll$1$ax(this._source, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(values), t1._rest[1], t1._precomputed1));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    remove$1(_, value) {
      return J.remove$1$ax(this._source, value);
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      var t1 = "LateInitializationError: " + this.__internal$_message;
      return t1;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      return B.JSString_methods.codeUnitAt$1(this.__internal$_string, A._asInt(i));
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 88
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return _this.elementAt$1(0, _this.get$length(_this) - 1);
    },
    get$single(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      return _this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(J.$eq$(_this.elementAt$1(0, i), element)))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    },
    reduce$1(_, combine) {
      var $length, value, i, _this = this;
      A._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$1$2(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      $T._as(initialValue);
      A._instanceType(_this)._bind$1($T)._eval$1("1(1,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this.__internal$_start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this.__internal$_start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      return this.$ti._precomputed1._as(this.__internal$_current);
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$single(_) {
      return this._f.call$1(J.get$single$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      return this.$ti._rest[1]._as(this.__internal$_current);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      return this.$ti._rest[1]._as(this.__internal$_current);
    },
    moveNext$0() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>?")._as(_currentExpansion);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, A._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0)
        return this.$ti._precomputed1._as(null);
      return this._iterator.get$current();
    }
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.SkipWhileIterable.prototype = {
    get$iterator(_) {
      return new A.SkipWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("SkipWhileIterator<1>"));
    }
  };
  A.SkipWhileIterator.prototype = {
    moveNext$0() {
      var t1, t2, _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0();)
          if (!A.boolConversionCheck(t2.call$1(t1.get$current())))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1(receiver, iterable) {
      A.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1(receiver, element) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1(_, iterable) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1(_, element) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + A.S(this.__internal$_name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    get$entries() {
      return this.entries$body$ConstantMap(A._instanceType(this)._eval$1("MapEntry<1,2>"));
    },
    entries$body$ConstantMap($async$type) {
      var $async$self = this;
      return A._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, key;
        return function $async$get$entries($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("@<1>")._bind$1(t3)._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                $async$goto = 4;
                return new A.MapEntry(key, t3._as($async$self.$index(0, key)), t2);
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return A._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return A._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._jsObject[A._asString(key)];
    },
    forEach$1(_, f) {
      var keys, t2, t3, i, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      keys = this._keys;
      for (t2 = keys.length, t3 = this._jsObject, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        t4 = A._asString(keys[i]);
        f.call$2(t4, t1._as(t3[t4]));
      }
    },
    get$keys() {
      return new A._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = this.$ti;
      return A.MappedIterable_MappedIterable(this._keys, new A.ConstantStringMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    }
  };
  A.ConstantStringMap_values_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = t1.$ti;
      return t2._rest[1]._as(t1._jsObject[A._asString(t2._precomputed1._as(key))]);
    },
    $signature() {
      return this.$this.$ti._eval$1("2(1)");
    }
  };
  A._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__js_helper$_map._keys;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length(_) {
      return this.__js_helper$_map._keys.length;
    }
  };
  A.Instantiation.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeType(this) === A.getRuntimeType(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeType(this));
    },
    toString$0(_) {
      var types = "<" + B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ") + ">";
      return this._genericClosure.toString$0(0) + " with " + types;
    }
  };
  A.Instantiation1.prototype = {
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments() {
      var t1, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty0;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty0;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (!(index < t1.length))
          return A.ioore(t1, index);
        list.push(t1[index]);
      }
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty0;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty0;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (!(t4 >= 0 && t4 < t2.length))
          return A.ioore(t2, t4);
        map.$indexSet(0, new A.Symbol(t3), t2[t4]);
      }
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_initTicker_closure.prototype = {
    call$0() {
      return B.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 32
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 107
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(type$.Object._as(this._receiver)) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    },
    get$message() {
      return this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    get$keys() {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this.get$keys(), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums, _this = this;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key))
        return t1._rest[1]._as(_this.$index(0, key));
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3ffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (A.boolConversionCheck(J.$eq$(bucket[i].hashMapCellKey, key)))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _getTableCell$2(table, key) {
      return table[key];
    },
    _getTableBucket$2(table, key) {
      return table[key];
    },
    _setTableEntry$3(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2(table, key) {
      delete table[key];
    },
    _containsTableEntry$2(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      return t2._rest[1]._as(t1.$index(0, t2._precomputed1._as(each)));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 36
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 115
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 120
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = type$.Object._as(this.get$_nativeGlobalVersion());
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = type$.Object._as(this.get$_nativeAnchoredVersion());
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start() {
      return this._match.index;
    },
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1(index) {
      var t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this._start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      return type$.RegExpMatch._as(this.__js_helper$_current);
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = B.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = B.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start() {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readLocal$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    _readField$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    }
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  A.NativeByteData.prototype = {
    _getFloat64$2(receiver, byteOffset, littleEndian) {
      return receiver.getFloat64(byteOffset, littleEndian);
    },
    _getUint32$2(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    _setFloat64$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat64(byteOffset, value, littleEndian);
    },
    _setUint32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    },
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(index);
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var targetLength, count, sourceLength, source;
      A._asInt(start);
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          A.throwExpression(A.RangeError$range(start, 0, end, null, null));
        count = end - start;
        if (skipCount < 0)
          A.throwExpression(A.ArgumentError$(skipCount, null));
        sourceLength = iterable.length;
        if (sourceLength - skipCount < count)
          A.throwExpression(A.StateError$("Not enough elements"));
        source = skipCount !== 0 || sourceLength !== count ? iterable.subarray(skipCount, skipCount + count) : iterable;
        receiver.set(source, start);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeInt8List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    }
  };
  A.NativeUint16List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isUint32List: 1
  };
  A.NativeUint8List.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this._message;
    }
  };
  A._TypeError.prototype = {
    get$message() {
      return this._message;
    },
    $isTypeError: 1
  };
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 2
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 122
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    cancel$0() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 3
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 9
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 123
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 125
  };
  A._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + A.S(this.value) + ")";
    }
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var nested = this._nestedIterator;
      if (nested == null)
        return this.$ti._precomputed1._as(this._async$_current);
      return nested.get$current();
    },
    moveNext$0() {
      var t1, t2, value, state, suspendedBodies, inner, _this = this;
      for (t1 = _this.$ti._eval$1("Iterator<1>"); true;) {
        t2 = _this._nestedIterator;
        if (t2 != null)
          if (t2.moveNext$0())
            return true;
          else
            _this.set$_nestedIterator(null);
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._async$_body, 0, 1);
        if (value instanceof A._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= suspendedBodies.length)
              return A.ioore(suspendedBodies, -1);
            _this._async$_body = suspendedBodies.pop();
            continue;
          } else {
            t2 = value.value;
            if (state === 3)
              throw t2;
            else {
              inner = t1._as(J.get$iterator$ax(t2));
              if (inner instanceof A._SyncStarIterator) {
                t2 = _this._suspendedBodies;
                if (t2 == null)
                  t2 = _this._suspendedBodies = [];
                B.JSArray_methods.add$1(t2, _this._async$_body);
                _this._async$_body = inner._async$_body;
                continue;
              } else {
                _this.set$_nestedIterator(inner);
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, null, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    whenComplete$1(action) {
      var t1, t2, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        action = t2.registerCallback$1$1(action, type$.dynamic);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      _this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          _this._zone.scheduleMicrotask$1(new A._Future__chainFuture_closure(_this, value));
        } else
          A._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 2
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 21
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__chainFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 130
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    map$1$1(_, convert, $S) {
      var t1 = A._instanceType(this);
      return new A._MapStream(t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), this, t1._eval$1("@<Stream.T>")._bind$1($S)._eval$1("_MapStream<1,2>"));
    },
    map$1($receiver, convert) {
      return this.map$1$1($receiver, convert, type$.dynamic);
    },
    fold$1$2(_, initialValue, combine, $S) {
      var result, subscription, t1 = {};
      $S._as(initialValue);
      A._instanceType(this)._bind$1($S)._eval$1("1(1,Stream.T)")._as(combine);
      result = new A._Future($.Zone__current, $S._eval$1("_Future<0>"));
      t1.value = initialValue;
      subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_fold_closure(t1, result), result.get$_completeError());
      subscription.onData$1(new A.Stream_fold_closure0(t1, this, combine, subscription, result, $S));
      return result;
    },
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    cast$1$0(_, $R) {
      return new A.CastStream(this, A._instanceType(this)._eval$1("@<Stream.T>")._bind$1($R)._eval$1("CastStream<1,2>"));
    },
    drain$1$0($E) {
      $E._as(null);
      return this.listen$2$cancelOnError(null, true).asFuture$1$1(null, $E);
    },
    get$last(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, A._instanceType(this)._eval$1("_Future<Stream.T>")),
        result = A._Cell$named("result");
      t1.foundResult = false;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_last_closure(t1, this, result), true, new A.Stream_last_closure0(t1, future, result), future.get$_completeError());
      return future;
    },
    elementAt$1(_, index) {
      var result, subscription, _this = this, t1 = {};
      A.RangeError_checkNotNegative(index, "index");
      result = new A._Future($.Zone__current, A._instanceType(_this)._eval$1("_Future<Stream.T>"));
      t1.elementIndex = 0;
      t1.subscription = null;
      subscription = _this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_elementAt_closure(t1, _this, result, index), result.get$_completeError());
      t1.subscription = subscription;
      subscription.onData$1(new A.Stream_elementAt_closure0(t1, _this, index, result));
      return result;
    }
  };
  A.Stream_Stream$fromIterable_closure.prototype = {
    call$0() {
      var t1 = this.elements;
      return new A._IterablePendingEvents(new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>")), this.T._eval$1("_IterablePendingEvents<0>"));
    },
    $signature() {
      return this.T._eval$1("_IterablePendingEvents<0>()");
    }
  };
  A.Stream_fold_closure.prototype = {
    call$0() {
      this.result._complete$1(this._box_0.value);
    },
    $signature: 0
  };
  A.Stream_fold_closure0.prototype = {
    call$1(element) {
      var _this = this,
        t1 = _this._box_0,
        t2 = _this.S;
      A._runUserCode(new A.Stream_fold__closure(t1, _this.combine, A._instanceType(_this.$this)._eval$1("Stream.T")._as(element), t2), new A.Stream_fold__closure0(t1, t2), A._cancelAndErrorClosure(_this.subscription, _this.result), t2);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_fold__closure.prototype = {
    call$0() {
      return this.combine.call$2(this._box_0.value, this.element);
    },
    $signature() {
      return this.S._eval$1("0()");
    }
  };
  A.Stream_fold__closure0.prototype = {
    call$1(newValue) {
      this._box_0.value = this.S._as(newValue);
    },
    $signature() {
      return this.S._eval$1("Null(0)");
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.Stream_last_closure.prototype = {
    call$1(value) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(value);
      this._box_0.foundResult = true;
      this.result._value = value;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_last_closure0.prototype = {
    call$0() {
      var e, s, t1, exception, error, stackTrace, replacement, _this = this;
      if (_this._box_0.foundResult) {
        _this.future._complete$1(_this.result._readLocal$0());
        return;
      }
      try {
        t1 = A.IterableElementError_noElement();
        throw A.wrapException(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        } else if (stackTrace == null)
          stackTrace = A.AsyncError_defaultStackTrace(error);
        _this.future._completeError$2(error, stackTrace);
      }
    },
    $signature: 0
  };
  A.Stream_elementAt_closure.prototype = {
    call$0() {
      var _this = this;
      _this.result._completeError$2(A.IndexError$(_this.index, _this.$this, "index", null, _this._box_0.elementIndex), B._StringStackTrace_3uE);
    },
    $signature: 0
  };
  A.Stream_elementAt_closure0.prototype = {
    call$1(value) {
      var t1, t2, _this = this;
      A._instanceType(_this.$this)._eval$1("Stream.T")._as(value);
      t1 = _this._box_0;
      t2 = t1.elementIndex;
      if (_this.index === t2) {
        A._cancelAndValue(t1.subscription, _this.result, value);
        return;
      }
      t1.elementIndex = t2 + 1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.StreamConsumer.prototype = {};
  A.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  A._StreamController.prototype = {
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).varData);
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._StreamImplEvents(A._instanceType(_this)._eval$1("_StreamImplEvents<1>"));
        return A._instanceType(_this)._eval$1("_StreamImplEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.varData;
      if (events == null)
        events = state.varData = new A._StreamImplEvents(t1._eval$1("_StreamImplEvents<1>"));
      return t1._eval$1("_StreamImplEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).varData;
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._add$1(value);
    },
    addError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if (this._state >= 4)
        throw A.wrapException(this._badEventState$0());
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._addError$2(error, stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, subscription, pendingEvents, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      subscription = new A._ControllerSubscription(_this, A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), A._BufferingStreamSubscription__registerErrorHandler(t2, onError), A._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3, t1._eval$1("_ControllerSubscription<1>"));
      pendingEvents = _this.get$_pendingEvents();
      t3 = _this._state |= 1;
      if ((t3 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.varData = subscription;
        addState.addSubscription.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause(onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume(onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._add$1(data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    _createSubscription$4(onData, onError, onDone, cancelOnError) {
      return this._controller._subscribe$4(this.$ti._eval$1("~(1)?")._as(onData), onError, type$.nullable_void_Function._as(onDone), cancelOnError);
    },
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      var t1 = this._controller,
        t2 = A._instanceType(t1);
      t2._eval$1("StreamSubscription<1>")._as(this);
      if ((t1._state & 8) !== 0)
        t2._eval$1("_StreamControllerAddStreamState<1>")._as(t1._varData).addSubscription.pause$0();
      A._runGuarded(t1.onPause);
    },
    _onResume$0() {
      var t1 = this._controller,
        t2 = A._instanceType(t1);
      t2._eval$1("StreamSubscription<1>")._as(this);
      if ((t1._state & 8) !== 0)
        t2._eval$1("_StreamControllerAddStreamState<1>")._as(t1._varData).addSubscription.resume$0();
      A._runGuarded(t1.onResume);
    }
  };
  A._AddStreamState_cancel_closure.prototype = {
    call$0() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 3
  };
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_async$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onError$1(handleError) {
      this._onError = A._BufferingStreamSubscription__registerErrorHandler(this._zone, handleError);
    },
    pause$1(resumeSignal) {
      var t2, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      _this._state = (t1 + 128 | 4) >>> 0;
      if (resumeSignal != null)
        resumeSignal.whenComplete$1(_this.get$resume());
      if (t1 < 128) {
        t2 = _this._pending;
        if (t2 != null)
          if (t2._state === 1)
            t2._state = 3;
      }
      if ((t1 & 4) === 0 && (_this._state & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = _this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            _this._pending.schedule$1(_this);
          else {
            t1 = (_this._state & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
        }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    asFuture$1$1(futureValue, $E) {
      var result, t1 = {};
      $E._eval$1("0?")._as(futureValue);
      t1.resultValue = null;
      if (!$E._is(null))
        throw A.wrapException(A.ArgumentError$notNull("futureValue"));
      t1.resultValue = $E._as(futureValue);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this.set$_onDone(new A._BufferingStreamSubscription_asFuture_closure(t1, result));
      this._onError = new A._BufferingStreamSubscription_asFuture_closure0(this, result);
      return result;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var _this = this,
        t1 = A._instanceType(_this),
        pending = t1._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>?")._as(_this._pending);
      if (pending == null)
        pending = new A._StreamImplEvents(t1._eval$1("_StreamImplEvents<_BufferingStreamSubscription.T>"));
      _this.set$_pending(pending);
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var t1, t2, cancelFuture, _this = this;
      type$.StackTrace._as(stackTrace);
      t1 = _this._state;
      t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t1, isInputPaused, _this = this;
      if ((_this._state & 64) !== 0) {
        t1 = _this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = _this._state = (_this._state & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = _this._pending;
            t1 = t1 == null ? null : t1.get$isEmpty(t1);
            t1 = t1 !== false;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this._state = (_this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = _this._state;
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        _this._state = (_this._state & 4294967263) >>> 0;
      }
      t1 = _this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData(_onData) {
      this._async$_onData = A._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_onDone(_onDone) {
      this._onDone = type$.void_Function._as(_onDone);
    },
    set$_pending(_pending) {
      this._pending = A._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription_asFuture_closure.prototype = {
    call$0() {
      this.result._complete$1(this._box_0.resultValue);
    },
    $signature: 0
  };
  A._BufferingStreamSubscription_asFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      var cancelFuture, t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      cancelFuture = this.$this.cancel$0();
      t1 = this.result;
      if (cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new A._BufferingStreamSubscription_asFuture__closure(t1, error, stackTrace));
      else
        t1._completeError$2(error, stackTrace);
    },
    $signature: 21
  };
  A._BufferingStreamSubscription_asFuture__closure.prototype = {
    call$0() {
      this.result._completeError$2(this.error, this.stackTrace);
    },
    $signature: 3
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      A._instanceType(this)._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._createSubscription$4(onData, onError, onDone, cancelOnError === true);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4(onData, onError, onDone, cancelOnError) {
      var t1 = A._instanceType(this);
      return A._BufferingStreamSubscription$(t1._eval$1("~(1)?")._as(onData), onError, type$.nullable_void_Function._as(onDone), cancelOnError, t1._precomputed1);
    }
  };
  A._GeneratedStreamImpl.prototype = {
    _createSubscription$4(onData, onError, onDone, cancelOnError) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if (_this._isUsed)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      _this._isUsed = true;
      t1 = A._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, t1._precomputed1);
      t1._setPendingEvents$1(_this._pending.call$0());
      return t1;
    }
  };
  A._IterablePendingEvents.prototype = {
    get$isEmpty(_) {
      return this._async$_iterator == null;
    },
    handleNext$1(dispatch) {
      var iterator, movedNext, e, s, exception, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      iterator = _this._async$_iterator;
      if (iterator == null)
        throw A.wrapException(A.StateError$("No events pending."));
      movedNext = false;
      try {
        if (iterator.moveNext$0()) {
          movedNext = true;
          dispatch._sendData$1(iterator.get$current());
        } else {
          _this.set$_async$_iterator(null);
          dispatch._sendDone$0();
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (!A.boolConversionCheck(movedNext))
          _this.set$_async$_iterator(B.C_EmptyIterator);
        dispatch._sendError$2(e, s);
      }
    },
    set$_async$_iterator(_iterator) {
      this._async$_iterator = this.$ti._eval$1("Iterator<1>?")._as(_iterator);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      A._instanceType(_this)._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    $signature: 0
  };
  A._StreamImplEvents.prototype = {
    get$isEmpty(_) {
      return this.lastPendingEvent == null;
    },
    add$1(_, $event) {
      var lastEvent, _this = this;
      type$._DelayedEvent_dynamic._as($event);
      lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    },
    handleNext$1(dispatch) {
      var $event, nextEvent, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      $event = _this.firstPendingEvent;
      nextEvent = $event.get$next();
      _this.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        _this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  };
  A._StreamIterator.prototype = {
    get$current() {
      var _this = this;
      if (_this._async$_hasValue)
        return _this.$ti._precomputed1._as(_this._stateData);
      return _this.$ti._precomputed1._as(null);
    },
    moveNext$0() {
      var future, _this = this,
        subscription = _this._subscription;
      if (subscription != null) {
        if (_this._async$_hasValue) {
          future = new A._Future($.Zone__current, type$._Future_bool);
          _this._stateData = future;
          _this._async$_hasValue = false;
          subscription.resume$0();
          return future;
        }
        throw A.wrapException(A.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0() {
      var future, subscription, _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this.$ti._eval$1("Stream<1>")._as(stateData);
        future = new A._Future($.Zone__current, type$._Future_bool);
        _this._stateData = future;
        subscription = stateData.listen$4$cancelOnError$onDone$onError(_this.get$_async$_onData(), true, _this.get$_onDone(), _this.get$_onError());
        if (_this._stateData != null)
          _this.set$_subscription(subscription);
        return future;
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0() {
      var _this = this,
        subscription = _this._subscription,
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this.set$_subscription(null);
        if (!_this._async$_hasValue)
          type$._Future_bool._as(stateData)._asyncComplete$1(false);
        else
          _this._async$_hasValue = false;
        return subscription.cancel$0();
      }
      return $.$get$Future__nullFuture();
    },
    _async$_onData$1(data) {
      var moveNextFuture, t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this._subscription == null)
        return;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = data;
      _this._async$_hasValue = true;
      moveNextFuture._complete$1(true);
      if (_this._async$_hasValue) {
        t1 = _this._subscription;
        if (t1 != null)
          t1.pause$0();
      }
    },
    _onError$2(error, stackTrace) {
      var subscription, moveNextFuture, _this = this;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      subscription = _this._subscription;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeError$2(error, stackTrace);
      else
        moveNextFuture._asyncCompleteError$2(error, stackTrace);
    },
    _onDone$0() {
      var _this = this,
        subscription = _this._subscription,
        moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this.set$_subscription(null);
      _this._stateData = null;
      if (subscription != null)
        moveNextFuture._completeWithValue$1(false);
      else
        moveNextFuture._asyncCompleteWithValue$1(false);
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._cancelAndError_closure.prototype = {
    call$0() {
      return this.future._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._cancelAndErrorClosure_closure.prototype = {
    call$2(error, stackTrace) {
      A._cancelAndError(this.subscription, this.future, error, type$.StackTrace._as(stackTrace));
    },
    $signature: 5
  };
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 0
  };
  A._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4,
        t1 = A._instanceType(this);
      t1._eval$1("~(_ForwardingStream.T)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._eval$1("_ForwardingStream.T");
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t2 = new A._ForwardingStreamSubscription(this, A._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), A._BufferingStreamSubscription__registerErrorHandler(t3, onError), A._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t1._eval$1("@<_ForwardingStream.S>")._bind$1(t2)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t2.set$_subscription(this._async$_source.listen$3$onDone$onError(t2.get$_async$_handleData(), t2.get$_handleDone(), t2.get$_async$_handleError()));
      return t2;
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _async$_handleError$3(error, stackTrace, sink) {
      A._instanceType(this)._eval$1("_EventSink<_ForwardingStream.T>")._as(sink)._addError$2(error, stackTrace);
    }
  };
  A._ForwardingStreamSubscription.prototype = {
    _add$1(data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0();
      }
      return null;
    },
    _async$_handleData$1(data) {
      this._async$_stream._async$_handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _async$_handleError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._async$_stream._async$_handleError$3(type$.Object._as(error), stackTrace, this);
    },
    _handleDone$0() {
      A._instanceType(this._async$_stream)._eval$1("_EventSink<_ForwardingStream.T>")._as(this)._close$0();
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._MapStream.prototype = {
    _async$_handleData$2(inputEvent, sink) {
      var outputEvent, e, s, exception,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._addErrorWithReplacement(sink, e, s);
        return;
      }
      sink._add$1(outputEvent);
    }
  };
  A._HandleErrorStream.prototype = {
    _async$_handleData$2(data, sink) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      t1._eval$1("_EventSink<1>")._as(sink)._add$1(data);
    },
    _async$_handleError$3(error, stackTrace, sink) {
      var matches, test, e, s, e0, s0, exception;
      this.$ti._eval$1("_EventSink<1>")._as(sink);
      matches = true;
      test = this._test;
      if (test != null)
        try {
          matches = test.call$1(error);
        } catch (exception) {
          e = A.unwrapException(exception);
          s = A.getTraceFromException(exception);
          A._addErrorWithReplacement(sink, e, s);
          return;
        }
      if (A.boolConversionCheck(matches))
        try {
          A._invokeErrorHandler(this._onError, error, stackTrace);
        } catch (exception) {
          e0 = A.unwrapException(exception);
          s0 = A.getTraceFromException(exception);
          if (e0 === error)
            sink._addError$2(error, stackTrace);
          else
            A._addErrorWithReplacement(sink, e0, s0);
          return;
        }
      else
        sink._addError$2(error, stackTrace);
    }
  };
  A._EventSinkWrapper.prototype = {
    add$1(_, data) {
      var t1 = this._async$_sink;
      data = t1.$ti._rest[1]._as(this.$ti._precomputed1._as(data));
      if ((t1._state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_add(data);
    },
    addError$2(error, stackTrace) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    close$0() {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A._SinkTransformerStreamSubscription.prototype = {
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0();
      }
      return null;
    },
    _async$_handleData$1(data) {
      var e, s, exception, t1, t2, _this = this;
      _this.$ti._precomputed1._as(data);
      try {
        A._lateReadCheck(_this.___SinkTransformerStreamSubscription__transformerSink, "_transformerSink").add$1(0, data);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._state & 2) !== 0)
          A.throwExpression(A.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    _async$_handleError$2(error, stackTrace) {
      var e, s, t2, exception, _this = this,
        _s24_ = "Stream is already closed",
        t1 = type$.Object;
      t1._as(error);
      t2 = type$.StackTrace;
      t2._as(stackTrace);
      try {
        A._lateReadCheck(_this.___SinkTransformerStreamSubscription__transformerSink, "_transformerSink").addError$2(error, stackTrace);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (e === error) {
          if ((_this._state & 2) !== 0)
            A.throwExpression(A.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
        } else {
          t1 = t1._as(e);
          t2 = t2._as(s);
          if ((_this._state & 2) !== 0)
            A.throwExpression(A.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(t1, t2);
        }
      }
    },
    _handleDone$0() {
      var e, s, exception, t1, t2, _this = this;
      try {
        _this.set$_subscription(null);
        A._lateReadCheck(_this.___SinkTransformerStreamSubscription__transformerSink, "_transformerSink").close$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._state & 2) !== 0)
          A.throwExpression(A.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    set$___SinkTransformerStreamSubscription__transformerSink(___SinkTransformerStreamSubscription__transformerSink) {
      this.___SinkTransformerStreamSubscription__transformerSink = this.$ti._eval$1("EventSink<1>")._as(___SinkTransformerStreamSubscription__transformerSink);
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._BoundSinkStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4, t5, subscription,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._rest[1];
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t5 = t1._eval$1("@<1>")._bind$1(t2);
      subscription = new A._SinkTransformerStreamSubscription(A._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), A._BufferingStreamSubscription__registerErrorHandler(t3, onError), A._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t5._eval$1("_SinkTransformerStreamSubscription<1,2>"));
      subscription.set$___SinkTransformerStreamSubscription__transformerSink(t5._eval$1("EventSink<1>")._as(this._sinkMapper.call$1(new A._EventSinkWrapper(subscription, t1._eval$1("_EventSinkWrapper<2>")))));
      subscription.set$_subscription(this._async$_stream.listen$3$onDone$onError(subscription.get$_async$_handleData(), subscription.get$_handleDone(), subscription.get$_async$_handleError()));
      return subscription;
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._ZoneFunction.prototype = {};
  A._RunNullaryZoneFunction.prototype = {};
  A._RunUnaryZoneFunction.prototype = {};
  A._RunBinaryZoneFunction.prototype = {};
  A._RegisterNullaryZoneFunction.prototype = {};
  A._RegisterUnaryZoneFunction.prototype = {};
  A._RegisterBinaryZoneFunction.prototype = {};
  A._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  A._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  A._Zone.prototype = {
    _processUncaughtError$3(zone, error, stackTrace) {
      var implZone, handler, parentDelegate, parentZone, currentZone, e, s, implementation, t1, exception;
      type$.StackTrace._as(stackTrace);
      implementation = this.get$_handleUncaughtError();
      implZone = implementation.zone;
      if (implZone === B.C__RootZone) {
        A._rootHandleError(error, stackTrace);
        return;
      }
      handler = implementation.$function;
      parentDelegate = implZone.get$_parentDelegate();
      t1 = implZone.get$parent();
      t1.toString;
      parentZone = t1;
      currentZone = $.Zone__current;
      try {
        $.Zone__current = parentZone;
        handler.call$5(implZone, parentDelegate, zone, error, stackTrace);
        $.Zone__current = currentZone;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current = currentZone;
        t1 = error === e ? stackTrace : s;
        parentZone._processUncaughtError$3(implZone, e, t1);
      }
    },
    $isZone: 1
  };
  A._CustomZone.prototype = {
    get$_delegate() {
      var t1 = this._delegateCache;
      return t1 == null ? this._delegateCache = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      return this.parent.get$_delegate();
    },
    get$errorZone() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        this.runUnary$2$2(f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        this.runBinary$3$3(f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._CustomZone_bindCallback_closure(this, this.registerCallback$1$1($R._eval$1("0()")._as(f), $R), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1($R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $R, $T), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(type$.void_Function._as(f), type$.void));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._CustomZone_bindUnaryCallbackGuarded_closure(this, this.registerUnaryCallback$2$1($T._eval$1("~(0)")._as(f), type$.void, $T), $T);
    },
    $index(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2(error, stackTrace) {
      this._processUncaughtError$3(this, error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(f);
      implementation = this._run;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      implementation = this._runUnary;
      t1 = implementation.zone;
      return implementation.$function.call$2$5(t1, t1.get$_parentDelegate(), this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      implementation = this._runBinary;
      t1 = implementation.zone;
      return implementation.$function.call$3$6(t1, t1.get$_parentDelegate(), this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(callback, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(callback);
      implementation = this._registerCallback;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, callback, $R);
    },
    registerUnaryCallback$2$1(callback, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(callback);
      implementation = this._registerUnaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$2$4(t1, t1.get$_parentDelegate(), this, callback, $R, $T);
    },
    registerBinaryCallback$3$1(callback, $R, T1, T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(callback);
      implementation = this._registerBinaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$3$4(t1, t1.get$_parentDelegate(), this, callback, $R, T1, T2);
    },
    errorCallback$2(error, stackTrace) {
      var implementation, implementationZone;
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", type$.Object);
      implementation = this._errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === B.C__RootZone)
        return null;
      return implementation.$function.call$5(implementationZone, implementationZone.get$_parentDelegate(), this, error, stackTrace);
    },
    scheduleMicrotask$1(f) {
      var implementation, t1;
      type$.void_Function._as(f);
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, f);
    },
    createPeriodicTimer$2(duration, f) {
      var implementation, t1;
      type$.void_Function_Timer._as(f);
      implementation = this._createPeriodicTimer;
      t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, duration, f);
    },
    print$1(line) {
      var implementation = this._print,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, line);
    },
    set$_handleUncaughtError(_handleUncaughtError) {
      this._handleUncaughtError = type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace._as(_handleUncaughtError);
    },
    get$_run() {
      return this._run;
    },
    get$_runUnary() {
      return this._runUnary;
    },
    get$_runBinary() {
      return this._runBinary;
    },
    get$_registerCallback() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask() {
      return this._scheduleMicrotask;
    },
    get$_createTimer() {
      return this._createTimer;
    },
    get$_createPeriodicTimer() {
      return this._createPeriodicTimer;
    },
    get$_print() {
      return this._print;
    },
    get$_fork() {
      return this._fork;
    },
    get$_handleUncaughtError() {
      return this._handleUncaughtError;
    },
    get$parent() {
      return this.parent;
    },
    get$_async$_map() {
      return this._async$_map;
    }
  };
  A._CustomZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.registered);
    },
    $signature: 0
  };
  A._CustomZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.registered, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._rootHandleError_closure.prototype = {
    call$0() {
      var error = type$.Object._as(A.wrapException(this.error));
      error.stack = this.stackTrace.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    get$_run() {
      return B._RunNullaryZoneFunction__RootZone__rootRun;
    },
    get$_runUnary() {
      return B._RunUnaryZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary() {
      return B._RunBinaryZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback() {
      return B._RegisterNullaryZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback() {
      return B._RegisterUnaryZoneFunction_Bqo;
    },
    get$_registerBinaryCallback() {
      return B._RegisterBinaryZoneFunction_kGu;
    },
    get$_errorCallback() {
      return B._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask() {
      return B._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer() {
      return B._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer() {
      return B._ZoneFunction_3bB;
    },
    get$_print() {
      return B._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork() {
      return B._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError() {
      return B._ZoneFunction_NMc;
    },
    get$parent() {
      return null;
    },
    get$_async$_map() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception, t1, t2;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        A._rootHandleError(t1, t2);
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception, t1, t2;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        A._rootHandleError(t1, t2);
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception, t1, t2;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        A._rootHandleError(t1, t2);
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._RootZone_bindUnaryCallback_closure(this, $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index(_, key) {
      return null;
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      return A._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2(error, stackTrace) {
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    createPeriodicTimer$2(duration, f) {
      return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(f));
    },
    print$1(line) {
      A.printString(line);
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.f, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A.runZonedGuarded_closure.prototype = {
    call$5($self, $parent, zone, error, stackTrace) {
      var e, s, exception, t2,
        t1 = type$.StackTrace;
      t1._as(stackTrace);
      try {
        this.parentZone.runBinary$3$3(this.onError, error, stackTrace, type$.void, type$.Object, t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t2 = $parent._delegationTarget;
        if (e === error)
          t2._processUncaughtError$3(zone, error, stackTrace);
        else
          t2._processUncaughtError$3(zone, type$.Object._as(e), t1._as(s));
      }
    },
    $signature: 133
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$keys() {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A._HashMapKeyIterable(this, t1._eval$1("_HashMapKeyIterable<1>")), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        }
      }
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string" && key !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, key);
      else if (typeof key == "number" && (key & 1073741823) === key)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1(key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._collection$_keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(t2._as(key), t1._as(_this.$index(0, key)));
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _collection$_removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = A._instanceType(this)._rest[1]._as(A._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (A.boolConversionCheck(J.$eq$(bucket[i], key)))
          return i;
      return -1;
    }
  };
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      return t2._rest[1]._as(t1.$index(0, t2._precomputed1._as(each)));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$isEmpty(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (A.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 135
  };
  A.HashMap_HashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 19
  };
  A.IterableBase.prototype = {};
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 19
  };
  A.LinkedList.prototype = {
    add$1(_, entry) {
      this.$ti._precomputed1._as(entry);
      this._insertBefore$3$updateFirst(this._collection$_first, entry, false);
    },
    remove$1(_, entry) {
      this.$ti._precomputed1._as(entry);
      if (entry._list !== this)
        return false;
      this._unlink$1(entry);
      return true;
    },
    contains$1(_, entry) {
      return false;
    },
    get$iterator(_) {
      var _this = this;
      return new A._LinkedListIterator(_this, _this._modificationCount, _this._collection$_first, _this.$ti._eval$1("_LinkedListIterator<1>"));
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$first(_) {
      var t1;
      if (this._collection$_length === 0)
        throw A.wrapException(A.StateError$("No such element"));
      t1 = this._collection$_first;
      t1.toString;
      return t1;
    },
    get$single(_) {
      var t1 = this._collection$_length;
      if (t1 === 0)
        throw A.wrapException(A.StateError$("No such element"));
      if (t1 > 1)
        throw A.wrapException(A.StateError$("Too many elements"));
      t1 = this._collection$_first;
      t1.toString;
      return t1;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    _insertBefore$3$updateFirst(entry, newEntry, updateFirst) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("1?")._as(entry);
      t1._precomputed1._as(newEntry);
      if (newEntry._list != null)
        throw A.wrapException(A.StateError$("LinkedListEntry is already in a LinkedList"));
      ++_this._modificationCount;
      newEntry.set$_list(_this);
      if (_this._collection$_length === 0) {
        newEntry.set$_collection$_next(newEntry);
        newEntry.set$_collection$_previous(newEntry);
        _this.set$_collection$_first(newEntry);
        ++_this._collection$_length;
        return;
      }
      t1 = entry._collection$_previous;
      t1.toString;
      newEntry.set$_collection$_previous(t1);
      newEntry.set$_collection$_next(entry);
      t1.set$_collection$_next(newEntry);
      entry.set$_collection$_previous(newEntry);
      ++_this._collection$_length;
    },
    _unlink$1(entry) {
      var t1, next, _this = this, _null = null;
      _this.$ti._precomputed1._as(entry);
      ++_this._modificationCount;
      entry._collection$_next.set$_collection$_previous(entry._collection$_previous);
      t1 = entry._collection$_previous;
      next = entry._collection$_next;
      t1.set$_collection$_next(next);
      --_this._collection$_length;
      entry.set$_collection$_previous(_null);
      entry.set$_collection$_next(_null);
      entry.set$_list(_null);
      if (_this._collection$_length === 0)
        _this.set$_collection$_first(_null);
      else if (entry === _this._collection$_first)
        _this.set$_collection$_first(next);
    },
    set$_collection$_first(_first) {
      this._collection$_first = this.$ti._eval$1("1?")._as(_first);
    }
  };
  A._LinkedListIterator.prototype = {
    get$current() {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var _this = this,
        t1 = _this._list;
      if (_this._modificationCount !== t1._modificationCount)
        throw A.wrapException(A.ConcurrentModificationError$(_this));
      if (t1._collection$_length !== 0)
        t1 = _this._visitedFirst && _this._collection$_next === t1.get$first(t1);
      else
        t1 = true;
      if (t1) {
        _this.set$_collection$_current(null);
        return false;
      }
      _this._visitedFirst = true;
      _this.set$_collection$_current(_this._collection$_next);
      _this.set$_collection$_next(_this._collection$_next._collection$_next);
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_collection$_next(_next) {
      this._collection$_next = this.$ti._eval$1("1?")._as(_next);
    },
    $isIterator: 1
  };
  A.LinkedListEntry.prototype = {
    set$_list(_list) {
      this._list = A._instanceType(this)._eval$1("LinkedList<LinkedListEntry.E>?")._as(_list);
    },
    set$_collection$_next(_next) {
      this._collection$_next = A._instanceType(this)._eval$1("LinkedListEntry.E?")._as(_next);
    },
    set$_collection$_previous(_previous) {
      this._collection$_previous = A._instanceType(this)._eval$1("LinkedListEntry.E?")._as(_previous);
    }
  };
  A.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    get$single(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (this.get$length(receiver) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(J.$eq$(this.$index(receiver, i), element)))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListMixin.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!A.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return false;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListMixin.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListMixin.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1(receiver, iterable) {
      var i, t1;
      A.instanceType(receiver)._eval$1("Iterable<ListMixin.E>")._as(iterable);
      i = this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        this.add$1(receiver, t1.get$current());
        ++i;
      }
    },
    remove$1(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (A.boolConversionCheck(J.$eq$(this.$index(receiver, i), element))) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
      return false;
    },
    _closeGap$2(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListMixin.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListMixin.E,ListMixin.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListMixin__compareAny$closure() : compare;
      A.Sort_sort(receiver, t2, t1._eval$1("ListMixin.E"));
    },
    $add(receiver, other) {
      var t1 = A.instanceType(receiver);
      t1._eval$1("List<ListMixin.E>")._as(other);
      t1 = A.List_List$of(receiver, true, t1._eval$1("ListMixin.E"));
      B.JSArray_methods.addAll$1(t1, other);
      return t1;
    },
    sublist$2(receiver, start, end) {
      var listLength = this.get$length(receiver);
      A.RangeError_checkValidRange(start, end, listLength);
      return A.List_List$from(this.getRange$2(receiver, start, end), true, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var i,
        t1 = A.instanceType(receiver);
      fill = t1._eval$1("ListMixin.E")._as(t1._eval$1("ListMixin.E?")._as(fill));
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 20
  };
  A.MapMixin.prototype = {
    forEach$1(_, action) {
      var t2, key,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        action.call$2(key, t1._as(this.$index(0, key)));
      }
    },
    updateAll$1(update) {
      var t2, key, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapMixin.V(MapMixin.K,MapMixin.V)")._as(update);
      for (t2 = _this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        _this.$indexSet(0, key, update.call$2(key, t1._as(_this.$index(0, key))));
      }
    },
    get$entries() {
      return this.get$keys().map$1$1(0, new A.MapMixin_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapMixin.K,MapMixin.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        entry = transform.call$2(key, t1._as(this.$index(0, key)));
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    addEntries$1(newEntries) {
      var t1, t2;
      A._instanceType(this)._eval$1("Iterable<MapEntry<MapMixin.K,MapMixin.V>>")._as(newEntries);
      for (t1 = newEntries.get$iterator(newEntries); t1.moveNext$0();) {
        t2 = t1.get$current();
        this.$indexSet(0, t2.key, t2.value);
      }
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapMixin_entries_closure.prototype = {
    call$1(key) {
      var t3,
        t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapMixin.K")._as(key);
      t3 = t2._eval$1("MapMixin.V");
      return new A.MapEntry(key, t3._as(t1.$index(0, key)), t2._eval$1("@<MapMixin.K>")._bind$1(t3)._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  A._UnmodifiableMapMixin.prototype = {};
  A.MapView.prototype = {
    $index(_, key) {
      return this._map.$index(0, key);
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, A._instanceType(this)._eval$1("~(MapView.K,MapView.V)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._map;
      return t1.get$isNotEmpty(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys() {
      return this._map.get$keys();
    },
    toString$0(_) {
      return this._map.toString$0(0);
    },
    get$values() {
      return this._map.get$values();
    },
    get$entries() {
      return this._map.get$entries();
    },
    map$2$1(_, transform, K2, V2) {
      return this._map.map$2$1(0, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapView.K,MapView.V)")._as(transform), K2, V2);
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.ListQueue.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty(_) {
      return this._head === this._tail;
    },
    get$length(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first(_) {
      var t2, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = _this._table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      return _this.$ti._precomputed1._as(t2[t1]);
    },
    get$single(_) {
      var t1, t2, _this = this;
      if (_this._head === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      t1 = _this._table;
      t2 = _this._head;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      return _this.$ti._precomputed1._as(t1[t2]);
    },
    elementAt$1(_, index) {
      var t1, t2, t3, _this = this;
      A.RangeError_checkValidIndex(index, _this, null, null);
      t1 = _this._table;
      t2 = t1.length;
      t3 = (_this._head + index & t2 - 1) >>> 0;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
      return _this.$ti._precomputed1._as(t1[t3]);
    },
    toList$1$growable(_, growable) {
      var t1, list, i, t2, t3, _this = this,
        mask = _this._table.length - 1,
        $length = (_this._tail - _this._head & mask) >>> 0;
      if ($length === 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      t1 = _this.$ti._precomputed1;
      list = A.List_List$filled($length, _this.get$first(_this), true, t1);
      for (i = 0; i < $length; ++i) {
        t2 = _this._table;
        t3 = (_this._head + i & mask) >>> 0;
        if (!(t3 < t2.length))
          return A.ioore(t2, t3);
        B.JSArray_methods.$indexSet(list, i, t1._as(t2[t3]));
      }
      return list;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(_, value) {
      this._collection$_add$1(this.$ti._precomputed1._as(value));
    },
    addAll$1(_, elements) {
      var addCount, $length, t2, t3, t4, newTable, endSpace, preSpace, _this = this,
        t1 = _this.$ti;
      t1._eval$1("Iterable<1>")._as(elements);
      if (t1._eval$1("List<1>")._is(elements)) {
        addCount = J.get$length$asx(elements);
        $length = _this.get$length(_this);
        t2 = $length + addCount;
        t3 = _this._table;
        t4 = t3.length;
        if (t2 >= t4) {
          newTable = A.List_List$filled(A.ListQueue__nextPowerOf2(t2 + B.JSInt_methods._shrOtherPositive$1(t2, 1)), null, false, t1._eval$1("1?"));
          _this._tail = _this._writeToList$1(newTable);
          _this.set$_table(newTable);
          _this._head = 0;
          B.JSArray_methods.setRange$4(_this._table, $length, t2, elements, 0);
          _this._tail += addCount;
        } else {
          t1 = _this._tail;
          endSpace = t4 - t1;
          if (addCount < endSpace) {
            B.JSArray_methods.setRange$4(t3, t1, t1 + addCount, elements, 0);
            _this._tail += addCount;
          } else {
            preSpace = addCount - endSpace;
            B.JSArray_methods.setRange$4(t3, t1, t1 + endSpace, elements, 0);
            B.JSArray_methods.setRange$4(_this._table, 0, preSpace, elements, endSpace);
            _this._tail = preSpace;
          }
        }
        ++_this._modificationCount;
      } else
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          _this._collection$_add$1(t1.get$current());
    },
    clear$0(_) {
      var _this = this,
        i = _this._head;
      if (i !== _this._tail) {
        for (; i !== _this._tail; i = (i + 1 & _this._table.length - 1) >>> 0)
          B.JSArray_methods.$indexSet(_this._table, i, null);
        _this._head = _this._tail = 0;
        ++_this._modificationCount;
      }
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      result = _this.$ti._precomputed1._as(t2[t1]);
      B.JSArray_methods.$indexSet(t2, t1, null);
      _this._head = (_this._head + 1 & _this._table.length - 1) >>> 0;
      return result;
    },
    _collection$_add$1(element) {
      var t2, t3, newTable, split, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(element);
      B.JSArray_methods.$indexSet(_this._table, _this._tail, element);
      t2 = _this._tail;
      t3 = _this._table.length;
      t2 = (t2 + 1 & t3 - 1) >>> 0;
      _this._tail = t2;
      if (_this._head === t2) {
        newTable = A.List_List$filled(t3 * 2, null, false, t1._eval$1("1?"));
        t1 = _this._table;
        t2 = _this._head;
        split = t1.length - t2;
        B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        B.JSArray_methods.setRange$4(newTable, split, split + _this._head, _this._table, 0);
        _this._head = 0;
        _this._tail = _this._table.length;
        _this.set$_table(newTable);
      }
      ++_this._modificationCount;
    },
    _writeToList$1(target) {
      var t1, t2, t3, $length, firstPartSize, _this = this;
      _this.$ti._eval$1("List<1?>")._as(target);
      t1 = _this._head;
      t2 = _this._tail;
      t3 = _this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        B.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this._tail, _this._table, 0);
        return _this._tail + firstPartSize;
      }
    },
    set$_table(_table) {
      this._table = this.$ti._eval$1("List<1?>")._as(_table);
    },
    $isQueue: 1
  };
  A._ListQueueIterator.prototype = {
    get$current() {
      return this.$ti._precomputed1._as(this._collection$_current);
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._collection$_end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (!(t2 < t3.length))
        return A.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._ListBase_Object_ListMixin.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$keys() {
      if (this._processed == null)
        return this._data.get$keys();
      return new A._JsonMapKeyIterable(this);
    },
    $indexSet(_, key, value) {
      var processed, original, _this = this;
      A._asString(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._data);
      if (keys == null)
        keys = this._data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        B.JSArray_methods.add$1(keys, "");
      else
        B.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      var t1 = this._convert$_parent;
      return t1.get$length(t1);
    },
    elementAt$1(_, index) {
      var t1 = this._convert$_parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._convert$_computeKeys$0();
        if (!(index >= 0 && index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator(_) {
      var t1 = this._convert$_parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._convert$_parent.containsKey$1(key);
    }
  };
  A._JsonDecoderSink.prototype = {
    close$0() {
      var t1, t2, _this = this;
      _this.super$_StringSinkConversionSink$close();
      t1 = _this._stringSink;
      t2 = t1._contents;
      t1._contents = "";
      t1 = _this._convert$_sink;
      t1.add$1(0, A._parseJson(t2.charCodeAt(0) == 0 ? t2 : t2, _this._reviver));
      t1.close$0();
    }
  };
  A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 38
  };
  A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 38
  };
  A.AsciiCodec.prototype = {
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    },
    get$encoder() {
      return B.AsciiEncoder_127;
    },
    get$decoder() {
      return B.AsciiDecoder_false_127;
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var $length, result, t1, i, codeUnit;
      A._asString(string);
      $length = A.RangeError_checkValidRange(0, null, string.length) - 0;
      result = new Uint8Array($length);
      for (t1 = ~this._subsetMask, i = 0; i < $length; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < $length))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    startChunkedConversion$1(sink) {
      var t1;
      type$.Sink_List_int._as(sink);
      t1 = sink instanceof A.ByteConversionSink ? sink : new A._ByteAdapterSink(sink);
      return new A._UnicodeSubsetEncoderSink(t1, this._subsetMask);
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetEncoderSink.prototype = {
    close$0() {
      this._convert$_sink.close$0();
    },
    addSlice$4(source, start, end, isLast) {
      var t1, i, codeUnit, t2;
      A.RangeError_checkValidRange(start, end, source.length);
      for (t1 = ~this._subsetMask, i = start; i < end; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(source, i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$("Source contains invalid character with code point: " + codeUnit + ".", null));
      }
      t1 = this._convert$_sink;
      t2 = new A.CodeUnits(source);
      t1.add$1(0, t2.sublist$2(t2, start, end));
      if (isLast)
        t1.close$0();
    }
  };
  A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
      var t1, end, t2, i, byte;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      end = A.RangeError_checkValidRange(0, null, t1.get$length(bytes));
      for (t2 = ~this._subsetMask, i = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        if ((byte & t2) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw A.wrapException(A.FormatException$("Invalid value in input: " + A.S(byte), null, null));
          return this._convertInvalid$3(bytes, 0, end);
        }
      }
      return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
      var t1, t2, i, t3, value;
      type$.List_int._as(bytes);
      for (t1 = ~this._subsetMask, t2 = J.getInterceptor$asx(bytes), i = start, t3 = ""; i < end; ++i) {
        value = t2.$index(bytes, i);
        t3 += A.Primitives_stringFromCharCode((value & t1) >>> 0 !== 0 ? 65533 : value);
      }
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_List_int._as(stream));
    }
  };
  A.AsciiDecoder.prototype = {
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      if (this._allowInvalid)
        return new A._ErrorHandlingAsciiDecoderSink(stringSink.asUtf8Sink$1(false));
      else
        return new A._SimpleAsciiDecoderSink(stringSink);
    }
  };
  A._ErrorHandlingAsciiDecoderSink.prototype = {
    close$0() {
      this._utf8Sink.close$0();
    },
    add$1(_, source) {
      type$.List_int._as(source);
      this.addSlice$4(source, 0, J.get$length$asx(source), false);
    },
    addSlice$4(source, start, end, isLast) {
      var t1, t2, i, t3;
      type$.List_int._as(source);
      t1 = J.getInterceptor$asx(source);
      A.RangeError_checkValidRange(start, end, t1.get$length(source));
      for (t2 = this._utf8Sink, i = start; i < end; ++i) {
        t3 = t1.$index(source, i);
        if (typeof t3 !== "number")
          return t3.$and();
        if ((t3 & 4294967168) >>> 0 !== 0) {
          if (i > start)
            t2.addSlice$4(source, start, i, false);
          t2.add$1(0, B.List_239_191_189);
          start = i + 1;
        }
      }
      if (start < end)
        t2.addSlice$4(source, start, end, isLast);
      else if (isLast)
        t2.close$0();
    }
  };
  A._SimpleAsciiDecoderSink.prototype = {
    close$0() {
      this._convert$_sink.close$0();
    },
    add$1(_, source) {
      var t1, i, t2;
      type$.List_int._as(source);
      for (t1 = J.getInterceptor$asx(source), i = 0; i < t1.get$length(source); ++i) {
        t2 = t1.$index(source, i);
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 4294967168) >>> 0 !== 0)
          throw A.wrapException(A.FormatException$("Source contains non-ASCII bytes.", null, null));
      }
      this._convert$_sink.add$1(0, A.String_String$fromCharCodes(source, 0, null));
    },
    addSlice$4(source, start, end, isLast) {
      var $length;
      type$.List_int._as(source);
      $length = source.length;
      A.RangeError_checkValidRange(start, end, $length);
      if (start < end)
        this.add$1(0, start !== 0 || end !== $length ? B.NativeUint8List_methods.sublist$2(source, start, end) : source);
      if (isLast)
        this._convert$_sink.close$0();
    }
  };
  A.Base64Codec.prototype = {
    get$encoder() {
      return B.C_Base64Encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet, t1, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t2, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = A.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = B.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = A.hexDigitValue(B.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = A.hexDigitValue(B.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t1))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = B.JSString_methods.codeUnitAt$1(string$.ABCDEF, value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t2 = buffer == null ? null : buffer._contents.length;
                if (t2 == null)
                  t2 = 0;
                firstPadding = t2 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t3 = t2._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t2._contents = t3 + A.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += B.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      t1 = new A._Base64Encoder(string$.ABCDEF).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    },
    startChunkedConversion$1(sink) {
      var t1,
        _s64_ = string$.ABCDEF;
      type$.Sink_String._as(sink);
      if (type$.StringConversionSink._is(sink)) {
        t1 = sink.asUtf8Sink$1(false);
        return new A._Utf8Base64EncoderSink(t1, new A._Base64Encoder(_s64_));
      }
      return new A._AsciiBase64EncoderSink(sink, new A._BufferCachingBase64Encoder(_s64_));
    }
  };
  A._Base64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._convert$_state = A._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A._BufferCachingBase64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      var buffer = this.bufferCache;
      if (buffer == null || buffer.length < bufferLength)
        buffer = this.bufferCache = new Uint8Array(bufferLength);
      return A.NativeUint8List_NativeUint8List$view(buffer.buffer, buffer.byteOffset, bufferLength);
    }
  };
  A._Base64EncoderSink.prototype = {
    add$1(_, source) {
      type$.List_int._as(source);
      this._convert$_add$4(source, 0, J.get$length$asx(source), false);
    },
    close$0() {
      this._convert$_add$4(B.List_empty1, 0, 0, true);
    },
    addSlice$4(source, start, end, isLast) {
      type$.List_int._as(source);
      A.RangeError_checkValidRange(start, end, source.length);
      this._convert$_add$4(source, start, end, isLast);
    }
  };
  A._AsciiBase64EncoderSink.prototype = {
    _convert$_add$4(source, start, end, isLast) {
      var buffer = this._encoder.encode$4(type$.List_int._as(source), start, end, isLast);
      if (buffer != null)
        this._convert$_sink.add$1(0, A.String_String$fromCharCodes(buffer, 0, null));
      if (isLast)
        this._convert$_sink.close$0();
    }
  };
  A._Utf8Base64EncoderSink.prototype = {
    _convert$_add$4(source, start, end, isLast) {
      var buffer = this._encoder.encode$4(type$.List_int._as(source), start, end, isLast);
      if (buffer != null)
        this._convert$_sink.addSlice$4(buffer, 0, buffer.length, isLast);
    }
  };
  A.ByteConversionSink.prototype = {};
  A.ByteConversionSinkBase.prototype = {
    addSlice$4(chunk, start, end, isLast) {
      this.add$1(0, B.NativeUint8List_methods.sublist$2(type$.List_int._as(chunk), start, end));
      if (isLast)
        this.close$0();
    }
  };
  A._ByteAdapterSink.prototype = {
    add$1(_, chunk) {
      this._convert$_sink.add$1(0, type$.List_int._as(chunk));
    },
    close$0() {
      this._convert$_sink.close$0();
    }
  };
  A.ChunkedConversionSink.prototype = {$isSink: 1};
  A._ConverterStreamEventSink.prototype = {
    add$1(_, o) {
      this._chunkedSink.add$1(0, this.$ti._precomputed1._as(o));
    },
    addError$2(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      this._eventSink.addError$2(error, stackTrace);
    },
    close$0() {
      this._chunkedSink.close$0();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A.Codec.prototype = {
    encode$1(input) {
      A._instanceType(this)._eval$1("Codec.S")._as(input);
      return this.get$encoder().convert$1(input);
    }
  };
  A._FusedCodec.prototype = {
    get$encoder() {
      return this._convert$_first.get$encoder().fuse$1$1(B.C_Base64Encoder, this.$ti._rest[2]);
    }
  };
  A.Converter.prototype = {
    fuse$1$1(other, TT) {
      var t1 = A._instanceType(this);
      return new A._FusedConverter(this, t1._bind$1(TT)._eval$1("Converter<Converter.T,1>")._as(other), t1._eval$1("@<Converter.S>")._bind$1(t1._eval$1("Converter.T"))._bind$1(TT)._eval$1("_FusedConverter<1,2,3>"));
    },
    startChunkedConversion$1(sink) {
      A._instanceType(this)._eval$1("Sink<Converter.T>")._as(sink);
      throw A.wrapException(A.UnsupportedError$("This converter does not support chunked conversions: " + this.toString$0(0)));
    },
    bind$1(stream) {
      var t1 = A._instanceType(this);
      return new A._BoundSinkStream(new A.Converter_bind_closure(this), t1._eval$1("Stream<Converter.S>")._as(stream), type$.$env_1_1_dynamic._bind$1(t1._eval$1("Converter.T"))._eval$1("_BoundSinkStream<1,2>"));
    }
  };
  A.Converter_bind_closure.prototype = {
    call$1(sink) {
      return new A._ConverterStreamEventSink(sink, this.$this.startChunkedConversion$1(sink), type$._ConverterStreamEventSink_dynamic_dynamic);
    },
    $signature: 54
  };
  A._FusedConverter.prototype = {
    convert$1(input) {
      return this._second.convert$1(this._convert$_first.convert$1(this.$ti._precomputed1._as(input)));
    },
    startChunkedConversion$1(sink) {
      return this._convert$_first.startChunkedConversion$1(this._second.startChunkedConversion$1(this.$ti._eval$1("Sink<3>")._as(sink)));
    }
  };
  A.Encoding.prototype = {
    decodeStream$1(byteStream) {
      type$.Stream_List_int._as(byteStream);
      return this.get$decoder().bind$1(byteStream).fold$1$2(0, new A.StringBuffer(""), new A.Encoding_decodeStream_closure(), type$.StringBuffer).then$1$1(new A.Encoding_decodeStream_closure0(), type$.String);
    }
  };
  A.Encoding_decodeStream_closure.prototype = {
    call$2(buffer, string) {
      type$.StringBuffer._as(buffer);
      buffer._contents += A._asString(string);
      return buffer;
    },
    $signature: 55
  };
  A.Encoding_decodeStream_closure0.prototype = {
    call$1(buffer) {
      var t1 = type$.StringBuffer._as(buffer)._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $signature: 56
  };
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    decode$1(source) {
      var t1;
      A._asString(source);
      t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$1(value) {
      var t1 = A._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder() {
      return B.JsonEncoder_null;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonEncoder.prototype = {
    convert$1(object) {
      var t1,
        output = new A.StringBuffer("");
      A._JsonStringStringifier_printOn(object, output, this._toEncodable, null);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    startChunkedConversion$1(sink) {
      var t1;
      type$.Sink_String._as(sink);
      if (sink instanceof A._Utf8EncoderSink)
        return new A._JsonUtf8EncoderSink(sink._convert$_sink, A.JsonUtf8Encoder__utf8Encode(null), this._toEncodable, 256);
      t1 = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      return new A._JsonEncoderSink(null, this._toEncodable, t1);
    },
    fuse$1$1(other, $T) {
      $T._eval$1("Converter<String,0>")._as(other);
      return this.super$Converter$fuse(other, $T);
    }
  };
  A._JsonEncoderSink.prototype = {
    add$1(_, o) {
      var stringSink, _this = this;
      if (_this._isDone)
        throw A.wrapException(A.StateError$("Only one call to add allowed"));
      _this._isDone = true;
      stringSink = _this._convert$_sink.asStringSink$0();
      A._JsonStringStringifier_printOn(o, stringSink, _this._toEncodable, _this._indent);
      stringSink.close$0();
    },
    close$0() {
    }
  };
  A._JsonUtf8EncoderSink.prototype = {
    _convert$_addChunk$3(chunk, start, end) {
      this._convert$_sink.addSlice$4(chunk, start, end, false);
    },
    add$1(_, object) {
      var _this = this;
      if (_this._isDone)
        throw A.wrapException(A.StateError$("Only one call to add allowed"));
      _this._isDone = true;
      A._JsonUtf8Stringifier_stringify(object, _this._indent, _this._toEncodable, _this._bufferSize, _this.get$_convert$_addChunk());
      _this._convert$_sink.close$0();
    },
    close$0() {
      if (!this._isDone) {
        this._isDone = true;
        this._convert$_sink.close$0();
      }
    }
  };
  A.JsonDecoder.prototype = {
    startChunkedConversion$1(sink) {
      return new A._JsonDecoderSink(this._reviver, sink, new A.StringBuffer(""));
    },
    convert$1(input) {
      return A._parseJson(A._asString(input), this._reviver);
    }
  };
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = B.JSString_methods._codeUnitAt$1(s, i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (B.JSString_methods._codeUnitAt$1(s, t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (B.JSString_methods.codeUnitAt$1(s, t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 20
  };
  A._JsonPrettyPrintMixin.prototype = {
    writeList$1(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        _this.writeString$1("\n");
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t1; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('": ');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("\n");
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 20
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._convert$_sink;
      return t1 instanceof A.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1(number) {
      this._convert$_sink.write$1(B.JSNumber_methods.toString$0(number));
    },
    writeString$1(string) {
      this._convert$_sink.write$1(string);
    },
    writeStringSlice$3(string, start, end) {
      this._convert$_sink.write$1(B.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1(charCode) {
      this._convert$_sink.writeCharCode$1(charCode);
    }
  };
  A._JsonUtf8Stringifier.prototype = {
    get$_partialResult() {
      return null;
    },
    writeNumber$1(number) {
      this.writeAsciiString$1(B.JSNumber_methods.toString$0(number));
    },
    writeAsciiString$1(string) {
      var t1, i;
      for (t1 = string.length, i = 0; i < t1; ++i)
        this.writeByte$1(B.JSString_methods._codeUnitAt$1(string, i));
    },
    writeString$1(string) {
      this.writeStringSlice$3(string, 0, string.length);
    },
    writeStringSlice$3(string, start, end) {
      var i, char, i0, nextChar, _this = this;
      for (i = start; i < end; ++i) {
        char = B.JSString_methods._codeUnitAt$1(string, i);
        if (char <= 127)
          _this.writeByte$1(char);
        else {
          if ((char & 63488) === 55296) {
            if (char < 56320 && i + 1 < end) {
              i0 = i + 1;
              nextChar = B.JSString_methods._codeUnitAt$1(string, i0);
              if ((nextChar & 64512) === 56320) {
                _this.writeFourByteCharCode$1(65536 + ((char & 1023) << 10) + (nextChar & 1023));
                i = i0;
                continue;
              }
            }
            _this.writeMultiByteCharCode$1(65533);
            continue;
          }
          _this.writeMultiByteCharCode$1(char);
        }
      }
    },
    writeCharCode$1(charCode) {
      if (charCode <= 127) {
        this.writeByte$1(charCode);
        return;
      }
      this.writeMultiByteCharCode$1(charCode);
    },
    writeMultiByteCharCode$1(charCode) {
      var _this = this;
      if (charCode <= 2047) {
        _this.writeByte$1((charCode >>> 6 | 192) >>> 0);
        _this.writeByte$1(charCode & 63 | 128);
        return;
      }
      if (charCode <= 65535) {
        _this.writeByte$1((charCode >>> 12 | 224) >>> 0);
        _this.writeByte$1(charCode >>> 6 & 63 | 128);
        _this.writeByte$1(charCode & 63 | 128);
        return;
      }
      _this.writeFourByteCharCode$1(charCode);
    },
    writeFourByteCharCode$1(charCode) {
      var _this = this;
      _this.writeByte$1((charCode >>> 18 | 240) >>> 0);
      _this.writeByte$1(charCode >>> 12 & 63 | 128);
      _this.writeByte$1(charCode >>> 6 & 63 | 128);
      _this.writeByte$1(charCode & 63 | 128);
    },
    writeByte$1(byte) {
      var t0, _this = this,
        t1 = _this.index,
        t2 = _this.buffer;
      if (t1 === t2.length) {
        _this.addChunk.call$3(t2, 0, t1);
        t1 = _this.buffer = new Uint8Array(_this.bufferSize);
        t2 = _this.index = 0;
      } else {
        t0 = t2;
        t2 = t1;
        t1 = t0;
      }
      _this.index = t2 + 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = byte;
    }
  };
  A._JsonUtf8StringifierPretty.prototype = {
    writeIndentation$1(count) {
      var char, t2, end, t3, i, _this = this,
        indent = _this.indent,
        t1 = J.getInterceptor$asx(indent),
        indentLength = t1.get$length(indent);
      if (indentLength === 1) {
        char = t1.$index(indent, 0);
        for (; count > 0;) {
          _this.writeByte$1(char);
          --count;
        }
        return;
      }
      for (; count > 0;) {
        --count;
        t2 = _this.index;
        end = t2 + indentLength;
        t3 = _this.buffer;
        if (end <= t3.length) {
          B.NativeUint8List_methods.setRange$3(t3, t2, end, indent);
          _this.index = end;
        } else
          for (i = 0; i < indentLength; ++i)
            _this.writeByte$1(t1.$index(indent, i));
      }
    }
  };
  A.Latin1Codec.prototype = {
    get$encoder() {
      return B.Latin1Encoder_255;
    },
    get$decoder() {
      return B.Latin1Decoder_false_255;
    }
  };
  A.Latin1Encoder.prototype = {};
  A.Latin1Decoder.prototype = {
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      if (!this._allowInvalid)
        return new A._Latin1DecoderSink(stringSink);
      return new A._Latin1AllowInvalidDecoderSink(stringSink);
    }
  };
  A._Latin1DecoderSink.prototype = {
    close$0() {
      this._convert$_sink.close$0();
      this._convert$_sink = null;
    },
    add$1(_, source) {
      type$.List_int._as(source);
      this.addSlice$4(source, 0, J.get$length$asx(source), false);
    },
    _addSliceToSink$4(source, start, end, isLast) {
      var t1;
      type$.List_int._as(source);
      t1 = this._convert$_sink;
      t1.toString;
      t1.add$1(0, A.String_String$fromCharCodes(source, start, end));
      if (isLast) {
        this._convert$_sink.close$0();
        this._convert$_sink = null;
      }
    },
    addSlice$4(source, start, end, isLast) {
      type$.List_int._as(source);
      A.RangeError_checkValidRange(start, end, J.get$length$asx(source));
      if (start === end)
        return;
      if (!type$.Uint8List._is(source))
        A._Latin1DecoderSink__checkValidLatin1(source, start, end);
      this._addSliceToSink$4(source, start, end, isLast);
    }
  };
  A._Latin1AllowInvalidDecoderSink.prototype = {
    addSlice$4(source, start, end, isLast) {
      var t2, i, char, t3, _this = this,
        t1 = type$.List_int;
      t1._as(source);
      t2 = J.getInterceptor$asx(source);
      A.RangeError_checkValidRange(start, end, t2.get$length(source));
      for (i = start; i < end; ++i) {
        char = t2.$index(source, i);
        if (char > 255 || char < 0) {
          if (i > start) {
            t3 = _this._convert$_sink;
            t3.toString;
            t3.add$1(0, A.String_String$fromCharCodes(source, start, i));
          }
          t1._as(B.List_65533);
          t3 = _this._convert$_sink;
          t3.toString;
          t3.add$1(0, A.String_String$fromCharCodes(B.List_65533, 0, 1));
          start = i + 1;
        }
      }
      if (start < end)
        _this._addSliceToSink$4(source, start, end, isLast);
      if (isLast) {
        _this._convert$_sink.close$0();
        _this._convert$_sink = null;
      }
    }
  };
  A.LineSplitter.prototype = {
    bind$1(stream) {
      return new A._BoundSinkStream(new A.LineSplitter_bind_closure(), type$.Stream_String._as(stream), type$._BoundSinkStream_dynamic_String);
    }
  };
  A.LineSplitter_bind_closure.prototype = {
    call$1(sink) {
      type$.EventSink_String._as(sink);
      return new A._LineSplitterEventSink(sink, new A._StringAdapterSink(sink));
    },
    $signature: 58
  };
  A._LineSplitterSink.prototype = {
    addSlice$4(chunk, start, end, isLast) {
      var carry, _this = this;
      end = A.RangeError_checkValidRange(start, end, chunk.length);
      if (start >= end) {
        if (isLast)
          _this.close$0();
        return;
      }
      carry = _this._carry;
      if (carry != null) {
        chunk = carry + B.JSString_methods.substring$2(chunk, start, end);
        end = chunk.length;
        _this._carry = null;
        start = 0;
      } else if (_this._skipLeadingLF) {
        if (B.JSString_methods._codeUnitAt$1(chunk, start) === 10)
          ++start;
        _this._skipLeadingLF = false;
      }
      _this._addLines$3(chunk, start, end);
      if (isLast)
        _this.close$0();
    },
    close$0() {
      var _this = this,
        t1 = _this._carry;
      if (t1 != null) {
        _this._convert$_sink._convert$_sink.add$1(0, t1);
        _this._carry = null;
      }
      _this._convert$_sink._convert$_sink.close$0();
    },
    _addLines$3(lines, start, end) {
      var t1, i, sliceStart, char, char0;
      for (t1 = this._convert$_sink._convert$_sink, i = start, sliceStart = i, char = 0; i < end; ++i, char = char0) {
        char0 = B.JSString_methods._codeUnitAt$1(lines, i);
        if (char0 !== 13) {
          if (char0 !== 10)
            continue;
          if (char === 13) {
            sliceStart = i + 1;
            continue;
          }
        }
        t1.add$1(0, B.JSString_methods.substring$2(lines, sliceStart, i));
        sliceStart = i + 1;
      }
      if (sliceStart < end)
        this._carry = B.JSString_methods.substring$2(lines, sliceStart, end);
      else
        this._skipLeadingLF = char === 13;
    }
  };
  A._LineSplitterEventSink.prototype = {
    addError$2(o, stackTrace) {
      this._eventSink.addError$2(o, stackTrace);
    },
    $isEventSink: 1
  };
  A._ClosableStringSink.prototype = {
    close$0() {
      this._callback.call$0();
    },
    writeCharCode$1(charCode) {
      this._convert$_sink._contents += A.Primitives_stringFromCharCode(charCode);
    },
    write$1(o) {
      this._convert$_sink._contents += o;
    },
    $isStringSink: 1
  };
  A._StringConversionSinkAsStringSinkAdapter.prototype = {
    close$0() {
      if (this._convert$_buffer._contents.length !== 0)
        this._flush$0();
      this._chunkedSink.close$0();
    },
    writeCharCode$1(charCode) {
      var t1 = this._convert$_buffer._contents += A.Primitives_stringFromCharCode(charCode);
      if (t1.length > 16)
        this._flush$0();
    },
    write$1(o) {
      if (this._convert$_buffer._contents.length !== 0)
        this._flush$0();
      this._chunkedSink.add$1(0, o);
    },
    _flush$0() {
      var t1 = this._convert$_buffer,
        t2 = t1._contents;
      t1._contents = "";
      this._chunkedSink.add$1(0, t2.charCodeAt(0) == 0 ? t2 : t2);
    },
    $isStringSink: 1
  };
  A.StringConversionSinkBase.prototype = {};
  A.StringConversionSinkMixin.prototype = {
    add$1(_, str) {
      A._asString(str);
      this.addSlice$4(str, 0, str.length, false);
    },
    asUtf8Sink$1(allowMalformed) {
      return new A._Utf8ConversionSink(new A._Utf8Decoder(allowMalformed), this, new A.StringBuffer(""));
    },
    asStringSink$0() {
      return new A._StringConversionSinkAsStringSinkAdapter(new A.StringBuffer(""), this);
    },
    $isStringConversionSink: 1,
    $isSink: 1
  };
  A._StringSinkConversionSink.prototype = {
    close$0() {
    },
    addSlice$4(str, start, end, isLast) {
      var t1, i;
      if (start !== 0 || end !== str.length)
        for (t1 = this._stringSink, i = start; i < end; ++i)
          t1._contents += A.Primitives_stringFromCharCode(B.JSString_methods._codeUnitAt$1(str, i));
      else
        this._stringSink._contents += str;
      if (isLast)
        this.close$0();
    },
    add$1(_, str) {
      this._stringSink._contents += A._asString(str);
    },
    asUtf8Sink$1(allowMalformed) {
      return new A._Utf8StringSinkAdapter(new A._Utf8Decoder(allowMalformed), this, this._stringSink);
    },
    asStringSink$0() {
      return new A._ClosableStringSink(this.get$close(), this._stringSink);
    }
  };
  A._StringAdapterSink.prototype = {
    add$1(_, str) {
      this._convert$_sink.add$1(0, A._asString(str));
    },
    addSlice$4(str, start, end, isLast) {
      var t1 = start === 0 && end === str.length,
        t2 = this._convert$_sink;
      if (t1)
        t2.add$1(0, str);
      else
        t2.add$1(0, B.JSString_methods.substring$2(str, start, end));
      if (isLast)
        t2.close$0();
    },
    close$0() {
      this._convert$_sink.close$0();
    }
  };
  A._Utf8StringSinkAdapter.prototype = {
    close$0() {
      this._decoder.flush$1(this._stringSink);
      this._convert$_sink.close$0();
    },
    add$1(_, chunk) {
      type$.List_int._as(chunk);
      this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(codeUnits, startIndex, endIndex, isLast) {
      this._stringSink._contents += this._decoder.convertGeneral$4(type$.List_int._as(codeUnits), startIndex, endIndex, false);
      if (isLast)
        this.close$0();
    }
  };
  A._Utf8ConversionSink.prototype = {
    close$0() {
      var t2, t3, accumulated,
        t1 = this._convert$_buffer;
      this._decoder.flush$1(t1);
      t2 = t1._contents;
      t3 = this._chunkedSink;
      if (t2.length !== 0) {
        accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
        t1._contents = "";
        t3.addSlice$4(accumulated, 0, accumulated.length, true);
      } else
        t3.close$0();
    },
    add$1(_, chunk) {
      type$.List_int._as(chunk);
      this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(chunk, startIndex, endIndex, isLast) {
      var accumulated, _this = this,
        t1 = _this._convert$_buffer,
        t2 = t1._contents += _this._decoder.convertGeneral$4(type$.List_int._as(chunk), startIndex, endIndex, false);
      if (t2.length !== 0) {
        accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
        _this._chunkedSink.addSlice$4(accumulated, 0, accumulated.length, isLast);
        t1._contents = "";
        return;
      }
      if (isLast)
        _this.close$0();
    }
  };
  A.Utf8Codec.prototype = {
    decode$1(codeUnits) {
      type$.List_int._as(codeUnits);
      return B.Utf8Decoder_false.convert$1(codeUnits);
    },
    get$encoder() {
      return B.C_Utf8Encoder;
    },
    get$decoder() {
      return B.Utf8Decoder_false;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var end, $length, t1, encoder;
      A._asString(string);
      end = A.RangeError_checkValidRange(0, null, string.length);
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        B.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
    startChunkedConversion$1(sink) {
      var t1;
      type$.Sink_List_int._as(sink);
      t1 = sink instanceof A.ByteConversionSink ? sink : new A._ByteAdapterSink(sink);
      return new A._Utf8EncoderSink(t1, new Uint8Array(1024));
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (B.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = B.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, B.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A._Utf8EncoderSink.prototype = {
    close$0() {
      if (this._carry !== 0) {
        this.addSlice$4("", 0, 0, true);
        return;
      }
      this._convert$_sink.close$0();
    },
    addSlice$4(str, start, end, isLast) {
      var t1, t2, t3, t4, isLastSlice, _this = this;
      _this._bufferIndex = 0;
      t1 = start === end;
      if (t1 && !isLast)
        return;
      t2 = _this._carry;
      if (t2 !== 0) {
        if (_this._writeSurrogate$2(t2, !t1 ? B.JSString_methods._codeUnitAt$1(str, start) : 0))
          ++start;
        _this._carry = 0;
      }
      t1 = _this._convert$_sink;
      t2 = _this._convert$_buffer;
      t3 = end - 1;
      t4 = t2.length - 3;
      do {
        start = _this._fillBuffer$3(str, start, end);
        isLastSlice = isLast && start === end;
        if (start === t3 && (B.JSString_methods._codeUnitAt$1(str, start) & 64512) === 55296) {
          if (isLast && _this._bufferIndex < t4)
            _this._writeReplacementCharacter$0();
          else
            _this._carry = B.JSString_methods._codeUnitAt$1(str, start);
          ++start;
        }
        t1.addSlice$4(t2, 0, _this._bufferIndex, isLastSlice);
        _this._bufferIndex = 0;
      } while (start < end);
      if (isLast)
        _this.close$0();
    },
    $isStringConversionSink: 1,
    $isSink: 1
  };
  A.Utf8Decoder.prototype = {
    fuse$1$1(next, $T) {
      return this.super$Converter$fuse($T._eval$1("Converter<String,0>")._as(next), $T);
    },
    convert$1(codeUnits) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    },
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      return stringSink.asUtf8Sink$1(this._allowMalformed);
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_List_int._as(stream));
    }
  };
  A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, bytes, errorOffset, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    flush$1(sink) {
      var state = this._convert$_state;
      this._convert$_state = 0;
      if (state <= 32)
        return;
      if (this.allowMalformed)
        sink._contents += A.Primitives_stringFromCharCode(65533);
      else
        throw A.wrapException(A.FormatException$(A._Utf8Decoder_errorDescription(77), null, null));
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = B.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = B.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += A.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin.prototype = {};
  A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin.prototype = {};
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key.__internal$_name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 59
  };
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length; i >= 0; --i) {
        t2 = i + n;
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 >= 0 && t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t1 = this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl(_, shiftAmount) {
      var t1, digitShift, resultUsed, resultDigits, t2, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (B.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var used, otherUsed, resultUsed, resultDigits, t1, _this = this;
      type$._BigIntImpl._as(other);
      used = _this._used;
      otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var used, otherUsed, resultDigits, t1, _this = this;
      type$._BigIntImpl._as(other);
      used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndSetSign$2(other, isNegative) {
      var digits, otherDigits, resultDigits, t1, t2, i, t3, t4,
        resultUsed = this._used,
        resultUsed0 = other._used;
      resultUsed = resultUsed < resultUsed0 ? resultUsed : resultUsed0;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < resultUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & t4;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(false, resultDigits, t1);
    },
    _absAndNotSetSign$2(other, isNegative) {
      var t1, t2, i, t3, t4,
        resultUsed = this._used,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed),
        m = other._used;
      if (resultUsed < m)
        m = resultUsed;
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & ~t4;
      }
      for (i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t2 = digits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(false, resultDigits, t1);
    },
    _absOrSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 | t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 !== 0 || false, resultDigits, t1);
    },
    $and(_, other) {
      var t1, n, p, _this = this;
      type$._BigIntImpl._as(other);
      if (_this._used === 0 || other._used === 0)
        return $.$get$_BigIntImpl_zero();
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absOrSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absAndSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      return p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false);
    },
    $not(_) {
      var _this = this;
      if (_this._used === 0)
        return $.$get$_BigIntImpl__minusOne();
      if (_this._isNegative)
        return _this._absSubSetSign$2($.$get$_BigIntImpl_one(), false);
      return _this._absAddSetSign$2($.$get$_BigIntImpl_one(), true);
    },
    $add(_, other) {
      var t1, t2, isNegative, _this = this;
      type$._BigIntImpl._as(other);
      t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t1, t2, isNegative, _this = this;
      type$._BigIntImpl._as(other);
      t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var used, otherUsed, resultUsed, digits, otherDigits, resultDigits, t1, i, t2;
      type$._BigIntImpl._as(other);
      used = this._used;
      otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      type$._BigIntImpl._as(other);
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, t2, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t2 = yUsed0 + 2;
      nyDigits = new Uint16Array(t2);
      if (!(yUsed0 >= 0 && yUsed0 < t2))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits._value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed._value = resultUsed1;
      $._BigIntImpl____lastRemUsed._value = yUsed0;
      $._BigIntImpl____lastRem_nsh._value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    get$bitLength(_) {
      var t2, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return 0;
      if (_this._isNegative) {
        t1 = _this.$not(0);
        return t1.get$bitLength(t1);
      }
      --t1;
      t2 = _this._digits;
      if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
      return 16 * t1 + B.JSInt_methods.get$bitLength(t2[t1]);
    },
    $mod(_, other) {
      var result;
      type$._BigIntImpl._as(other);
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      result = this._rem$1(other);
      if (result._isNegative)
        result = other._isNegative ? result.$sub(0, other) : result.$add(0, other);
      return result;
    },
    get$sign(_) {
      if (this._used === 0)
        return 0;
      return this._isNegative ? -1 : 1;
    },
    modPow$2(_, exponent, modulus) {
      var modulusUsed, modulusUsed2p4, exponentBitlen, t2, z, resultDigits, result2Digits, gDigits, gUsed, j, i, resultUsed, result2Used, t0,
        t1 = type$._BigIntImpl;
      t1._as(exponent);
      if (exponent._isNegative)
        throw A.wrapException(A.ArgumentError$("exponent must be positive: " + exponent.toString$0(0), null));
      if (modulus.compareTo$1(0, t1._as($.$get$_BigIntImpl_zero())) <= 0)
        throw A.wrapException(A.ArgumentError$("modulus must be strictly positive: " + modulus.toString$0(0), null));
      if (exponent._used === 0)
        return $.$get$_BigIntImpl_one();
      modulusUsed = modulus._used;
      modulusUsed2p4 = 2 * modulusUsed + 4;
      exponentBitlen = exponent.get$bitLength(exponent);
      if (exponentBitlen <= 0)
        return $.$get$_BigIntImpl_one();
      t1 = modulus._digits;
      t2 = modulusUsed - 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      z = new A._BigIntClassic(modulus, modulus.$shl(0, 16 - B.JSInt_methods.get$bitLength(t1[t2])));
      resultDigits = new Uint16Array(modulusUsed2p4);
      result2Digits = new Uint16Array(modulusUsed2p4);
      gDigits = new Uint16Array(modulusUsed);
      gUsed = z.convert$2(this, gDigits);
      for (j = gUsed - 1; j >= 0; --j) {
        if (!(j < modulusUsed))
          return A.ioore(gDigits, j);
        t1 = gDigits[j];
        if (!(j < modulusUsed2p4))
          return A.ioore(resultDigits, j);
        resultDigits[j] = t1;
      }
      for (i = exponentBitlen - 2, resultUsed = gUsed; i >= 0; --i) {
        result2Used = z.sqr$3(resultDigits, resultUsed, result2Digits);
        if (exponent.$and(0, $.$get$_BigIntImpl_one().$shl(0, i))._used !== 0)
          resultUsed = z._reduce$2(resultDigits, A._BigIntImpl__mulDigits(result2Digits, result2Used, gDigits, gUsed, resultDigits));
        else {
          resultUsed = result2Used;
          t0 = result2Digits;
          result2Digits = resultDigits;
          resultDigits = t0;
        }
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(false, resultDigits, t1);
    },
    modInverse$1(_, modulus) {
      var _this = this,
        t1 = type$._BigIntImpl._as($.$get$_BigIntImpl_zero());
      if (modulus.compareTo$1(0, t1) <= 0)
        throw A.wrapException(A.ArgumentError$("Modulus must be strictly positive: " + modulus.toString$0(0), null));
      if (modulus.$eq(0, $.$get$_BigIntImpl_one()))
        return t1;
      return A._BigIntImpl__binaryGcd(modulus, _this._isNegative || A._BigIntImpl__compareDigits(_this._digits, _this._used, modulus._digits, modulus._used) >= 0 ? _this.$mod(0, modulus) : _this, true);
    },
    toInt$0(_) {
      var i, t1, t2, result;
      for (i = this._used - 1, t1 = this._digits, t2 = t1.length, result = 0; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        result = result * 65536 + t1[i];
      }
      return this._isNegative ? -result : result;
    },
    toDouble$0(_) {
      var resultBits, t2, t3, $length, biasedExponent, readBits, i, roundUp, _this = this, _box_0 = {},
        t1 = _this._used;
      if (t1 === 0)
        return 0;
      resultBits = new Uint8Array(8);
      --t1;
      t2 = _this._digits;
      t3 = t2.length;
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      $length = 16 * t1 + B.JSInt_methods.get$bitLength(t2[t1]);
      if ($length > 1024)
        return _this._isNegative ? -1 / 0 : 1 / 0;
      if (_this._isNegative)
        resultBits[7] = 128;
      biasedExponent = $length - 53 + 1075;
      resultBits[6] = (biasedExponent & 15) << 4;
      resultBits[7] = (resultBits[7] | B.JSInt_methods._shrOtherPositive$1(biasedExponent, 4)) >>> 0;
      _box_0.cachedBitsLength = _box_0.cachedBits = 0;
      _box_0.digitIndex = t1;
      readBits = new A._BigIntImpl_toDouble_readBits(_box_0, _this);
      t1 = readBits.call$1(5);
      if (typeof t1 !== "number")
        return t1.$and();
      resultBits[6] = (resultBits[6] | t1 & 15) >>> 0;
      for (i = 5; i >= 0; --i)
        B.NativeUint8List_methods.$indexSet(resultBits, i, readBits.call$1(8));
      roundUp = new A._BigIntImpl_toDouble_roundUp(resultBits);
      if (J.$eq$(readBits.call$1(1), 1))
        if ((resultBits[0] & 1) === 1)
          roundUp.call$0();
        else if (_box_0.cachedBits !== 0)
          roundUp.call$0();
        else
          for (i = _box_0.digitIndex; i >= 0; --i) {
            if (!(i < t3))
              return A.ioore(t2, i);
            if (t2[i] !== 0) {
              roundUp.call$0();
              break;
            }
          }
      return B.NativeByteData_methods._getFloat64$2(A.NativeByteData_NativeByteData$view(resultBits.buffer, 0, null), 0, true);
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, t3, digits4, t4, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = type$._BigIntImpl; rest._used > 1;) {
        t3 = t2._as($.$get$_BigIntImpl__bigInt10000());
        if (t3._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t3).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t4 = digits4.length;
        if (t4 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t4 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t4 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t3);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    _toRadixCodeUnit$1(digit) {
      if (digit < 10)
        return 48 + digit;
      return 97 + digit - 10;
    },
    toRadixString$1(_, radix) {
      var t1, digitString, base, reversedDigitCodeUnits, rest, t2, digit, _this = this;
      if (radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, null, null));
      t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        digitString = B.JSInt_methods.toRadixString$1(t1[0], radix);
        if (_this._isNegative)
          return "-" + digitString;
        return digitString;
      }
      if (radix === 16)
        return _this._toHexString$0();
      base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      reversedDigitCodeUnits = A._setArrayType([], type$.JSArray_int);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = base._used === 0; rest._used !== 0;) {
        if (t2)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digit = rest._rem$1(base).toInt$0(0);
        rest = rest._div$1(base);
        B.JSArray_methods.add$1(reversedDigitCodeUnits, _this._toRadixCodeUnit$1(digit));
      }
      digitString = A.String_String$fromCharCodes(new A.ReversedListIterable(reversedDigitCodeUnits, type$.ReversedListIterable_int), 0, null);
      if (t1)
        return "-" + digitString;
      return digitString;
    },
    _toHexString$0() {
      var t1, t2, t3, i, chunk, j, msbChunk, _this = this,
        chars = A._setArrayType([], type$.JSArray_int);
      for (t1 = _this._used - 1, t2 = _this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        chunk = t2[i];
        for (j = 0; j < 4; ++j) {
          B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(chunk & 15));
          chunk = chunk >>> 4;
        }
      }
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      msbChunk = t2[t1];
      for (; msbChunk !== 0;) {
        B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(msbChunk & 15));
        msbChunk = msbChunk >>> 4;
      }
      if (_this._isNegative)
        B.JSArray_methods.add$1(chars, 45);
      return A.String_String$fromCharCodes(new A.ReversedListIterable(chars, type$.ReversedListIterable_int), 0, null);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 27
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 25
  };
  A._BigIntImpl_toDouble_readBits.prototype = {
    call$1(n) {
      var t1, t2, t3, t4, t5, nextDigit, nextDigitLength, result;
      for (t1 = this._box_0, t2 = this.$this, t3 = t2._used - 1, t2 = t2._digits, t4 = t2.length; t5 = t1.cachedBitsLength, t5 < n;) {
        t5 = t1.digitIndex;
        if (t5 < 0) {
          t1.digitIndex = t5 - 1;
          nextDigit = 0;
          nextDigitLength = 16;
        } else {
          if (!(t5 < t4))
            return A.ioore(t2, t5);
          nextDigit = t2[t5];
          nextDigitLength = t5 === t3 ? B.JSInt_methods.get$bitLength(nextDigit) : 16;
          --t1.digitIndex;
        }
        t1.cachedBits = B.JSInt_methods.$shl(t1.cachedBits, nextDigitLength) + nextDigit;
        t1.cachedBitsLength += nextDigitLength;
      }
      t2 = t1.cachedBits;
      t5 -= n;
      result = B.JSInt_methods.$shr(t2, t5);
      t1.cachedBits = t2 - B.JSInt_methods.$shl(result, t5);
      t1.cachedBitsLength = t5;
      return result;
    },
    $signature: 25
  };
  A._BigIntImpl_toDouble_roundUp.prototype = {
    call$0() {
      var t1, carry, i, sum;
      for (t1 = this.resultBits, carry = 1, i = 0; i < 8; ++i) {
        if (carry === 0)
          break;
        sum = t1[i] + carry;
        t1[i] = sum & 255;
        carry = sum >>> 8;
      }
    },
    $signature: 0
  };
  A._BigIntClassic.prototype = {
    convert$2(x, resultDigits) {
      var t2, remainder, used, digits, i, t3,
        t1 = x._isNegative;
      if (!t1) {
        t2 = this._modulus;
        t2 = A._BigIntImpl__compareDigits(x._digits, x._used, t2._digits, t2._used) >= 0;
      } else
        t2 = true;
      if (t2) {
        t2 = this._modulus;
        remainder = x._rem$1(t2);
        if (t1 && remainder._used > 0)
          remainder = remainder.$add(0, t2);
        used = remainder._used;
        digits = remainder._digits;
      } else {
        used = x._used;
        digits = x._digits;
      }
      for (t1 = digits.length, t2 = resultDigits.length, i = used; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3;
      }
      return used;
    },
    _reduce$2(xDigits, xUsed) {
      var t1;
      if (xUsed < this._modulus._used)
        return xUsed;
      t1 = A._BigIntImpl__normalize(xUsed, xDigits);
      return this.convert$2(new A._BigIntImpl(false, xDigits, t1)._rem$1(this._normalizedModulus), xDigits);
    },
    sqr$3(xDigits, xUsed, resultDigits) {
      var i, t2, t3, i0, t4,
        t1 = A._BigIntImpl__normalize(xUsed, xDigits),
        b = new A._BigIntImpl(false, xDigits, t1),
        b2 = b.$mul(0, b);
      for (i = b2._used, t1 = b2._digits, t2 = t1.length, t3 = resultDigits.length, i0 = 0; i0 < i; ++i0) {
        if (!(i0 < t2))
          return A.ioore(t1, i0);
        t4 = t1[i0];
        if (!(i0 < t3))
          return A.ioore(resultDigits, i0);
        resultDigits[i0] = t4;
      }
      for (t1 = 2 * xUsed; i < t1; ++i) {
        if (!(i >= 0 && i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return this._reduce$2(resultDigits, t1);
    }
  };
  A.DateTime.prototype = {
    add$1(_, duration) {
      return A.DateTime$_withValue(B.JSInt_methods.$add(this._core$_value, type$.Duration._as(duration).get$inMilliseconds()), this.isUtc);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this.isUtc === other.isUtc;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._core$_value, type$.DateTime._as(other)._core$_value);
    },
    get$hashCode(_) {
      var t1 = this._core$_value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toUtc$0() {
      if (this.isUtc)
        return this;
      return A.DateTime$_withValue(this._core$_value, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var minutesPadding, seconds, secondsPadding, paddedMicroseconds,
        microseconds = this._duration,
        microseconds0 = microseconds % 3600000000,
        minutes = B.JSInt_methods._tdivFast$1(microseconds0, 60000000);
      microseconds0 %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds0, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      paddedMicroseconds = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds0 % 1000000), 6, "0");
      return "" + (microseconds / 3600000000 | 0) + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + paddedMicroseconds;
    },
    $isComparable: 1
  };
  A._Enum.prototype = {};
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    },
    get$message() {
      return this.message;
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = A.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    },
    get$message() {
      return this.message;
    }
  };
  A.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + _this._core$_memberName.__internal$_name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    },
    get$message() {
      return this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var t1 = "UnimplementedError: " + this.message;
      return t1;
    },
    get$message() {
      return this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    },
    get$message() {
      return this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = B.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = B.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = B.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message() {
      return this.message;
    },
    get$source() {
      return this.source;
    },
    get$offset() {
      return this.offset;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$message() {
      return "Division resulted in non-finite value";
    },
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (A.boolConversionCheck(J.$eq$(t1.get$current(), element)))
          return true;
      return false;
    },
    every$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!A.boolConversionCheck(test.call$1(t1.get$current())))
          return false;
      return true;
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = "" + J.toString$0$(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + J.toString$0$(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skipWhile$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.SkipWhileIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("SkipWhileIterable<Iterable.E>"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      A.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Iterator.prototype = {};
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      type$.Invocation._as(invocation);
      throw A.wrapException(A.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A.Sink.prototype = {};
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  A.Stopwatch.prototype = {
    get$elapsedMicroseconds() {
      var ticks,
        t1 = this._stop;
      if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
      ticks = t1 - this._core$_start;
      if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
      return ticks * 1000;
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(obj) {
      this._contents += A.S(obj);
    },
    writeCharCode$1(charCode) {
      this._contents += A.Primitives_stringFromCharCode(charCode);
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 62
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1(msg) {
      return this.call$2(msg, null);
    },
    $signature: 63
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 27
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        A._lateInitializeOnceCheck(_this.___Uri__text, "_text");
        value = _this.___Uri__text = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, result, _this = this,
        value = _this.___Uri_pathSegments;
      if (value === $) {
        pathToSplit = _this.path;
        if (pathToSplit.length !== 0 && B.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        A._lateInitializeOnceCheck(_this.___Uri_pathSegments, "pathSegments");
        _this.set$___Uri_pathSegments(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        A._lateInitializeOnceCheck(_this.___Uri_hashCode, "hashCode");
        _this.___Uri_hashCode = result;
        value = result;
      }
      return value;
    },
    get$queryParametersAll() {
      var t1, result, _this = this,
        value = _this.___Uri_queryParametersAll;
      if (value === $) {
        t1 = _this._query;
        result = A._Uri__computeQueryParametersAll(t1 == null ? "" : t1);
        A._lateInitializeOnceCheck(_this.___Uri_queryParametersAll, "queryParametersAll");
        _this.set$___Uri_queryParametersAll(result);
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._Uri__compareScheme(scheme, thisScheme);
    },
    get$isAbsolute() {
      if (this.scheme !== "") {
        var t1 = this._fragment;
        t1 = (t1 == null ? "" : t1) === "";
      } else
        t1 = false;
      return t1;
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (B.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || B.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, t1, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = reference.get$hasPort() ? reference.get$port() : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = A._Uri__removeDotSegments(reference.get$path());
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host();
          targetPort = A._Uri__makePort(reference.get$hasPort() ? reference.get$port() : _null, targetScheme);
          targetPath = A._Uri__removeDotSegments(reference.get$path());
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$path() === "")
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path()) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path()));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path());
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path() : A._Uri__removeDotSegments(reference.get$path());
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path());
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path());
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      t1 = $.$get$_Uri__isWindowsCached();
      if (t1)
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host() !== "")
          A.throwExpression(A.UnsupportedError$(string$.Cannotn));
        pathSegments = _this.get$pathSegments();
        A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    set$___Uri_pathSegments(___Uri_pathSegments) {
      this.___Uri_pathSegments = type$.List_String._as(___Uri_pathSegments);
    },
    set$___Uri_queryParametersAll(___Uri_queryParametersAll) {
      this.___Uri_queryParametersAll = type$.Map_of_String_and_List_String._as(___Uri_queryParametersAll);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(B.List_qg40, A._asString(s), B.C_Utf8Codec, false);
    },
    $signature: 13
  };
  A._Uri__splitQueryStringAll_parsePair.prototype = {
    call$3(start, equalsIndex, end) {
      var t1, t2, key, value;
      if (start === end)
        return;
      t1 = this.query;
      t2 = this.encoding;
      if (equalsIndex < 0) {
        key = A._Uri__uriDecode(t1, start, end, t2, true);
        value = "";
      } else {
        key = A._Uri__uriDecode(t1, start, equalsIndex, t2, true);
        value = A._Uri__uriDecode(t1, equalsIndex + 1, end, t2, true);
      }
      J.add$1$ax(this.result.putIfAbsent$2(key, A.core__Uri__createList$closure()), value);
    },
    $signature: 65
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, B.List_CVk, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, B.List_qg4, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (!(state < t1.length))
        return A.ioore(t1, state);
      t1 = t1[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 66
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = B.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (!(t2 < 96))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 30
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n, t1;
      for (i = B.JSString_methods._codeUnitAt$1(range, 0), n = B.JSString_methods._codeUnitAt$1(range, 1); i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (!(t1 < 96))
          return A.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 30
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$isAbsolute() {
      return this._schemeEnd > 0 && this._fragmentStart >= this._uri.length;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty;
      parts = A._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (B.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    get$queryParametersAll() {
      if (this._queryStart >= this._fragmentStart)
        return B.Map_empty;
      var queryParameterLists = A._Uri__splitQueryStringAll(this.get$query());
      queryParameterLists.updateAll$1(A.core___toUnmodifiableStringList$closure());
      return A.ConstantMap_ConstantMap$from(queryParameterLists, type$.String, type$.List_String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (B.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, t3, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      }
      t3 = $.$get$_Uri__isWindowsCached();
      if (t3)
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._hostStart < _this._portStart)
          A.throwExpression(A.UnsupportedError$(string$.Cannotn));
        t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port() : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.OSError.prototype = {
    toString$0(_) {
      var t1 = "" + "OS Error",
        t2 = this.message;
      if (t2.length !== 0) {
        t1 = t1 + ": " + t2;
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ", errno = " + B.JSInt_methods.toString$0(t2);
      } else {
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ": errno = " + B.JSInt_methods.toString$0(t2);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A._BufferAndStart.prototype = {};
  A.FileMode.prototype = {};
  A.FileSystemException.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = "" + "FileSystemException",
        t2 = _this.message;
      if (t2.length !== 0) {
        t1 = t1 + (": " + t2) + (", path = '" + _this.path + "'");
        t2 = _this.osError;
        if (t2 != null)
          t1 += " (" + t2.toString$0(0) + ")";
      } else {
        t2 = _this.osError;
        if (t2 != null)
          t1 = t1 + (": " + t2.toString$0(0)) + (", path = '" + _this.path + "'");
        else
          t1 += ": " + _this.path;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A._FileStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1, _this = this;
      type$.nullable_void_Function_Uint8List._as(onData);
      type$.nullable_void_Function._as(onDone);
      _this.set$___FileStream__controller(type$.StreamController_Uint8List._as(A.StreamController_StreamController(new A._FileStream_listen_closure(_this), _this.get$_io$_start(), null, _this.get$_readBlock(), true, type$.Uint8List)));
      t1 = A._lateReadCheck(_this.___FileStream__controller, "_controller");
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _closeFile$0() {
      var _this = this;
      if (_this._readInProgress || _this._closed)
        return _this._closeCompleter.future;
      _this._closed = true;
      A._lateReadCheck(_this.___FileStream__openedFile, "_openedFile").close$0().catchError$1(A._lateReadCheck(_this.___FileStream__controller, "_controller").get$addError()).whenComplete$1(new A._FileStream__closeFile_done(_this));
      return _this._closeCompleter.future;
    },
    _readBlock$0() {
      var _this = this, t1 = {};
      if (_this._readInProgress)
        return;
      if (_this._atEnd) {
        _this._closeFile$0();
        return;
      }
      _this._readInProgress = true;
      t1.readBytes = 65536;
      A._lateReadCheck(_this.___FileStream__openedFile, "_openedFile").read$1(65536).then$1$1(new A._FileStream__readBlock_closure(t1, _this), type$.Null).catchError$1(new A._FileStream__readBlock_closure0(_this));
    },
    _io$_start$0() {
      var _this = this,
        onOpenFile = new A._FileStream__start_onOpenFile(_this, new A._FileStream__start_onReady(_this)),
        openFailed = new A._FileStream__start_openFailed(_this);
      A.File_File(_this._io$_path).open$1$mode(B.FileMode_0).then$1$2$onError(onOpenFile, openFailed, type$.void);
    },
    set$___FileStream__controller(___FileStream__controller) {
      this.___FileStream__controller = type$.StreamController_Uint8List._as(___FileStream__controller);
    }
  };
  A._FileStream_listen_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._unsubscribed = true;
      return t1._closeFile$0();
    },
    $signature: 15
  };
  A._FileStream__closeFile_done.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._closeCompleter.complete$0();
      A._lateReadCheck(t1.___FileStream__controller, "_controller").close$0();
    },
    $signature: 0
  };
  A._FileStream__readBlock_closure.prototype = {
    call$1(block) {
      var t1, t2, t3,
        _s11_ = "_controller";
      type$.Uint8List._as(block);
      t1 = this.$this;
      t1._readInProgress = false;
      if (t1._unsubscribed) {
        t1._closeFile$0();
        return;
      }
      t2 = block.length;
      t1._io$_position = t1._io$_position + t2;
      if (t2 >= this._box_0.readBytes)
        t2 = false;
      else
        t2 = true;
      if (t2)
        t1._atEnd = true;
      if (!t1._atEnd) {
        t2 = A._lateReadCheck(t1.___FileStream__controller, _s11_);
        t3 = t2._state;
        t2 = !((t3 & 1) !== 0 ? (t2.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0);
      } else
        t2 = false;
      if (t2)
        t1._readBlock$0();
      A._lateReadCheck(t1.___FileStream__controller, _s11_).add$1(0, block);
      if (t1._atEnd)
        t1._closeFile$0();
    },
    $signature: 68
  };
  A._FileStream__readBlock_closure0.prototype = {
    call$2(e, s) {
      var t1 = this.$this;
      if (!t1._unsubscribed) {
        A._lateReadCheck(t1.___FileStream__controller, "_controller").addError$2(type$.Object._as(e), type$.nullable_StackTrace._as(s));
        t1._closeFile$0();
        t1._unsubscribed = true;
      }
    },
    $signature: 14
  };
  A._FileStream__start_onReady.prototype = {
    call$1(file) {
      var t1 = this.$this;
      t1.___FileStream__openedFile = type$.RandomAccessFile._as(file);
      t1._readInProgress = false;
      t1._readBlock$0();
    },
    $signature: 22
  };
  A._FileStream__start_onOpenFile.prototype = {
    call$1(file) {
      var t1, t2, t3;
      type$.RandomAccessFile._as(file);
      t1 = this.$this;
      t2 = t1._io$_position;
      t3 = this.onReady;
      if (t2 > 0)
        file.setPosition$1(t2).then$1$2$onError(t3, new A._FileStream__start_onOpenFile_closure(t1), type$.void);
      else
        t3.call$1(file);
    },
    $signature: 22
  };
  A._FileStream__start_onOpenFile_closure.prototype = {
    call$2(e, s) {
      var t1 = this.$this;
      A._lateReadCheck(t1.___FileStream__controller, "_controller").addError$2(type$.Object._as(e), type$.nullable_StackTrace._as(s));
      t1._readInProgress = false;
      t1._closeFile$0();
    },
    $signature: 14
  };
  A._FileStream__start_openFailed.prototype = {
    call$2(error, stackTrace) {
      var _s11_ = "_controller",
        t1 = this.$this;
      A._lateReadCheck(t1.___FileStream__controller, _s11_).addError$2(type$.Object._as(error), type$.nullable_StackTrace._as(stackTrace));
      A._lateReadCheck(t1.___FileStream__controller, _s11_).close$0();
      t1._closeCompleter.complete$0();
    },
    $signature: 19
  };
  A._FileStreamConsumer.prototype = {
    addStream$1(stream) {
      var t1, completer;
      type$.Stream_List_int._as(stream);
      t1 = new A._Future($.Zone__current, type$._Future_nullable_File);
      completer = new A._SyncCompleter(t1, type$._SyncCompleter_nullable_File);
      this._openFuture.then$1$1(new A._FileStreamConsumer_addStream_closure(this, completer, stream), type$.Null).catchError$1(completer.get$completeError());
      return t1;
    },
    close$0() {
      return this._openFuture.then$1$1(new A._FileStreamConsumer_close_closure(), type$.void).then$1$1(new A._FileStreamConsumer_close_closure0(this), type$.nullable_File);
    }
  };
  A._FileStreamConsumer_addStream_closure.prototype = {
    call$1(openedFile) {
      var _subscription, t1, t2;
      type$.RandomAccessFile._as(openedFile);
      _subscription = A._Cell$named("_subscription");
      t1 = this.completer;
      t2 = new A._FileStreamConsumer_addStream_closure_error(_subscription, openedFile, t1);
      _subscription._value = this.stream.listen$4$cancelOnError$onDone$onError(new A._FileStreamConsumer_addStream__closure(_subscription, openedFile, t2), true, new A._FileStreamConsumer_addStream__closure0(this.$this, t1), t2);
    },
    $signature: 70
  };
  A._FileStreamConsumer_addStream_closure_error.prototype = {
    call$2(e, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._subscription._readLocal$0().cancel$0();
      this.openedFile.close$0();
      this.completer.completeError$2(type$.Object._as(e), stackTrace);
    },
    $signature: 18
  };
  A._FileStreamConsumer_addStream__closure.prototype = {
    call$1(d) {
      var e, stackTrace, t1, exception, _this = this;
      type$.List_int._as(d);
      t1 = _this._subscription;
      t1._readLocal$0().pause$0();
      try {
        _this.openedFile.writeFrom$3(d, 0, J.get$length$asx(d)).then$1$2$onError(new A._FileStreamConsumer_addStream___closure(t1), _this.error, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        _this.error.call$2(e, stackTrace);
      }
    },
    $signature: 31
  };
  A._FileStreamConsumer_addStream___closure.prototype = {
    call$1(_) {
      type$.RandomAccessFile._as(_);
      return this._subscription._readLocal$0().resume$0();
    },
    $signature: 22
  };
  A._FileStreamConsumer_addStream__closure0.prototype = {
    call$0() {
      this.completer.complete$1(this.$this._file);
    },
    $signature: 0
  };
  A._FileStreamConsumer_close_closure.prototype = {
    call$1(openedFile) {
      return type$.RandomAccessFile._as(openedFile).close$0();
    },
    $signature: 71
  };
  A._FileStreamConsumer_close_closure0.prototype = {
    call$1(_) {
      return this.$this._file;
    },
    $signature: 72
  };
  A._File.prototype = {
    exists$0() {
      return A._File__dispatchWithNamespace(0, [null, this._rawPath]).then$1$1(new A._File_exists_closure(this), type$.bool);
    },
    open$1$mode(mode) {
      if (mode !== B.FileMode_0 && mode !== B.FileMode_1 && mode !== B.FileMode_2 && mode !== B.FileMode_3 && mode !== B.FileMode_4)
        return A.Future_Future$error(new A.ArgumentError(false, null, null, "Invalid file mode for this operation"), type$.RandomAccessFile);
      return A._File__dispatchWithNamespace(5, [null, this._rawPath, mode._mode]).then$1$1(new A._File_open_closure(this), type$.RandomAccessFile);
    },
    length$0(_) {
      return A._File__dispatchWithNamespace(12, [null, this._rawPath]).then$1$1(new A._File_length_closure(this), type$.int);
    },
    toString$0(_) {
      return "File: '" + this._io$_path + "'";
    },
    $isFile: 1
  };
  A._File_exists_closure.prototype = {
    call$1(response) {
      var t1;
      response.$index(0, 0);
      t1 = A._exceptionFromResponse(response, "Cannot check existence", this.$this._io$_path);
      throw A.wrapException(t1);
    },
    $signature: 74
  };
  A._File_open_closure.prototype = {
    call$1(response) {
      var t1;
      response.$index(0, 0);
      t1 = A._exceptionFromResponse(response, "Cannot open file", this.$this._io$_path);
      throw A.wrapException(t1);
    },
    $signature: 23
  };
  A._File_length_closure.prototype = {
    call$1(response) {
      var t1;
      response.$index(0, 0);
      t1 = A._exceptionFromResponse(response, "Cannot retrieve length of file", this.$this._io$_path);
      throw A.wrapException(t1);
    },
    $signature: 76
  };
  A._RandomAccessFile_close_closure.prototype = {
    call$1(result) {
      var t2,
        t1 = J.getInterceptor$(result);
      if (A.boolConversionCheck(t1.$eq(result, -1)))
        throw A.wrapException(A.FileSystemException$("Cannot close file", this.$this.path, null));
      t2 = this.$this;
      t1 = t2.closed || A.boolConversionCheck(t1.$eq(result, 0));
      t2.closed = t1;
      if (t1) {
        t1 = A._lateReadCheck(t2.___RandomAccessFile__resourceInfo, "_resourceInfo");
        $._FileResourceInfo_openFiles.remove$1(0, t1.id);
      }
    },
    $signature: 2
  };
  A._RandomAccessFile_read_closure.prototype = {
    call$1(response) {
      var t1, t2, t3, t4;
      if (type$.List_dynamic._is(response) && !A.boolConversionCheck(J.$eq$(J.$index$asx(response, 0), 0)))
        throw A.wrapException(A._exceptionFromResponse(response, "read failed", this.$this.path));
      t1 = A._lateReadCheck(this.$this.___RandomAccessFile__resourceInfo, "_resourceInfo");
      t2 = J.getInterceptor$asx(response);
      t1.readBytes += A._asInt(J.get$length$asx(t2.$index(response, 1)));
      ++t1.readCount;
      t3 = $.$get$_IOResourceInfo__startTime();
      t4 = B.JSInt_methods._tdivFast$1($.$get$_IOResourceInfo__sw().get$elapsedMicroseconds(), 1000);
      if (typeof t3 !== "number")
        return t3.$add();
      t1.lastReadTime = t3 + t4;
      return type$.Uint8List._as(t2.$index(response, 1));
    },
    $signature: 77
  };
  A._RandomAccessFile_writeFrom_closure.prototype = {
    call$1(response) {
      var t1, t2, t3, t4, _this = this;
      if (type$.List_dynamic._is(response) && !A.boolConversionCheck(J.$eq$(J.$index$asx(response, 0), 0)))
        throw A.wrapException(A._exceptionFromResponse(response, "writeFrom failed", _this.$this.path));
      t1 = _this.$this;
      t2 = A._lateReadCheck(t1.___RandomAccessFile__resourceInfo, "_resourceInfo");
      t3 = _this._box_0;
      t2.writeBytes += t3.end - (_this.start - t3.result.start);
      ++t2.writeCount;
      t3 = $.$get$_IOResourceInfo__startTime();
      t4 = B.JSInt_methods._tdivFast$1($.$get$_IOResourceInfo__sw().get$elapsedMicroseconds(), 1000);
      if (typeof t3 !== "number")
        return t3.$add();
      t2.lastWriteTime = t3 + t4;
      return t1;
    },
    $signature: 23
  };
  A._RandomAccessFile_setPosition_closure.prototype = {
    call$1(response) {
      if (type$.List_dynamic._is(response) && !A.boolConversionCheck(J.$eq$(J.$index$asx(response, 0), 0)))
        throw A.wrapException(A._exceptionFromResponse(response, "setPosition failed", this.$this.path));
      return this.$this;
    },
    $signature: 23
  };
  A.FileSystemEntity.prototype = {};
  A._StreamSinkImpl0.prototype = {
    add$1(_, data) {
      A._instanceType(this)._eval$1("_StreamSinkImpl0.T")._as(data);
      if (this._io$_isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      this.get$_io$_controller().add$1(0, data);
    },
    addError$2(error, stackTrace) {
      if (this._io$_isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      this.get$_io$_controller().addError$2(error, stackTrace);
    },
    close$0() {
      var t1, _this = this;
      if (_this._io$_isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (!_this._io$_isClosed) {
        _this._io$_isClosed = true;
        t1 = _this._io$_controllerInstance;
        if (t1 != null)
          t1.close$0();
        else
          _this._io$_closeTarget$0();
      }
      return _this._io$_doneCompleter.future;
    },
    _io$_closeTarget$0() {
      this._io$_target.close$0().then$1$2$onError(this.get$_io$_completeDoneValue(), this.get$_io$_completeDoneError(), type$.void);
    },
    _io$_completeDoneValue$1(value) {
      var t1 = this._io$_doneCompleter;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(value);
    },
    _io$_completeDoneError$2(error, stackTrace) {
      var t1;
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this._io$_doneCompleter;
      if ((t1.future._state & 30) === 0) {
        this._io$_hasError = true;
        t1.completeError$2(type$.Object._as(error), stackTrace);
      }
    },
    get$_io$_controller() {
      var t1, _this = this, _null = null;
      if (_this._io$_isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (_this._io$_isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      if (_this._io$_controllerInstance == null) {
        _this.set$_io$_controllerInstance(A.StreamController_StreamController(_null, _null, _null, _null, true, A._instanceType(_this)._eval$1("_StreamSinkImpl0.T")));
        _this._io$_controllerCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
        t1 = _this.get$_io$_controller();
        _this._io$_target.addStream$1(new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new A._StreamSinkImpl__controller_closure1(_this), new A._StreamSinkImpl__controller_closure2(_this), type$.Null);
      }
      t1 = _this._io$_controllerInstance;
      t1.toString;
      return t1;
    },
    set$_io$_controllerInstance(_controllerInstance) {
      this._io$_controllerInstance = A._instanceType(this)._eval$1("StreamController<_StreamSinkImpl0.T>?")._as(_controllerInstance);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isSink: 1
  };
  A._StreamSinkImpl__controller_closure1.prototype = {
    call$1(_) {
      var t1 = this.$this;
      if (t1._io$_isBound) {
        t1._io$_controllerCompleter.complete$1(t1);
        t1._io$_controllerCompleter = null;
        t1.set$_io$_controllerInstance(null);
      } else
        t1._io$_closeTarget$0();
    },
    $signature: 2
  };
  A._StreamSinkImpl__controller_closure2.prototype = {
    call$2(error, stackTrace) {
      var t3,
        t1 = this.$this,
        t2 = type$.nullable_StackTrace;
      if (t1._io$_isBound) {
        t3 = t1._io$_controllerCompleter;
        t3.toString;
        t3.completeError$2(type$.Object._as(error), t2._as(stackTrace));
        t1._io$_controllerCompleter = null;
        t1.set$_io$_controllerInstance(null);
      } else
        t1._io$_completeDoneError$2(error, t2._as(stackTrace));
    },
    $signature: 14
  };
  A._IOSinkImpl.prototype = {
    write$1(obj) {
      var t1;
      if (obj.length === 0)
        return;
      t1 = this._io$_encoding;
      A._instanceType(t1)._eval$1("Codec.S")._as(obj);
      this.add$1(0, t1.get$encoder().convert$1(obj));
    },
    $isStringSink: 1
  };
  A.HandshakeException.prototype = {$isHandshakeException: 1};
  A.SocketOption.prototype = {};
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, t4, random, result;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      B.NativeByteData_methods._setUint32$3(t1, 0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) === 0; true;) {
        t4 = t1.buffer;
        t4 = new Uint8Array(t4, start, byteCount);
        crypto.getRandomValues(t4);
        random = B.NativeByteData_methods._getUint32$2(t1, 0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    }
  };
  A.Endian.prototype = {};
  A.ArgParser.prototype = {
    addOption$2$mandatory($name, mandatory) {
      var _null = null;
      this._addOption$12$aliases$hide$mandatory($name, _null, _null, _null, _null, _null, _null, _null, B.C_OptionType1, B.List_empty, false, mandatory);
    },
    addOption$1($name) {
      return this.addOption$2$mandatory($name, false);
    },
    _addOption$12$aliases$hide$mandatory($name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, aliases, hide, mandatory) {
      var t1, option, _i, _this = this, _null = null;
      type$.nullable_Iterable_String._as(allowed);
      type$.nullable_Map_String_String._as(allowedHelp);
      type$.List_String._as(aliases);
      t1 = A._setArrayType([$name], type$.JSArray_String);
      B.JSArray_methods.addAll$1(t1, aliases);
      if (B.JSArray_methods.any$1(t1, new A.ArgParser__addOption_closure(_this)))
        throw A.wrapException(A.ArgumentError$('Duplicate option or alias "' + $name + '".', _null));
      option = new A.Option($name, abbr, _null, defaultsTo, false, callback, type, type === B.C_OptionType0, mandatory);
      if ($name.length === 0)
        A.throwExpression(A.ArgumentError$("Name cannot be empty.", _null));
      else if (B.JSString_methods.startsWith$1($name, "-"))
        A.throwExpression(A.ArgumentError$("Name " + $name + ' cannot start with "-".', _null));
      t1 = $.$get$Option__invalidChars()._nativeRegExp;
      if (t1.test($name))
        A.throwExpression(A.ArgumentError$('Name "' + $name + '" contains invalid characters.', _null));
      _this._options.$indexSet(0, $name, option);
      B.JSArray_methods.add$1(_this._optionsAndSeparators, option);
      for (t1 = _this._aliases, _i = 0; false; ++_i)
        t1.$indexSet(0, aliases[_i], $name);
    },
    findByAbbreviation$1(abbr) {
      var t1, t2;
      for (t1 = this.options._map.get$values(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t2 = t1.get$current();
      return null;
    },
    findByNameOrAlias$1($name) {
      var t1 = this._aliases.$index(0, $name);
      if (t1 == null)
        t1 = $name;
      return this.options._map.$index(0, t1);
    }
  };
  A.ArgParser__addOption_closure.prototype = {
    call$1($name) {
      return this.$this.findByNameOrAlias$1(A._asString($name)) != null;
    },
    $signature: 1
  };
  A.ArgParserException.prototype = {};
  A.ArgResults.prototype = {
    $index(_, $name) {
      var t1;
      A._asString($name);
      t1 = this._parser.options._map;
      if (!t1.containsKey$1($name))
        throw A.wrapException(A.ArgumentError$('Could not find an option named "' + $name + '".', null));
      t1 = t1.$index(0, $name);
      t1.toString;
      return t1.valueOrDefault$1(this._parsed.$index(0, $name));
    }
  };
  A.Option.prototype = {
    valueOrDefault$1(value) {
      var t1;
      if (value != null)
        return value;
      if (this.type === B.C_OptionType0) {
        t1 = A._setArrayType([], type$.JSArray_String);
        return t1;
      }
      return this.defaultsTo;
    }
  };
  A.OptionType.prototype = {};
  A.Parser.prototype = {
    parse$0() {
      var commandResults, commandName, commandParser, error, t1, t3, t4, t5, t6, t7, command, exception, _this = this,
        t2 = _this._args;
      t2.toList$0(0);
      commandResults = null;
      for (t3 = _this._parser$_rest, t4 = _this._grammar, t5 = t4.commands; !t2.get$isEmpty(t2);) {
        t6 = t2._head;
        if (t6 === t2._tail)
          A.throwExpression(A.IterableElementError_noElement());
        t7 = t2._table;
        if (!(t6 < t7.length))
          return A.ioore(t7, t6);
        t6 = t2.$ti._precomputed1._as(t7[t6]);
        if (t6 === "--") {
          t2.removeFirst$0();
          break;
        }
        command = t5._map.$index(0, t6);
        if (command != null) {
          if (t3.length !== 0)
            A.throwExpression(A.ArgParserException$("Cannot specify arguments before a command.", null));
          commandName = t2.removeFirst$0();
          t5 = type$.JSArray_String;
          t6 = A._setArrayType([], t5);
          B.JSArray_methods.addAll$1(t6, t3);
          commandParser = new A.Parser(commandName, _this, command, t2, t6, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
          try {
            commandResults = commandParser.parse$0();
          } catch (exception) {
            t2 = A.unwrapException(exception);
            if (t2 instanceof A.ArgParserException) {
              error = t2;
              t2 = error.message;
              t1 = A._setArrayType([commandName], t5);
              J.addAll$1$ax(t1, error.commands);
              throw A.wrapException(A.ArgParserException$(t2, t1));
            } else
              throw exception;
          }
          B.JSArray_methods.set$length(t3, 0);
          break;
        }
        if (_this._parseSoloOption$0())
          continue;
        if (_this._parseAbbreviation$1(_this))
          continue;
        if (_this._parseLongOption$0())
          continue;
        B.JSArray_methods.add$1(t3, t2.removeFirst$0());
      }
      t1 = t4.options;
      t1._map.forEach$1(0, t1.$ti._eval$1("~(MapView.K,MapView.V)")._as(new A.Parser_parse_closure(_this)));
      B.JSArray_methods.addAll$1(t3, t2);
      t2.clear$0(0);
      return new A.ArgResults(t4, _this._results);
    },
    _readNextArgAsValue$1(option) {
      var t1 = this._args,
        t2 = t1.get$isEmpty(t1),
        t3 = 'Missing argument for "' + option.name + '".';
      if (t2)
        A.throwExpression(A.ArgParserException$(t3, null));
      this._setOption$3(this._results, option, t1.get$first(t1));
      t1.removeFirst$0();
    },
    _parseSoloOption$0() {
      var opt,
        t1 = this._args;
      if (t1.get$first(t1).length !== 2)
        return false;
      if (!B.JSString_methods.startsWith$1(t1.get$first(t1), "-"))
        return false;
      t1 = t1.get$first(t1);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      opt = t1[1];
      if (!A._isLetterOrDigit(B.JSString_methods._codeUnitAt$1(opt, 0)))
        return false;
      this._handleSoloOption$1(opt);
      return true;
    },
    _handleSoloOption$1(opt) {
      var t1, t2, _this = this,
        option = _this._grammar.findByAbbreviation$1(opt);
      if (option == null) {
        t1 = _this._parent;
        t2 = 'Could not find an option or flag "-' + opt + '".';
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(t2, null));
        t1._handleSoloOption$1(opt);
        return true;
      }
      _this._args.removeFirst$0();
      if (option.type === B.C_OptionType)
        _this._results.$indexSet(0, option.name, true);
      else
        _this._readNextArgAsValue$1(option);
      return true;
    },
    _parseAbbreviation$1(innermostCommand) {
      var index, t2, t3, lettersAndDigits, rest,
        t1 = this._args;
      if (t1.get$first(t1).length < 2)
        return false;
      if (!B.JSString_methods.startsWith$1(t1.get$first(t1), "-"))
        return false;
      index = 1;
      while (true) {
        t2 = t1._head;
        if (t2 === t1._tail)
          A.throwExpression(A.IterableElementError_noElement());
        t3 = t1._table;
        if (!(t2 < t3.length))
          return A.ioore(t3, t2);
        t2 = t1.$ti._precomputed1._as(t3[t2]);
        if (index < t2.length) {
          t2 = B.JSString_methods._codeUnitAt$1(t2, index);
          if (!(t2 >= 65 && t2 <= 90))
            if (!(t2 >= 97 && t2 <= 122))
              t2 = t2 >= 48 && t2 <= 57;
            else
              t2 = true;
          else
            t2 = true;
        } else
          t2 = false;
        if (!t2)
          break;
        ++index;
      }
      if (index === 1)
        return false;
      lettersAndDigits = B.JSString_methods.substring$2(t1.get$first(t1), 1, index);
      rest = B.JSString_methods.substring$1(t1.get$first(t1), index);
      if (B.JSString_methods.contains$1(rest, "\n") || B.JSString_methods.contains$1(rest, "\r"))
        return false;
      this._handleAbbreviation$3(lettersAndDigits, rest, innermostCommand);
      return true;
    },
    _handleAbbreviation$3(lettersAndDigits, rest, innermostCommand) {
      var t1, t2, i, i0, _this = this,
        c = B.JSString_methods.substring$2(lettersAndDigits, 0, 1),
        first = _this._grammar.findByAbbreviation$1(c);
      if (first == null) {
        t1 = _this._parent;
        t2 = string$.Could_ + c + '".';
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(t2, null));
        t1._handleAbbreviation$3(lettersAndDigits, rest, innermostCommand);
        return true;
      } else if (first.type !== B.C_OptionType)
        _this._setOption$3(_this._results, first, B.JSString_methods.substring$1(lettersAndDigits, 1) + rest);
      else {
        t1 = 'Option "-' + c + '" is a flag and cannot handle value "' + B.JSString_methods.substring$1(lettersAndDigits, 1) + rest + '".';
        if (rest !== "")
          A.throwExpression(A.ArgParserException$(t1, null));
        for (t1 = lettersAndDigits.length, i = 0; i < t1; i = i0) {
          i0 = i + 1;
          innermostCommand._parseShortFlag$1(B.JSString_methods.substring$2(lettersAndDigits, i, i0));
        }
      }
      _this._args.removeFirst$0();
      return true;
    },
    _parseShortFlag$1(c) {
      var t1, t2,
        option = this._grammar.findByAbbreviation$1(c);
      if (option == null) {
        t1 = this._parent;
        t2 = string$.Could_ + c + '".';
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(t2, null));
        t1._parseShortFlag$1(c);
        return;
      }
      t1 = option.type;
      t2 = 'Option "-' + c + '" must be a flag to be in a collapsed "-".';
      if (t1 !== B.C_OptionType)
        A.throwExpression(A.ArgParserException$(t2, null));
      this._results.$indexSet(0, option.name, true);
    },
    _parseLongOption$0() {
      var index, t2, $name, t3, i, t4, t5, value,
        t1 = this._args;
      if (!B.JSString_methods.startsWith$1(t1.get$first(t1), "--"))
        return false;
      index = B.JSString_methods.indexOf$1(t1.get$first(t1), "=");
      t2 = index === -1;
      $name = t2 ? B.JSString_methods.substring$1(t1.get$first(t1), 2) : B.JSString_methods.substring$2(t1.get$first(t1), 2, index);
      for (t3 = $name.length, i = 0; i !== t3; ++i) {
        t4 = B.JSString_methods._codeUnitAt$1($name, i);
        if (!(t4 >= 65 && t4 <= 90))
          if (!(t4 >= 97 && t4 <= 122))
            t5 = t4 >= 48 && t4 <= 57;
          else
            t5 = true;
        else
          t5 = true;
        if (!(t5 || t4 === 45 || t4 === 95))
          return false;
      }
      value = t2 ? null : B.JSString_methods.substring$1(t1.get$first(t1), index + 1);
      if (value != null)
        t1 = B.JSString_methods.contains$1(value, "\n") || B.JSString_methods.contains$1(value, "\r");
      else
        t1 = false;
      if (t1)
        return false;
      this._handleLongOption$2($name, value);
      return true;
    },
    _handleLongOption$2($name, value) {
      var t2, _this = this, _null = null,
        _s32_ = 'Could not find an option named "',
        t1 = _this._grammar,
        option = t1.findByNameOrAlias$1($name);
      if (option != null) {
        _this._args.removeFirst$0();
        if (option.type === B.C_OptionType) {
          t1 = 'Flag option "' + $name + '" should not be given a value.';
          if (value != null)
            A.throwExpression(A.ArgParserException$(t1, _null));
          _this._results.$indexSet(0, option.name, true);
        } else if (value != null)
          _this._setOption$3(_this._results, option, value);
        else
          _this._readNextArgAsValue$1(option);
      } else if (B.JSString_methods.startsWith$1($name, "no-")) {
        option = t1.findByNameOrAlias$1(B.JSString_methods.substring$1($name, 3));
        if (option == null) {
          t1 = _this._parent;
          t2 = _s32_ + $name + '".';
          if (t1 == null)
            A.throwExpression(A.ArgParserException$(t2, _null));
          t1._handleLongOption$2($name, value);
          return true;
        }
        _this._args.removeFirst$0();
        t1 = option.type;
        t2 = 'Cannot negate non-flag option "' + $name + '".';
        if (t1 !== B.C_OptionType)
          A.throwExpression(A.ArgParserException$(t2, _null));
        A.throwExpression(A.ArgParserException$('Cannot negate option "' + $name + '".', _null));
        _this._results.$indexSet(0, option.name, false);
      } else {
        t1 = _this._parent;
        t2 = _s32_ + $name + '".';
        if (t1 == null)
          A.throwExpression(A.ArgParserException$(t2, _null));
        t1._handleLongOption$2($name, value);
        return true;
      }
      return true;
    },
    _setOption$3(results, option, value) {
      var list, t1, t2, t3, _i, element;
      if (option.type !== B.C_OptionType0) {
        this._validateAllowed$2(option, value);
        results.$indexSet(0, option.name, value);
        return;
      }
      list = results.putIfAbsent$2(option.name, new A.Parser__setOption_closure());
      if (option.splitCommas)
        for (t1 = value.split(","), t2 = t1.length, t3 = J.getInterceptor$ax(list), _i = 0; _i < t2; ++_i) {
          element = t1[_i];
          this._validateAllowed$2(option, element);
          t3.add$1(list, element);
        }
      else {
        this._validateAllowed$2(option, value);
        J.add$1$ax(list, value);
      }
    },
    _validateAllowed$2(option, value) {
      var t2,
        t1 = option.allowed;
      if (t1 == null)
        return;
      t1 = B.JSArray_methods.contains$1(t1, value);
      t2 = '"' + value + '" is not an allowed value for option "' + option.name + '".';
      if (!t1)
        A.throwExpression(A.ArgParserException$(t2, null));
    }
  };
  A.Parser_parse_closure.prototype = {
    call$2($name, option) {
      var parsedOption;
      A._asString($name);
      type$.Option._as(option);
      parsedOption = this.$this._results.$index(0, $name);
      if (option.mandatory && parsedOption == null)
        throw A.wrapException(A.ArgParserException$("Option " + $name + " is mandatory.", null));
      return;
    },
    $signature: 79
  };
  A.Parser__setOption_closure.prototype = {
    call$0() {
      return A._setArrayType([], type$.JSArray_String);
    },
    $signature: 33
  };
  A.CanonicalizedMap.prototype = {
    $index(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return null;
      pair = _this._base.$index(0, _this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
      return pair == null ? null : pair.value;
    },
    $indexSet(_, key, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("CanonicalizedMap.K")._as(key);
      t2 = t1._eval$1("CanonicalizedMap.V");
      t2._as(value);
      if (!_this._isValidKey$1(key))
        return;
      _this._base.$indexSet(0, _this._canonicalize.call$1(key), new A.MapEntry(key, value, t1._eval$1("@<CanonicalizedMap.K>")._bind$1(t2)._eval$1("MapEntry<1,2>")));
    },
    addAll$1(_, other) {
      this.$ti._eval$1("Map<CanonicalizedMap.K,CanonicalizedMap.V>")._as(other).forEach$1(0, new A.CanonicalizedMap_addAll_closure(this));
    },
    containsKey$1(key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._base.containsKey$1(_this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
    },
    get$entries() {
      return this._base.get$entries().map$1$1(0, new A.CanonicalizedMap_entries_closure(this), this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>"));
    },
    forEach$1(_, f) {
      this._base.forEach$1(0, new A.CanonicalizedMap_forEach_closure(this, this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)")._as(f)));
    },
    get$isEmpty(_) {
      var t1 = this._base;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._base;
      return t1.get$isNotEmpty(t1);
    },
    get$keys() {
      var t1 = this._base.get$values(),
        t2 = this.$ti._eval$1("CanonicalizedMap.K"),
        t3 = A._instanceType(t1);
      return A.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_keys_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    get$length(_) {
      var t1 = this._base;
      return t1.get$length(t1);
    },
    map$2$1(_, transform, K2, V2) {
      return this._base.map$2$1(0, new A.CanonicalizedMap_map_closure(this, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(CanonicalizedMap.K,CanonicalizedMap.V)")._as(transform), K2, V2), K2, V2);
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    get$values() {
      var t1 = this._base.get$values(),
        t2 = this.$ti._eval$1("CanonicalizedMap.V"),
        t3 = A._instanceType(t1);
      return A.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_values_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _isValidKey$1(key) {
      var t1;
      if (this.$ti._eval$1("CanonicalizedMap.K")._is(key))
        t1 = true;
      else
        t1 = false;
      return t1;
    },
    $isMap: 1
  };
  A.CanonicalizedMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("CanonicalizedMap.K")._as(key);
      t2._eval$1("CanonicalizedMap.V")._as(value);
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)");
    }
  };
  A.CanonicalizedMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti,
        t2 = t1._eval$1("MapEntry<CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>>")._as(e).value;
      return new A.MapEntry(t2.key, t2.value, t1._eval$1("@<CanonicalizedMap.K>")._bind$1(t1._eval$1("CanonicalizedMap.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>(MapEntry<CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>>)");
    }
  };
  A.CanonicalizedMap_forEach_closure.prototype = {
    call$2(key, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(key);
      t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.f.call$2(pair.key, pair.value);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_keys_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).key;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.K(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_map_closure.prototype = {
    call$2(_, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(_);
      t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.transform.call$2(pair.key, pair.value);
    },
    $signature() {
      return this.$this.$ti._bind$1(this.K2)._bind$1(this.V2)._eval$1("MapEntry<1,2>(CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_values_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).value;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.V(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.DefaultEquality.prototype = {};
  A.IterableEquality.prototype = {
    equals$2(elements1, elements2) {
      var it1, t2, it2, hasNext,
        t1 = this.$ti._eval$1("Iterable<1>?");
      t1._as(elements1);
      t1._as(elements2);
      if (elements1 === elements2)
        return true;
      t1 = A._arrayInstanceType(elements1);
      it1 = new J.ArrayIterator(elements1, elements1.length, t1._eval$1("ArrayIterator<1>"));
      t2 = A._arrayInstanceType(elements2);
      it2 = new J.ArrayIterator(elements2, elements2.length, t2._eval$1("ArrayIterator<1>"));
      for (t1 = t1._precomputed1, t2 = t2._precomputed1; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!J.$eq$(t1._as(it1._current), t2._as(it2._current)))
          return false;
      }
    }
  };
  A.ListEquality.prototype = {
    hash$1(list) {
      var t1, hash, i;
      this.$ti._eval$1("List<1>?")._as(list);
      for (t1 = list.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + B.JSInt_methods.get$hashCode(list[i]) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A.Digest.prototype = {
    $eq(_, other) {
      var a, b, n, t1, mismatch, i, t2;
      if (other == null)
        return false;
      if (other instanceof A.Digest) {
        a = this.bytes;
        b = other.bytes;
        n = a.length;
        t1 = b.length;
        if (n !== t1)
          return false;
        for (mismatch = 0, i = 0; i < n; ++i) {
          t2 = a[i];
          if (!(i < t1))
            return A.ioore(b, i);
          mismatch |= t2 ^ b[i];
        }
        return mismatch === 0;
      }
      return false;
    },
    get$hashCode(_) {
      return B.C_ListEquality.hash$1(this.bytes);
    },
    toString$0(_) {
      return A._hexEncode(this.bytes);
    }
  };
  A.DigestSink.prototype = {
    add$1(_, value) {
      type$.Digest._as(value);
      if (this._digest_sink$_value != null)
        throw A.wrapException(A.StateError$("add may only be called once."));
      this._digest_sink$_value = value;
    },
    close$0() {
      if (this._digest_sink$_value == null)
        throw A.wrapException(A.StateError$("add must be called once."));
    }
  };
  A.Hash.prototype = {
    convert$1(data) {
      var innerSink, t1;
      type$.List_int._as(data);
      innerSink = new A.DigestSink();
      t1 = A.Sha512Sink$(type$.Sink_Digest._as(innerSink));
      t1.add$1(0, data);
      t1.close$0();
      t1 = innerSink._digest_sink$_value;
      t1.toString;
      return t1;
    }
  };
  A.HashSink.prototype = {
    add$1(_, data) {
      var _this = this;
      type$.List_int._as(data);
      if (_this._hash_sink$_isClosed)
        throw A.wrapException(A.StateError$("Hash.add() called after close()."));
      _this._lengthInBytes = _this._lengthInBytes + J.get$length$asx(data);
      _this._pendingData.addAll$1(0, data);
      _this._iterate$0();
    },
    close$0() {
      var t1, _this = this;
      if (_this._hash_sink$_isClosed)
        return;
      _this._hash_sink$_isClosed = true;
      _this._finalizeData$0();
      _this._iterate$0();
      t1 = _this._hash_sink$_sink;
      t1.add$1(0, new A.Digest(_this._byteDigest$0()));
      t1.close$0();
    },
    _byteDigest$0() {
      var cachedDigest, t1, byteDigest, byteData, i;
      if (B.C_Endian === $.$get$Endian_host())
        return A.NativeUint8List_NativeUint8List$view(A.NativeUint32List_NativeUint32List$view(this._digest.buffer, 0, 16).buffer, 0, null);
      cachedDigest = A.NativeUint32List_NativeUint32List$view(this._digest.buffer, 0, 16);
      t1 = cachedDigest.byteLength;
      byteDigest = new Uint8Array(t1);
      byteData = A.NativeByteData_NativeByteData$view(byteDigest.buffer, 0, null);
      for (t1 = cachedDigest.length, i = 0; i < t1; ++i)
        B.NativeByteData_methods._setUint32$3(byteData, i * 4, cachedDigest[i], false);
      return byteDigest;
    },
    _iterate$0() {
      var t3, i, j,
        t1 = this._pendingData,
        pendingDataBytes = A.NativeByteData_NativeByteData$view(t1._typed_buffer$_buffer.buffer, 0, null),
        t2 = this._currentChunk,
        pendingDataChunks = B.JSInt_methods.$tdiv(t1._typed_buffer$_length, t2.byteLength);
      for (t3 = t2.length, i = 0; i < pendingDataChunks; ++i) {
        for (j = 0; j < t3; ++j)
          t2[j] = B.NativeByteData_methods._getUint32$2(pendingDataBytes, i * t2.byteLength + j * 4, false);
        this.updateHash$1(t2);
      }
      t2 = pendingDataChunks * t2.byteLength;
      A.RangeError_checkValidRange(0, t2, t1.get$length(t1));
      if (t2 > 0)
        t1._closeGap$2(t1, 0, t2);
    },
    _finalizeData$0() {
      var t3, contentsLength, t4, i, lengthInBits, offset, byteData, _this = this,
        t1 = _this._pendingData,
        t2 = A._instanceType(t1)._eval$1("TypedDataBuffer.E");
      t1._typed_buffer$_add$1(t2._as(128));
      t3 = _this._signatureBytes;
      contentsLength = _this._lengthInBytes + 1 + t3;
      t4 = _this._currentChunk.byteLength;
      for (t4 = ((contentsLength + t4 - 1 & -t4) >>> 0) - contentsLength, i = 0; i < t4; ++i)
        t1._typed_buffer$_add$1(t2._as(0));
      t2 = _this._lengthInBytes;
      if (t2 > 1125899906842623)
        throw A.wrapException(A.UnsupportedError$("Hashing is unsupported for messages with more than 2^53 bits."));
      lengthInBits = t2 * 8;
      offset = t1._typed_buffer$_length + (t3 - 8);
      t1.addAll$1(0, new Uint8Array(t3));
      byteData = A.NativeByteData_NativeByteData$view(t1._typed_buffer$_buffer.buffer, 0, null);
      B.NativeByteData_methods._setUint32$3(byteData, offset, B.JSInt_methods._shrOtherPositive$1(lengthInBits, 32), false);
      B.NativeByteData_methods._setUint32$3(byteData, offset + 4, lengthInBits >>> 0, false);
    },
    $isSink: 1
  };
  A._Sha512.prototype = {
    startChunkedConversion$1(sink) {
      var t1, t2, t3, t4;
      type$.Sink_Digest._as(sink);
      t1 = new Uint32Array(A._ensureNativeList(A._setArrayType([1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], type$.JSArray_int)));
      t2 = new Uint32Array(160);
      t3 = new Uint32Array(38);
      t4 = A.Uint8Buffer$();
      return new A._ByteAdapterSink(new A.Sha512Sink(t1, t2, t3, sink, new Uint32Array(32), t4, 16));
    }
  };
  A._Sha64BitSink.prototype = {
    _shr$5(bits, word, offset, ret, offsetR) {
      var t1, t2, t3, t4;
      if (bits < 32 && true) {
        if (!(offset >= 0 && offset < word.length))
          return A.ioore(word, offset);
        t1 = B.JSInt_methods._shrBothPositive$1(word[offset], bits);
      } else
        t1 = 0;
      if (!(offsetR < 38))
        return A.ioore(ret, offsetR);
      ret[offsetR] = t1;
      t1 = 1 + offsetR;
      if (bits > 32) {
        if (!(offset >= 0 && offset < word.length))
          return A.ioore(word, offset);
        t2 = B.JSInt_methods._shrReceiverPositive$1(word[offset], bits - 32);
      } else if (bits === 32) {
        if (!(offset >= 0 && offset < word.length))
          return A.ioore(word, offset);
        t2 = word[offset];
      } else {
        t2 = word.length;
        if (!(offset >= 0 && offset < t2))
          return A.ioore(word, offset);
        t3 = B.JSInt_methods.$shl(word[offset], 32 - bits);
        t4 = 1 + offset;
        if (!(t4 < t2))
          return A.ioore(word, t4);
        t4 = (t3 | B.JSInt_methods._shrBothPositive$1(word[t4], bits)) >>> 0;
        t2 = t4;
      }
      if (!(t1 < 38))
        return A.ioore(ret, t1);
      ret[t1] = t2;
    },
    _shl$5(bits, word, offset, ret, offsetR) {
      var t1, t2, t3;
      if (bits > 32) {
        t1 = 1 + offset;
        if (!(t1 >= 0 && t1 < word.length))
          return A.ioore(word, t1);
        t1 = B.JSInt_methods.$shl(word[t1], bits - 32);
      } else if (bits === 32) {
        t1 = 1 + offset;
        if (!(t1 >= 0 && t1 < word.length))
          return A.ioore(word, t1);
        t1 = word[t1];
      } else if (bits >= 0) {
        t1 = word.length;
        if (!(offset >= 0 && offset < t1))
          return A.ioore(word, offset);
        t2 = B.JSInt_methods.$shl(word[offset], bits);
        t3 = 1 + offset;
        if (!(t3 < t1))
          return A.ioore(word, t3);
        t3 = (t2 | B.JSInt_methods._shrReceiverPositive$1(word[t3], 32 - bits)) >>> 0;
        t1 = t3;
      } else
        t1 = 0;
      if (!(offsetR < 38))
        return A.ioore(ret, offsetR);
      ret[offsetR] = t1;
      t1 = 1 + offsetR;
      if (bits < 32 && bits >= 0) {
        t2 = 1 + offset;
        if (!(t2 >= 0 && t2 < word.length))
          return A.ioore(word, t2);
        t2 = B.JSInt_methods.$shl(word[t2], bits);
      } else
        t2 = 0;
      if (!(t1 < 38))
        return A.ioore(ret, t1);
      ret[t1] = t2;
    },
    _or$6(word1, offset1, word2, offset2, ret, offsetR) {
      var t1, t2;
      if (!(offset1 < 38))
        return A.ioore(word1, offset1);
      t1 = word1[offset1];
      if (!(offset2 < 38))
        return A.ioore(word2, offset2);
      t2 = word2[offset2];
      if (!(offsetR < 38))
        return A.ioore(ret, offsetR);
      ret[offsetR] = (t1 | t2) >>> 0;
      t2 = 1 + offsetR;
      offset1 = 1 + offset1;
      if (!(offset1 < 38))
        return A.ioore(word1, offset1);
      offset1 = word1[offset1];
      offset2 = 1 + offset2;
      if (!(offset2 < 38))
        return A.ioore(word2, offset2);
      offset2 = word2[offset2];
      if (!(t2 < 38))
        return A.ioore(ret, t2);
      ret[t2] = (offset1 | offset2) >>> 0;
    },
    _xor$6(word1, offset1, word2, offset2, ret, offsetR) {
      var t1, t2;
      if (!(offset1 < 38))
        return A.ioore(word1, offset1);
      t1 = word1[offset1];
      if (!(offset2 < 38))
        return A.ioore(word2, offset2);
      t2 = word2[offset2];
      if (!(offsetR < 38))
        return A.ioore(ret, offsetR);
      ret[offsetR] = (t1 ^ t2) >>> 0;
      t2 = 1 + offsetR;
      offset1 = 1 + offset1;
      if (!(offset1 < 38))
        return A.ioore(word1, offset1);
      offset1 = word1[offset1];
      offset2 = 1 + offset2;
      if (!(offset2 < 38))
        return A.ioore(word2, offset2);
      offset2 = word2[offset2];
      if (!(t2 < 38))
        return A.ioore(ret, t2);
      ret[t2] = (offset1 ^ offset2) >>> 0;
    },
    _sha512_slowsinks$_add$6(word1, offset1, word2, offset2, ret, offsetR) {
      var t1, t2, t3, t4, t5, t6, t7;
      type$.Uint32List._as(word1);
      t1 = 1 + offsetR;
      t2 = 1 + offset1;
      t3 = word1.length;
      if (!(t2 < t3))
        return A.ioore(word1, t2);
      t4 = word1[t2];
      t5 = 1 + offset2;
      t6 = word2.length;
      if (!(t5 >= 0 && t5 < t6))
        return A.ioore(word2, t5);
      t5 = word2[t5];
      t7 = ret.length;
      if (!(t1 < t7))
        return A.ioore(ret, t1);
      ret[t1] = t4 + t5;
      if (!(offset1 < t3))
        return A.ioore(word1, offset1);
      offset1 = word1[offset1];
      if (!(offset2 >= 0 && offset2 < t6))
        return A.ioore(word2, offset2);
      offset2 = word2[offset2];
      t1 = ret[t1] < word1[t2] ? 1 : 0;
      if (!(offsetR < t7))
        return A.ioore(ret, offsetR);
      ret[offsetR] = offset1 + offset2 + t1;
    },
    _addTo2$4(word1, offset1, word2, offset2) {
      var _addTemp, t3,
        t1 = 1 + offset1,
        t2 = word1.length;
      if (!(t1 < t2))
        return A.ioore(word1, t1);
      _addTemp = word1[t1];
      t3 = 1 + offset2;
      if (!(t3 < 38))
        return A.ioore(word2, t3);
      word1[t1] = _addTemp + word2[t3];
      if (!(offset1 < t2))
        return A.ioore(word1, offset1);
      t2 = word1[offset1];
      if (!(offset2 < 38))
        return A.ioore(word2, offset2);
      offset2 = word2[offset2];
      word1[offset1] = t2 + (offset2 + (word1[t1] < _addTemp ? 1 : 0));
    },
    updateHash$1(chunk) {
      var t1, t2, i, t3, t4, t5, t6, _this = this;
      for (t1 = _this._extended, t2 = chunk.length, i = 0; i < 32; ++i) {
        if (!(i < t2))
          return A.ioore(chunk, i);
        t1[i] = chunk[i];
      }
      for (t2 = _this._sha512_slowsinks$_nums, i = 32; i < 160; i += 2) {
        t3 = i - 4;
        _this._shr$5(19, t1, t3, t2, 0);
        _this._shl$5(45, t1, t3, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 4);
        _this._shr$5(61, t1, t3, t2, 0);
        _this._shl$5(3, t1, t3, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 6);
        _this._shr$5(6, t1, t3, t2, 8);
        _this._xor$6(t2, 6, t2, 8, t2, 10);
        _this._xor$6(t2, 4, t2, 10, t2, 28);
        _this._sha512_slowsinks$_add$6(t2, 28, t1, i - 14, t2, 30);
        t3 = i - 30;
        _this._shr$5(1, t1, t3, t2, 0);
        _this._shl$5(63, t1, t3, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 4);
        _this._shr$5(8, t1, t3, t2, 0);
        _this._shl$5(56, t1, t3, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 6);
        _this._shr$5(7, t1, t3, t2, 8);
        _this._xor$6(t2, 6, t2, 8, t2, 10);
        _this._xor$6(t2, 4, t2, 10, t2, 28);
        _this._sha512_slowsinks$_add$6(t2, 28, t1, i - 32, t2, 32);
        _this._sha512_slowsinks$_add$6(t2, 30, t2, 32, t1, i);
      }
      t3 = _this._digest;
      B.NativeUint32List_methods.setRange$3(t2, 12, 28, t3);
      for (i = 0; i < 160; i += 2) {
        _this._shr$5(14, t2, 20, t2, 0);
        _this._shl$5(50, t2, 20, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 4);
        _this._shr$5(18, t2, 20, t2, 0);
        _this._shl$5(46, t2, 20, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 6);
        _this._shr$5(41, t2, 20, t2, 0);
        _this._shl$5(23, t2, 20, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 8);
        _this._xor$6(t2, 6, t2, 8, t2, 10);
        _this._xor$6(t2, 4, t2, 10, t2, 28);
        _this._sha512_slowsinks$_add$6(t2, 26, t2, 28, t2, 30);
        t4 = t2[20];
        t5 = t2[22];
        t6 = t2[24];
        t2[32] = (t4 & (t5 ^ t6) ^ t6) >>> 0;
        t6 = t2[21];
        t5 = t2[23];
        t4 = t2[25];
        t2[33] = (t6 & (t5 ^ t4) ^ t4) >>> 0;
        _this._sha512_slowsinks$_add$6(t2, 30, t2, 32, t2, 34);
        _this._sha512_slowsinks$_add$6($.$get$_noise32(), i, t1, i, t2, 36);
        _this._sha512_slowsinks$_add$6(t2, 34, t2, 36, t2, 28);
        _this._shr$5(28, t2, 12, t2, 0);
        _this._shl$5(36, t2, 12, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 4);
        _this._shr$5(34, t2, 12, t2, 0);
        _this._shl$5(30, t2, 12, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 6);
        _this._shr$5(39, t2, 12, t2, 0);
        _this._shl$5(25, t2, 12, t2, 2);
        _this._or$6(t2, 0, t2, 2, t2, 8);
        _this._xor$6(t2, 6, t2, 8, t2, 10);
        _this._xor$6(t2, 4, t2, 10, t2, 32);
        t4 = t2[12];
        t5 = t2[14];
        t6 = t2[16];
        t2[34] = (t4 & (t5 | t6) | t5 & t6) >>> 0;
        t6 = t2[13];
        t5 = t2[15];
        t4 = t2[17];
        t2[35] = (t6 & (t5 | t4) | t5 & t4) >>> 0;
        _this._sha512_slowsinks$_add$6(t2, 32, t2, 34, t2, 30);
        t2[26] = t2[24];
        t2[27] = t2[25];
        t2[24] = t2[22];
        t2[25] = t2[23];
        t2[22] = t2[20];
        t2[23] = t2[21];
        _this._sha512_slowsinks$_add$6(t2, 18, t2, 28, t2, 20);
        t2[18] = t2[16];
        t2[19] = t2[17];
        t2[16] = t2[14];
        t2[17] = t2[15];
        t2[14] = t2[12];
        t2[15] = t2[13];
        _this._sha512_slowsinks$_add$6(t2, 28, t2, 30, t2, 12);
      }
      _this._addTo2$4(t3, 0, t2, 12);
      _this._addTo2$4(t3, 2, t2, 14);
      _this._addTo2$4(t3, 4, t2, 16);
      _this._addTo2$4(t3, 6, t2, 18);
      _this._addTo2$4(t3, 8, t2, 20);
      _this._addTo2$4(t3, 10, t2, 22);
      _this._addTo2$4(t3, 12, t2, 24);
      _this._addTo2$4(t3, 14, t2, 26);
    }
  };
  A.Sha512Sink.prototype = {};
  A.Signature.prototype = {
    toCompactHex$0() {
      return B.JSString_methods.padLeft$2(A._lateReadCheck(this.__Signature_R, "R").toRadixString$1(0, 16), 64, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(this.__Signature_S, "S").toRadixString$1(0, 16), 64, "0");
    },
    toASN1Hex$0() {
      var i,
        asn1 = new A.ASN1Sequence(A.List_List$from(A._setArrayType([new A.ASN1Integer(A._lateReadCheck(this.__Signature_R, "R")), new A.ASN1Integer(A._lateReadCheck(this.__Signature_S, "S"))], type$.JSArray_ASN1Object), true, type$.ASN1Object)).encode$0(),
        _length = asn1.length,
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.String);
      for (i = 0; i < _length; ++i)
        _list[i] = B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(asn1[i], 16), 2, "0");
      return B.JSArray_methods.join$0(_list);
    },
    toString$0(_) {
      return this.toASN1Hex$0();
    }
  };
  A.AffinePoint.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.AffinePoint) {
        t1 = A._lateReadCheck(this.__AffinePoint_X, "X").compareTo$1(0, A._lateReadCheck(other.__AffinePoint_X, "X"));
        if (t1 === 0)
          t1 = A._lateReadCheck(this.__AffinePoint_Y, "Y").compareTo$1(0, A._lateReadCheck(other.__AffinePoint_Y, "Y")) === 0;
        else
          t1 = false;
      } else
        t1 = false;
      return t1;
    }
  };
  A.JacobianPoint.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.JacobianPoint) {
        t1 = A._lateReadCheck(this.__JacobianPoint_X, "X").compareTo$1(0, A._lateReadCheck(other.__JacobianPoint_X, "X"));
        if (t1 === 0) {
          t1 = A._lateReadCheck(this.__JacobianPoint_Y, "Y").compareTo$1(0, A._lateReadCheck(other.__JacobianPoint_Y, "Y"));
          if (t1 === 0)
            t1 = A._lateReadCheck(this.__JacobianPoint_Z, "Z").compareTo$1(0, A._lateReadCheck(other.__JacobianPoint_Z, "Z")) === 0;
          else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    }
  };
  A.EllipticCurve.prototype = {
    get$a() {
      return A._lateReadCheck(this.__EllipticCurve_a, "a");
    },
    isOnCurve$1(point) {
      var y2 = A._lateReadCheck(point.__AffinePoint_Y, "Y").$mul(0, A._lateReadCheck(point.__AffinePoint_Y, "Y")).$mod(0, A._lateReadCheck(this.__EllipticCurve_p, "p")),
        t1 = this._polynomial$1(A._lateReadCheck(point.__AffinePoint_X, "X")).compareTo$1(0, y2);
      return t1 === 0;
    },
    scalarMul$2(basePoint, k) {
      var _p, t1, byte, bitNum;
      type$.List_int._as(k);
      _p = new A.JacobianPoint(A._lateReadCheck(basePoint.__AffinePoint_X, "X"), A._lateReadCheck(basePoint.__AffinePoint_Y, "Y"), $.$get$_BigIntImpl_zero());
      for (t1 = J.get$iterator$ax(k); t1.moveNext$0();) {
        byte = t1.get$current();
        for (bitNum = 0; bitNum < 8; ++bitNum) {
          _p = this._doubleJacobian$3(A._lateReadCheck(_p.__JacobianPoint_X, "X"), A._lateReadCheck(_p.__JacobianPoint_Y, "Y"), A._lateReadCheck(_p.__JacobianPoint_Z, "Z"));
          if ((byte & 128) === 128)
            _p = this._addJacobian$6(A._lateReadCheck(basePoint.__AffinePoint_X, "X"), A._lateReadCheck(basePoint.__AffinePoint_Y, "Y"), $.$get$_BigIntImpl_one(), A._lateReadCheck(_p.__JacobianPoint_X, "X"), A._lateReadCheck(_p.__JacobianPoint_Y, "Y"), A._lateReadCheck(_p.__JacobianPoint_Z, "Z"));
          byte = byte << 1;
        }
      }
      return this._affineFromJacobian$3(A._lateReadCheck(_p.__JacobianPoint_X, "X"), A._lateReadCheck(_p.__JacobianPoint_Y, "Y"), A._lateReadCheck(_p.__JacobianPoint_Z, "Z"));
    },
    scalarBaseMul$1(k) {
      var t1;
      type$.List_int._as(k);
      t1 = this.__EllipticCurve_G;
      return this.scalarMul$2(new A.AffinePoint(A._lateReadCheck(A._lateReadCheck(t1, "G").__AffinePoint_X, "X"), A._lateReadCheck(A._lateReadCheck(t1, "G").__AffinePoint_Y, "Y")), k);
    },
    _addJacobian$6(x1, y1, z1, x2, y2, z2) {
      var t1, z1z1, z2z2, u1, h, t2, i, j, s1, r, yEqual, v, x3, y3, z3, _s1_ = "p";
      type$.BigInt._as(z1);
      if (z1.get$sign(z1) === 0)
        return new A.JacobianPoint(x2, y2, z2);
      if (z2.get$sign(z2) === 0)
        return new A.JacobianPoint(x1, y1, z1);
      t1 = this.__EllipticCurve_p;
      z1z1 = z1.$mul(0, z1).$mod(0, A._lateReadCheck(t1, _s1_));
      z2z2 = z2.$mul(0, z2).$mod(0, A._lateReadCheck(t1, _s1_));
      u1 = x1.$mul(0, z2z2).$mod(0, A._lateReadCheck(t1, _s1_));
      h = x2.$mul(0, z1z1).$mod(0, A._lateReadCheck(t1, _s1_)).$sub(0, u1);
      t2 = h.get$sign(h);
      if (h.get$sign(h) === -1)
        h = h.$add(0, A._lateReadCheck(t1, _s1_));
      i = h.$shl(0, 1);
      i = i.$mul(0, i);
      j = h.$mul(0, i);
      s1 = y1.$mul(0, z2).$mul(0, z2z2).$mod(0, A._lateReadCheck(t1, _s1_));
      r = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, A._lateReadCheck(t1, _s1_)).$sub(0, s1);
      if (r.get$sign(r) === -1)
        r = r.$add(0, A._lateReadCheck(t1, _s1_));
      yEqual = r.get$sign(r) === 0;
      if (t2 === 0 && yEqual)
        return this._doubleJacobian$3(x1, y1, z1);
      r = r.$shl(0, 1);
      v = u1.$mul(0, i);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, v).$sub(0, v).$mod(0, A._lateReadCheck(t1, _s1_));
      y3 = r.$mul(0, v.$sub(0, x3)).$sub(0, s1.$mul(0, j).$shl(0, 1)).$mod(0, A._lateReadCheck(t1, _s1_));
      z3 = z1.$add(0, z2);
      return new A.JacobianPoint(x3, y3, z3.$mul(0, z3).$sub(0, z1z1).$sub(0, z2z2).$mul(0, h).$mod(0, A._lateReadCheck(t1, _s1_)));
    },
    _doubleJacobian$3(x, y, z) {
      var delta, gamma, alpha, alpha2, x3, z3, beta, y3, t2, t3, xx, yy, yyyy, e, _this = this, _s1_ = "p",
        t1 = _this.__EllipticCurve_a;
      switch (A._lateReadCheck(t1, "a").toInt$0(0)) {
        case -3:
          t1 = _this.__EllipticCurve_p;
          delta = z.$mul(0, z).$mod(0, A._lateReadCheck(t1, _s1_));
          gamma = y.$mul(0, y).$mod(0, A._lateReadCheck(t1, _s1_));
          alpha = x.$sub(0, delta);
          if (alpha.get$sign(alpha) === -1)
            alpha = alpha.$add(0, A._lateReadCheck(t1, _s1_));
          alpha = alpha.$mul(0, x.$add(0, delta));
          alpha = alpha.$shl(0, 1).$add(0, alpha);
          alpha2 = x.$mul(0, gamma);
          x3 = alpha.$mul(0, alpha).$sub(0, alpha2.$shl(0, 3).$mod(0, A._lateReadCheck(t1, _s1_)));
          if (x3.get$sign(x3) === -1)
            x3 = x3.$add(0, A._lateReadCheck(t1, _s1_));
          x3 = x3.$mod(0, A._lateReadCheck(t1, _s1_));
          z3 = y.$add(0, z);
          z3 = z3.$mul(0, z3).$sub(0, gamma);
          z3 = (z3.get$sign(z3) === -1 ? z3.$add(0, A._lateReadCheck(t1, _s1_)) : z3).$sub(0, delta);
          if (z3.get$sign(z3) === -1)
            z3 = z3.$add(0, A._lateReadCheck(t1, _s1_));
          z3 = z3.$mod(0, A._lateReadCheck(t1, _s1_));
          beta = alpha2.$shl(0, 2).$sub(0, x3);
          y3 = alpha.$mul(0, beta.get$sign(beta) === -1 ? beta.$add(0, A._lateReadCheck(t1, _s1_)) : beta).$sub(0, gamma.$mul(0, gamma).$shl(0, 3).$mod(0, A._lateReadCheck(t1, _s1_)));
          if (y3.get$sign(y3) === -1)
            y3 = y3.$add(0, A._lateReadCheck(t1, _s1_));
          return new A.JacobianPoint(x3, y3.$mod(0, A._lateReadCheck(t1, _s1_)), z3);
        case 0:
          t2 = y.$mul(0, z);
          t3 = $.$get$_BigIntImpl_two();
          z3 = t2.$mul(0, t3);
          t2 = _this.__EllipticCurve_p;
          xx = x.modPow$2(0, t3, A._lateReadCheck(t2, _s1_));
          yy = y.modPow$2(0, t3, A._lateReadCheck(t2, _s1_));
          yyyy = y.modPow$2(0, A._BigIntImpl__BigIntImpl$from(4), A._lateReadCheck(t2, _s1_));
          x3 = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xx).$add(0, A._lateReadCheck(t1, "a")).modPow$2(0, t3, A._lateReadCheck(t2, _s1_)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, x).$mul(0, yy));
          if (x3.get$sign(x3) < 0)
            x3 = x3.$add(0, A._lateReadCheck(t2, _s1_));
          e = A._BigIntImpl__BigIntImpl$from(4).$mul(0, x).$mul(0, yy).$sub(0, x3);
          if (e.get$sign(e) < 0)
            e = e.$add(0, A._lateReadCheck(t2, _s1_));
          return new A.JacobianPoint(x3, A._BigIntImpl__BigIntImpl$from(3).$mul(0, xx).$mul(0, e).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, yyyy)), z3);
        default:
          throw A.wrapException(A.Exception_Exception("unknown curve type: a = " + _this.get$a().toString$0(0)));
      }
    },
    _affineFromJacobian$3(x, y, z) {
      var t1, zinv, zinvsq;
      if (z.get$sign(z) === 0)
        return new A.AffinePoint(x, y);
      t1 = this.__EllipticCurve_p;
      zinv = z.modInverse$1(0, A._lateReadCheck(t1, "p"));
      zinvsq = zinv.modPow$2(0, $.$get$_BigIntImpl_two(), A._lateReadCheck(t1, "p"));
      return new A.AffinePoint(x.$mul(0, zinvsq).$mod(0, A._lateReadCheck(t1, "p")), y.$mul(0, zinvsq.$mul(0, zinv)).$mod(0, A._lateReadCheck(t1, "p")));
    },
    _polynomial$1(x) {
      return x.$mul(0, x).$mul(0, x).$add(0, x.$mul(0, A._lateReadCheck(this.__EllipticCurve_a, "a"))).$add(0, A._lateReadCheck(this.__EllipticCurve_b, "b")).$mod(0, A._lateReadCheck(this.__EllipticCurve_p, "p"));
    },
    generatePrivateKey$0() {
      var t9, _list, i, t10, t11, result, _this = this,
        t1 = $.$get$Random__secureRandom(),
        t2 = _this.__EllipticCurve_bitSize,
        byteLen = B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(t2, "bitSize") + 7, 3),
        _p = A.AffinePoint$(),
        rand = A._Cell$named("rand"),
        t3 = type$.List_int,
        t4 = _this.__EllipticCurve_G,
        t5 = _this.__EllipticCurve_n,
        t6 = rand.__late_helper$_name,
        t7 = type$.JSArray_String,
        t8 = type$.JSArray_int;
      while (true) {
        t9 = A._lateReadCheck(_p.__AffinePoint_X, "X").compareTo$1(0, $.$get$_BigIntImpl_zero());
        if (!(t9 === 0))
          break;
        c$0: {
          _list = A._setArrayType(new Array(byteLen), t8);
          for (i = 0; i < byteLen; ++i)
            _list[i] = t1.nextInt$1(256);
          rand._value = _list;
          if (0 >= _list.length)
            return A.ioore(_list, 0);
          t9 = _list[0];
          t10 = $.mask[B.JSInt_methods.$mod(A._lateReadCheck(t2, "bitSize"), 8)];
          if (typeof t9 !== "number")
            return t9.$and();
          B.JSArray_methods.$indexSet(_list, 0, t9 & t10);
          t9 = rand._value;
          if (t9 === rand)
            A.throwExpression(A.LateError$localNI(t6));
          t10 = J.getInterceptor$asx(t9);
          t11 = t10.$index(t9, 1);
          if (typeof t11 !== "number")
            return t11.$xor();
          t10.$indexSet(t9, 1, (t11 ^ 66) >>> 0);
          _list = A._setArrayType(new Array(byteLen), t7);
          for (i = 0; i < byteLen; ++i) {
            t9 = rand._value;
            if (t9 === rand)
              A.throwExpression(A.LateError$localNI(t6));
            _list[i] = J.toRadixString$1$n(J.$index$asx(t9, i), 16);
          }
          t9 = B.JSArray_methods.join$0(_list);
          result = A._BigIntImpl__tryParse(t9, 16);
          if (result == null)
            A.throwExpression(A.FormatException$("Could not parse BigInt", t9, null));
          if (result.compareTo$1(0, A._lateReadCheck(t5, "n")) >= 0)
            break c$0;
          t9 = rand._value;
          if (t9 === rand)
            A.throwExpression(A.LateError$localNI(t6));
          t3._as(t9);
          _p = _this.scalarMul$2(new A.AffinePoint(A._lateReadCheck(A._lateReadCheck(t4, "G").__AffinePoint_X, "X"), A._lateReadCheck(A._lateReadCheck(t4, "G").__AffinePoint_Y, "Y")), t9);
        }
      }
      t1 = new A.PrivateKey(_this);
      t1.PrivateKey$fromBytes$2(_this, rand._readLocal$0());
      return t1;
    },
    publicKeyToHex$1(pub) {
      var t1 = B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(this.__EllipticCurve_bitSize, "bitSize") + 7, 3) * 2;
      return "04" + B.JSString_methods.padLeft$2(A._lateReadCheck(pub.__AffinePoint_X, "X").toRadixString$1(0, 16), t1, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(pub.__AffinePoint_Y, "Y").toRadixString$1(0, 16), t1, "0");
    },
    compressedHexToPublicKey$1(hex) {
      var x, y, p1, t3, pub, _this = this,
        _s29_ = "invalid public key hex string",
        t1 = B.JSString_methods.substring$2(hex, 0, 2),
        t2 = t1 === "03";
      if (!t2 && t1 !== "02")
        throw A.wrapException(_s29_);
      t1 = 2 * (1 + B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(_this.__EllipticCurve_bitSize, "bitSize") + 7, 3));
      if (hex.length !== t1)
        throw A.wrapException(_s29_);
      x = A._BigIntImpl_parse(B.JSString_methods.substring$2(hex, 2, t1), 16);
      t1 = _this.__EllipticCurve_p;
      if (x.compareTo$1(0, A._lateReadCheck(t1, "p")) > 0)
        throw A.wrapException("invalid public key X value");
      y = _this._polynomial$1(x);
      p1 = A._lateReadCheck(t1, "p").$add(0, $.$get$_BigIntImpl_one());
      y = y.modPow$2(0, p1.$sub(0, p1.$mod(0, A._BigIntImpl__BigIntImpl$from(4))).$shr(0, 2), A._lateReadCheck(t1, "p"));
      if (y._used !== 0) {
        t3 = y._digits;
        if (0 >= t3.length)
          return A.ioore(t3, 0);
        t3 = (t3[0] & 1) === 0;
      } else
        t3 = true;
      pub = new A.PublicKey(_this, x, !t3 !== t2 ? A._lateReadCheck(t1, "p").$sub(0, y) : y);
      if (!_this.isOnCurve$1(pub))
        throw A.wrapException("public key is not on this curve");
      return pub;
    },
    $isCurve: 1
  };
  A.EllipticException.prototype = {
    get$message() {
      return A._lateReadCheck(this.__EllipticException_message, "message");
    },
    toString$0(_) {
      return "SchnorrException: " + A._lateReadCheck(this.__EllipticException_message, "message");
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(A._lateReadCheck(this.__EllipticException_message, "message"));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.EllipticException && A._lateReadCheck(this.__EllipticException_message, "message") === A._lateReadCheck(other.__EllipticException_message, "message");
    },
    $isException: 1
  };
  A.PrivateKey.prototype = {
    PrivateKey$fromBytes$2(curve, bytes) {
      var t1, i,
        byteLen = B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(A._lateReadCheck(this.__PrivateKey_curve, "curve").__EllipticCurve_bitSize, "bitSize") + 7, 3),
        _list = J.JSArray_JSArray$allocateGrowable(byteLen, type$.String);
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < byteLen; ++i)
        _list[i] = B.JSString_methods.padLeft$2(J.toRadixString$1$n(t1.$index(bytes, i), 16), 2, "0");
      this.__PrivateKey_D = A._BigIntImpl_parse(B.JSArray_methods.join$0(_list), 16);
    },
    get$bytes() {
      var i, t1,
        byteLen = B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(A._lateReadCheck(this.__PrivateKey_curve, "curve").__EllipticCurve_bitSize, "bitSize") + 7, 3),
        hex = B.JSString_methods.padLeft$2(A._lateReadCheck(this.__PrivateKey_D, "D").toRadixString$1(0, 16), byteLen * 2, "0"),
        _list = J.JSArray_JSArray$allocateGrowable(byteLen, type$.int);
      for (i = 0; i < byteLen; ++i) {
        t1 = i * 2;
        _list[i] = A.int_parse(B.JSString_methods.substring$2(hex, t1, t1 + 2), 16);
      }
      return _list;
    },
    get$publicKey() {
      var t1 = A._lateReadCheck(this.__PrivateKey_curve, "curve"),
        t2 = t1.scalarBaseMul$1(this.get$bytes());
      return new A.PublicKey(t1, A._lateReadCheck(t2.__AffinePoint_X, "X"), A._lateReadCheck(t2.__AffinePoint_Y, "Y"));
    },
    toString$0(_) {
      return A._lateReadCheck(this.__PrivateKey_D, "D").toRadixString$1(0, 16);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.PrivateKey)
        if (A._lateReadCheck(this.__PrivateKey_curve, "curve") === A._lateReadCheck(other.__PrivateKey_curve, "curve"))
          t1 = A._lateReadCheck(this.__PrivateKey_D, "D").compareTo$1(0, A._lateReadCheck(other.__PrivateKey_D, "D")) === 0;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    }
  };
  A.PublicKey.prototype = {
    toString$0(_) {
      var t1 = B.JSInt_methods._shrOtherPositive$1(A._lateReadCheck(this.curve.__EllipticCurve_bitSize, "bitSize") + 7, 3) * 2;
      return "04" + B.JSString_methods.padLeft$2(A._lateReadCheck(this.__AffinePoint_X, "X").toRadixString$1(0, 16), t1, "0") + B.JSString_methods.padLeft$2(A._lateReadCheck(this.__AffinePoint_Y, "Y").toRadixString$1(0, 16), t1, "0");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.PublicKey)
        if (this.curve === other.curve) {
          t1 = A._lateReadCheck(this.__AffinePoint_X, "X").compareTo$1(0, A._lateReadCheck(other.__AffinePoint_X, "X"));
          if (t1 === 0)
            t1 = A._lateReadCheck(this.__AffinePoint_Y, "Y").compareTo$1(0, A._lateReadCheck(other.__AffinePoint_Y, "Y")) === 0;
          else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    }
  };
  A.HexCodec.prototype = {
    get$encoder() {
      return B.C_HexEncoder;
    }
  };
  A.HexEncoder.prototype = {
    convert$1(bytes) {
      var t1, t2, t3, t4;
      for (t1 = J.get$iterator$ax(type$.List_int._as(bytes)), t2 = ""; t1.moveNext$0(); t2 = t3) {
        t3 = t1.get$current();
        if ((t3 & 255) !== t3)
          throw A.wrapException(A.FormatException$("Non-byte integer detected", null, null));
        t4 = t3 < 16 ? "0" : "";
        t3 = t2 + (t4 + B.JSInt_methods.toRadixString$1(t3, 16));
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    }
  };
  A.CaseInsensitiveMap.prototype = {};
  A.CaseInsensitiveMap_closure.prototype = {
    call$1(key) {
      return A._asString(key).toLowerCase();
    },
    $signature: 13
  };
  A.CaseInsensitiveMap$from_closure.prototype = {
    call$1(key) {
      return A._asString(key).toLowerCase();
    },
    $signature: 13
  };
  A.ChunkedCodingDecoder.prototype = {
    convert$1(input) {
      var sink, output, _null = null,
        t1 = type$.List_int;
      t1._as(input);
      sink = new A._Sink(A.StreamController_StreamController(_null, _null, _null, _null, false, t1), B._State_boundary);
      t1 = J.getInterceptor$asx(input);
      output = sink._decode$3(input, 0, t1.get$length(input));
      if (sink._decoder$_state === B._State_end)
        return output;
      throw A.wrapException(A.FormatException$("Input ended unexpectedly.", input, t1.get$length(input)));
    },
    startChunkedConversion$1(sink) {
      return new A._Sink(type$.Sink_List_int._as(sink), B._State_boundary);
    }
  };
  A._Sink.prototype = {
    add$1(_, chunk) {
      type$.List_int._as(chunk);
      return this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(chunk, start, end, isLast) {
      var output;
      type$.List_int._as(chunk);
      A.RangeError_checkValidRange(start, end, J.get$length$asx(chunk));
      output = this._decode$3(chunk, start, end);
      if (!B.NativeUint8List_methods.get$isEmpty(output))
        this._sink.add$1(0, output);
      if (isLast)
        this._decoder$_close$2(chunk, end);
    },
    close$0() {
      return this._decoder$_close$0();
    },
    _decoder$_close$2(chunk, index) {
      type$.nullable_List_int._as(chunk);
      if (this._decoder$_state !== B._State_end)
        throw A.wrapException(A.FormatException$("Input ended unexpectedly.", chunk, index));
      this._sink.close$0();
    },
    _decoder$_close$0() {
      return this._decoder$_close$2(null, null);
    },
    _decode$3(bytes, start, end) {
      var assertCurrentChar, buffer, t1, t2, t3, chunkEnd, _this = this, _null = null, _s5_ = "_size", _box_0 = {};
      _box_0.start = start;
      type$.List_int._as(bytes);
      assertCurrentChar = new A._Sink__decode_assertCurrentChar(_box_0, bytes);
      buffer = A.Uint8Buffer$();
      for (t1 = A._instanceType(buffer)._eval$1("Iterable<TypedDataBuffer.E>"), t2 = J.getInterceptor$asx(bytes); t3 = _box_0.start, t3 !== end;)
        switch (_this._decoder$_state) {
          case B._State_boundary:
            _this.___Sink__size = _this._digitForByte$2(bytes, t3);
            _this._decoder$_state = B._State_size;
            ++_box_0.start;
            break;
          case B._State_size:
            if (J.$eq$(t2.$index(bytes, t3), 13))
              _this._decoder$_state = B._State_iSl;
            else
              _this.___Sink__size = (A._lateReadCheck(_this.___Sink__size, _s5_) << 4 >>> 0) + _this._digitForByte$2(bytes, _box_0.start);
            ++_box_0.start;
            break;
          case B._State_iSl:
            assertCurrentChar.call$2(10, "LF");
            _this._decoder$_state = A._lateReadCheck(_this.___Sink__size, _s5_) === 0 ? B._State_zlF : B._State_body;
            ++_box_0.start;
            break;
          case B._State_body:
            chunkEnd = Math.min(end, t3 + A._lateReadCheck(_this.___Sink__size, _s5_));
            t3 = _box_0.start;
            t1._as(bytes);
            if (t3 < 0)
              A.throwExpression(A.RangeError$range(t3, 0, _null, "start", _null));
            if (t3 > chunkEnd)
              A.throwExpression(A.RangeError$range(chunkEnd, t3, _null, "end", _null));
            buffer._addAll$3(bytes, t3, chunkEnd);
            t3 = A._lateReadCheck(_this.___Sink__size, _s5_) - (chunkEnd - _box_0.start);
            _this.___Sink__size = t3;
            _box_0.start = chunkEnd;
            if (A._lateReadCheck(t3, _s5_) === 0)
              _this._decoder$_state = B._State_cg9;
            break;
          case B._State_cg9:
            assertCurrentChar.call$2(13, "CR");
            _this._decoder$_state = B._State_cg90;
            ++_box_0.start;
            break;
          case B._State_cg90:
            assertCurrentChar.call$2(10, "LF");
            _this._decoder$_state = B._State_boundary;
            ++_box_0.start;
            break;
          case B._State_zlF:
            assertCurrentChar.call$2(13, "CR");
            _this._decoder$_state = B._State_Oj8;
            ++_box_0.start;
            break;
          case B._State_Oj8:
            assertCurrentChar.call$2(10, "LF");
            _this._decoder$_state = B._State_end;
            ++_box_0.start;
            break;
          case B._State_end:
            throw A.wrapException(A.FormatException$("Expected no more data.", bytes, t3));
        }
      return A.NativeUint8List_NativeUint8List$view(buffer._typed_buffer$_buffer.buffer, 0, buffer._typed_buffer$_length);
    },
    _digitForByte$2(bytes, index) {
      var byte, digit, letter;
      type$.List_int._as(bytes);
      byte = J.$index$asx(bytes, index);
      digit = (48 ^ byte) >>> 0;
      if (digit <= 9)
        return digit;
      else {
        letter = (byte | 32) >>> 0;
        if (97 <= letter && letter <= 102)
          return letter - 97 + 10;
      }
      throw A.wrapException(A.FormatException$("Invalid hexadecimal byte 0x" + B.JSString_methods.toUpperCase$0(B.JSInt_methods.toRadixString$1(byte, 16)) + ".", bytes, index));
    }
  };
  A._Sink__decode_assertCurrentChar.prototype = {
    call$2(char, $name) {
      var t1 = this.bytes,
        t2 = this._box_0;
      if (!J.$eq$(J.$index$asx(t1, t2.start), char))
        throw A.wrapException(A.FormatException$("Expected " + $name + ".", t1, t2.start));
    },
    $signature: 81
  };
  A._State.prototype = {
    toString$0(_) {
      return this._decoder$_name;
    }
  };
  A.MediaType.prototype = {
    change$2$mimeType$parameters(mimeType, parameters) {
      var segments, t1, type, subtype, parameters0, _null = null;
      type$.nullable_Map_String_String._as(parameters);
      if (mimeType != null) {
        segments = mimeType.split("/");
        t1 = segments.length;
        if (t1 !== 2)
          throw A.wrapException(A.FormatException$('Invalid mime type "' + mimeType + '".', _null, _null));
        if (0 >= t1)
          return A.ioore(segments, 0);
        type = segments[0];
        if (1 >= t1)
          return A.ioore(segments, 1);
        subtype = segments[1];
      } else {
        type = _null;
        subtype = type;
      }
      if (type == null)
        type = this.type;
      if (subtype == null)
        subtype = this.subtype;
      if (parameters == null) {
        t1 = type$.String;
        parameters = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      }
      t1 = type$.String;
      parameters0 = A.LinkedHashMap_LinkedHashMap$from(this.parameters, t1, t1);
      parameters0.addAll$1(0, parameters);
      return A.MediaType$(type, subtype, parameters0);
    },
    change$1$parameters(parameters) {
      return this.change$2$mimeType$parameters(null, parameters);
    },
    toString$0(_) {
      var buffer = new A.StringBuffer(""),
        t1 = "" + this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      t1._map.forEach$1(0, t1.$ti._eval$1("~(MapView.K,MapView.V)")._as(new A.MediaType_toString_closure(buffer)));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.MediaType_MediaType$parse_closure.prototype = {
    call$0() {
      var t3, t4, t5, t6, parameters, t7, t8, success, t9, value,
        t1 = this.mediaType,
        scanner = new A.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      t4 = scanner.get$lastMatch().$index(0, 0);
      t4.toString;
      scanner.expect$1("/");
      scanner.expect$1(t3);
      t5 = scanner.get$lastMatch().$index(0, 0);
      t5.toString;
      scanner.scan$1(t2);
      t6 = type$.String;
      parameters = A.LinkedHashMap_LinkedHashMap$_empty(t6, t6);
      t6 = type$.Pattern;
      while (true) {
        t7 = scanner._lastMatch = B.JSString_methods.matchAsPrefix$2(";", t1, scanner._position);
        t8 = scanner._lastMatchPosition = scanner._position;
        success = t7 != null;
        t7 = success ? scanner._lastMatchPosition = scanner._position = t7.get$end() : t8;
        if (!success)
          break;
        t6._as(t2);
        t7 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t7);
        scanner._lastMatchPosition = scanner._position;
        if (t7 != null)
          scanner._lastMatchPosition = scanner._position = t7.get$end();
        scanner.expect$1(t3);
        if (scanner._position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        t7 = scanner._lastMatch.$index(0, 0);
        t7.toString;
        scanner.expect$1("=");
        t8 = scanner._lastMatch = t6._as(t3).matchAsPrefix$2(0, t1, scanner._position);
        t9 = scanner._lastMatchPosition = scanner._position;
        success = t8 != null;
        if (success) {
          t8 = scanner._lastMatchPosition = scanner._position = t8.get$end();
          t9 = t8;
        } else
          t8 = t9;
        if (success) {
          if (t8 !== t9)
            scanner._lastMatch = null;
          t8 = scanner._lastMatch.$index(0, 0);
          t8.toString;
          value = t8;
        } else
          value = A.expectQuotedString(scanner);
        t8 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._position);
        scanner._lastMatchPosition = scanner._position;
        if (t8 != null)
          scanner._lastMatchPosition = scanner._position = t8.get$end();
        parameters.$indexSet(0, t7, value);
      }
      scanner.expectDone$0();
      return A.MediaType$(t4, t5, parameters);
    },
    $signature: 82
  };
  A.MediaType_toString_closure.prototype = {
    call$2(attribute, value) {
      var t1, t2, t3;
      A._asString(attribute);
      A._asString(value);
      t1 = this.buffer;
      t1._contents += "; " + attribute + "=";
      t2 = $.$get$nonToken()._nativeRegExp;
      t2 = t2.test(value);
      t3 = t1._contents;
      if (t2) {
        t1._contents = t3 + '"';
        t2 = t1._contents += A.stringReplaceAllFuncUnchecked(value, type$.Pattern._as($.$get$_escapedChar()), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.MediaType_toString__closure())), type$.nullable_String_Function_String._as(null));
        t1._contents = t2 + '"';
      } else
        t1._contents = t3 + value;
    },
    $signature: 34
  };
  A.MediaType_toString__closure.prototype = {
    call$1(match) {
      return "\\" + A.S(match.$index(0, 0));
    },
    $signature: 44
  };
  A.expectQuotedString_closure.prototype = {
    call$1(match) {
      var t1 = match.$index(0, 1);
      t1.toString;
      return t1;
    },
    $signature: 44
  };
  A.ASN1Sequence.prototype = {
    encode$0() {
      var t1 = this.children,
        t2 = A._arrayInstanceType(t1);
      return A.ASN1Object_pack(48, new A.MappedListIterable(t1, t2._eval$1("Uint8List(1)")._as(new A.ASN1Sequence_encode_closure()), t2._eval$1("MappedListIterable<1,Uint8List>")).fold$1$2(0, A._setArrayType([], type$.JSArray_int), new A.ASN1Sequence_encode_closure0(), type$.List_int));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.ASN1Sequence)
        return new A.IterableEquality(type$.IterableEquality_ASN1Object).equals$2(other.children, this.children);
      return false;
    },
    $isASN1Object: 1
  };
  A.ASN1Sequence_encode_closure.prototype = {
    call$1(e) {
      return type$.ASN1Object._as(e).encode$0();
    },
    $signature: 85
  };
  A.ASN1Sequence_encode_closure0.prototype = {
    call$2(previousValue, element) {
      type$.List_int._as(previousValue);
      J.addAll$1$ax(previousValue, type$.Uint8List._as(element));
      return previousValue;
    },
    $signature: 86
  };
  A.ASN1Integer.prototype = {
    encode$0() {
      var t2,
        t1 = this.value;
      if (t1._isNegative)
        t2 = null;
      else
        t2 = B.JSInt_methods.$mod(t1.get$bitLength(t1), 8) === 0 ? B.JSInt_methods._shrOtherPositive$1(t1.get$bitLength(t1) + 7, 3) + 1 : null;
      return A.ASN1Object_pack(2, A.bigIntToBytes(t1, t2));
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.ASN1Integer) {
        t1 = other.value.compareTo$1(0, this.value);
        return t1 === 0;
      }
      return false;
    },
    $isASN1Object: 1
  };
  A.Context.prototype = {
    absolute$7(part1, part2, part3, part4, part5, part6, part7) {
      var t1;
      A._validateArgList("absolute", A._setArrayType([part1, part2, part3, part4, part5, part6, part7], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$8(0, t1 == null ? A.current() : t1, part1, part2, part3, part4, part5, part6, part7);
    },
    absolute$1(part1) {
      return this.absolute$7(part1, null, null, null, null, null, null);
    },
    join$8(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    join$2($receiver, part1, part2) {
      return this.join$8($receiver, part1, part2, null, null, null, null, null, null);
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(parts), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var i, start, previous, t2, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (B.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = B.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      t2 = _this._context$_current;
      from = t2 == null ? A.current() : t2;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return A.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(fromParsed.parts.length, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0)
        return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(this.join$2(0, t2 == null ? A.current() : t2, path));
      }
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 1
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 1
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 37
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1(path) {
      var segments, _null = null,
        t1 = path.length;
      if (t1 === 0)
        return A._Uri__Uri(_null, _null, _null, _null, _null);
      segments = A.Context_Context(this).split$1(0, path);
      if (this.isSeparator$1(B.JSString_methods.codeUnitAt$1(path, t1 - 1)))
        B.JSArray_methods.add$1(segments, "");
      return A._Uri__Uri(_null, _null, segments, _null, _null);
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    }
  };
  A.ParsedPath.prototype = {
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = J.$eq$(B.JSArray_methods.get$last(t1), "") || !J.$eq$(B.JSArray_methods.get$last(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows()) {
        t2.toString;
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, t2, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; i < _this.parts.length; ++i) {
        t2 = _this.separators;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t2 = t1 + A.S(t2[i]);
        t1 = _this.parts;
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t1 = t2 + A.S(t1[i]);
      }
      t1 += A.S(B.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      return t1 !== 0 && B.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive(path, withDrive) {
      if (path.length !== 0 && B.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path();
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    absolutePathToUri$1(path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        B.JSArray_methods.addAll$1(t1, A._setArrayType(["", ""], type$.JSArray_String));
      else if (parsed.get$hasTrailingSeparator())
        B.JSArray_methods.add$1(parsed.parts, "");
      return A._Uri__Uri(null, null, parsed.parts, null, "file");
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (B.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (B.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!A.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return path.length !== 0 && B.JSString_methods._codeUnitAt$1(path, 0) === 47;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = B.JSString_methods.codeUnitAt$1(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = B.JSString_methods._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || B.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(t2))
        return 0;
      if (B.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = B.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path();
      if (uri.get$host() === "") {
        if (path.length >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.isDriveLetter(path, 1))
          path = B.JSString_methods.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + uri.get$host() + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    absolutePathToUri$1(path) {
      var rootParts, t2, _null = null,
        parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "\\\\")) {
        rootParts = new A.WhereIterable(A._setArrayType(t1.split("\\"), type$.JSArray_String), type$.bool_Function_String._as(new A.WindowsStyle_absolutePathToUri_closure()), type$.WhereIterable_String);
        B.JSArray_methods.insert$2(parsed.parts, 0, rootParts.get$last(rootParts));
        if (parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        return A._Uri__Uri(rootParts.get$first(rootParts), _null, parsed.parts, _null, "file");
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "/", "");
        B.JSArray_methods.insert$2(t1, 0, A.stringReplaceAllUnchecked(t2, "\\", ""));
        return A._Uri__Uri(_null, _null, parsed.parts, _null, "file");
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(B.JSString_methods._codeUnitAt$1(path1, i), B.JSString_methods._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 1
  };
  A.serveRequests_closure.prototype = {
    call$0() {
      this.requests.listen$1(new A.serveRequests__closure(this.handler));
    },
    $signature: 0
  };
  A.serveRequests__closure.prototype = {
    call$1(request) {
      return A.handleRequest(type$.HttpRequest._as(request), this.handler);
    },
    $signature: 87
  };
  A.serveRequests_closure0.prototype = {
    call$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      A._logTopLevelError("Asynchronous error\n" + A.S(error), stackTrace);
    },
    $signature: 18
  };
  A.handleRequest_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      A._asString(value);
      this.message._contents += key + ": " + value + "\n";
      return null;
    },
    $signature: 34
  };
  A._fromHttpRequest_closure.prototype = {
    call$2(k, v) {
      this.headers.$indexSet(0, k, type$.List_String._as(v));
    },
    $signature: 6
  };
  A._writeResponse_closure.prototype = {
    call$2(header, value) {
      this.httpResponse.headers.$set$2(A._asString(header), type$.List_String._as(value));
    },
    $signature: 6
  };
  A._writeResponse_closure0.prototype = {
    call$1(_) {
      return this.httpResponse.close$0();
    },
    $signature: 29
  };
  A._logTopLevelError_closure.prototype = {
    call$1(frame) {
      return frame.get$isCore() || frame.get$$package() === "shelf";
    },
    $signature: 24
  };
  A.Body.prototype = {
    set$_stream(_stream) {
      this._stream = type$.nullable_Stream_List_int._as(_stream);
    }
  };
  A.Body__isPlainAscii_closure.prototype = {
    call$1(byte) {
      return (A._asInt(byte) & 128) === 0;
    },
    $signature: 89
  };
  A.Headers.prototype = {
    get$singleValues() {
      var t1, result, _this = this,
        value = _this.__Headers_singleValues;
      if (value === $) {
        t1 = type$.String;
        result = new A.UnmodifiableMapView(A.CaseInsensitiveMap$from(_this.map$2$1(0, new A.Headers_singleValues_closure(), t1, t1), t1), type$.UnmodifiableMapView_String_String);
        A._lateInitializeOnceCheck(_this.__Headers_singleValues, "singleValues");
        _this.set$__Headers_singleValues(result);
        value = result;
      }
      return value;
    },
    set$__Headers_singleValues(__Headers_singleValues) {
      this.__Headers_singleValues = type$.Map_String_String._as(__Headers_singleValues);
    }
  };
  A.Headers_singleValues_closure.prototype = {
    call$2(key, value) {
      var t1;
      A._asString(key);
      t1 = A.joinHeaderValues(type$.List_String._as(value));
      t1.toString;
      return new A.MapEntry(key, t1, type$.MapEntry_String_String);
    },
    $signature: 90
  };
  A.Headers$__closure.prototype = {
    call$1(e) {
      return J.get$isNotEmpty$asx(type$.MapEntry_of_String_and_List_String._as(e).value);
    },
    $signature: 91
  };
  A.Headers$__closure0.prototype = {
    call$1(e) {
      var t1 = type$.MapEntry_of_String_and_List_String;
      t1._as(e);
      return new A.MapEntry(e.key, A.List_List$unmodifiable(e.value, type$.String), t1);
    },
    $signature: 92
  };
  A.Message.prototype = {
    get$contentLength() {
      var _s14_ = "content-length",
        t1 = this._contentLengthCache;
      if (t1 != null)
        return t1;
      t1 = this._headers;
      if (!t1.get$singleValues()._map.containsKey$1(_s14_))
        return null;
      t1 = t1.get$singleValues()._map.$index(0, _s14_);
      t1.toString;
      return this._contentLengthCache = A.int_parse(t1, null);
    },
    get$mimeType() {
      var contentType = this.get$_contentType();
      if (contentType == null)
        return null;
      return contentType.type + "/" + contentType.subtype;
    },
    get$encoding() {
      var t1,
        contentType = this.get$_contentType();
      if (contentType == null)
        return null;
      t1 = contentType.parameters._map;
      if (!t1.containsKey$1("charset"))
        return null;
      return A.Encoding_getByName(t1.$index(0, "charset"));
    },
    get$_contentType() {
      var contentTypeValue,
        t1 = this._contentTypeCache;
      if (t1 != null)
        return t1;
      contentTypeValue = this._headers.get$singleValues()._map.$index(0, "content-type");
      if (contentTypeValue == null)
        return null;
      return this._contentTypeCache = A.MediaType_MediaType$parse(contentTypeValue);
    },
    read$0() {
      var t1 = this._body,
        t2 = t1._stream;
      if (t2 == null)
        A.throwExpression(A.StateError$("The 'read' method can only be called once on a shelf.Request/shelf.Response object."));
      t2.toString;
      t1.set$_stream(null);
      return t2;
    },
    readAsString$0() {
      var encoding = this.get$encoding();
      if (encoding == null)
        encoding = B.C_Utf8Codec;
      return encoding.decodeStream$1(this.read$0());
    }
  };
  A.createMiddleware_closure.prototype = {
    call$1(request) {
      return null;
    },
    $signature: 93
  };
  A.createMiddleware_closure0.prototype = {
    call$1(innerHandler) {
      return new A.createMiddleware__closure(this._box_0, type$.FutureOr_Response_Function_Request._as(innerHandler));
    },
    $signature: 94
  };
  A.createMiddleware__closure.prototype = {
    call$1(request) {
      var t1;
      type$.Request._as(request);
      t1 = this._box_0;
      return A.Future_Future$sync(new A.createMiddleware___closure(t1, request), type$.nullable_Response).then$1$1(new A.createMiddleware___closure0(t1, this.innerHandler, request), type$.Response);
    },
    $signature: 4
  };
  A.createMiddleware___closure.prototype = {
    call$0() {
      return this._box_0.requestHandler.call$1(this.request);
    },
    $signature: 96
  };
  A.createMiddleware___closure0.prototype = {
    call$1(response) {
      var t1, t2;
      type$.nullable_Response._as(response);
      if (response != null)
        return response;
      t1 = type$.Response;
      t2 = this._box_0;
      return A.Future_Future$sync(new A.createMiddleware____closure(this.innerHandler, this.request), t1).then$1$2$onError(new A.createMiddleware____closure0(t2), t2.onError, t1);
    },
    $signature: 97
  };
  A.createMiddleware____closure.prototype = {
    call$0() {
      return this.innerHandler.call$1(this.request);
    },
    $signature: 98
  };
  A.createMiddleware____closure0.prototype = {
    call$1(response) {
      type$.Response._as(response);
      return this._box_0.responseHandler.call$1(response);
    },
    $signature: 99
  };
  A.Request.prototype = {
    Request$_$10$body$context$encoding$handlerPath$headers$onHijack$protocolVersion$url(method, requestedUri, body, context, encoding, handlerPath, headers, onHijack, protocolVersion, url) {
      var e, exception, t2, handlerPart, t3, rest, _this = this, _null = null,
        _s12_ = "requestedUri",
        t1 = _this.method;
      if (t1.length === 0)
        throw A.wrapException(A.ArgumentError$value(t1, "method", "cannot be empty."));
      try {
        t1 = _this.requestedUri;
        t1.get$pathSegments();
        t1.get$queryParametersAll();
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          e = t1;
          throw A.wrapException(A.ArgumentError$value(_this.requestedUri, _s12_, "URI parsing failed: " + A.S(e)));
        } else
          throw exception;
      }
      t1 = _this.requestedUri;
      if (!t1.get$isAbsolute())
        throw A.wrapException(A.ArgumentError$value(t1, _s12_, "must be an absolute URL."));
      if (t1.get$fragment().length !== 0)
        throw A.wrapException(A.ArgumentError$value(t1, _s12_, "may not have a fragment."));
      t2 = _this.handlerPath;
      handlerPart = B.JSArray_methods.join$1(A._Uri__Uri(_null, t2, _null, _null, _null).get$pathSegments(), "/");
      t3 = _this.url;
      rest = B.JSArray_methods.join$1(t3.get$pathSegments(), "/");
      if (handlerPart + (B.JSString_methods.startsWith$1(t3.path, "/") ? "/" : "") + rest !== B.JSArray_methods.join$1(t1.get$pathSegments(), "/"))
        throw A.wrapException(A.ArgumentError$value(t1, _s12_, 'handlerPath "' + t2 + '" and url "' + t3.toString$0(0) + '" must combine to equal requestedUri path "' + t1.get$path() + '".'));
    }
  };
  A._OnHijack.prototype = {};
  A.Response.prototype = {
    Response$5$body$context$encoding$headers(statusCode, body, context, encoding, headers) {
      var t1 = this.statusCode;
      if (t1 < 100)
        throw A.wrapException(A.ArgumentError$("Invalid status code: " + t1 + ".", null));
    },
    change$3$body$context$headers(body, context, headers) {
      var headersAll, newContext, _this = this,
        t1 = type$.nullable_Map_of_String_and_nullable_Object;
      t1._as(headers);
      t1._as(context);
      headersAll = A.updateHeaders(_this._headers, headers);
      newContext = A.updateMap(_this.context, context, type$.String, type$.Object);
      if (body == null)
        body = _this._body;
      return A.Response$(_this.statusCode, body, newContext, null, headersAll);
    },
    change$1$body(body) {
      return this.change$3$body$context$headers(body, null, null);
    },
    change$1$headers(headers) {
      return this.change$3$body$context$headers(null, null, headers);
    }
  };
  A.ShelfUnmodifiableMap.prototype = {};
  A._EmptyShelfUnmodifiableMap.prototype = {$isShelfUnmodifiableMap: 1};
  A._expandToHeadersAll_closure.prototype = {
    call$1(e) {
      var val, t1;
      type$.MapEntry_of_String_and_nullable_Object._as(e);
      val = e.value;
      t1 = val == null ? null : A.expandHeaderValue(val);
      return new A.MapEntry(e.key, t1, type$.MapEntry_of_String_and_nullable_List_String);
    },
    $signature: 100
  };
  A.expandToHeadersAll_closure.prototype = {
    call$1(e) {
      type$.MapEntry_String_Object._as(e);
      return new A.MapEntry(e.key, A.expandHeaderValue(e.value), type$.MapEntry_of_String_and_List_String);
    },
    $signature: 101
  };
  A._removeBody_closure.prototype = {
    call$1(r) {
      if (r._headers.get$singleValues()._map.containsKey$1("content-length"))
        r = r.change$1$headers(A.LinkedHashMap_LinkedHashMap$_literal(["content-length", "0"], type$.String, type$.nullable_Object));
      return r.change$1$body(A._setArrayType([], type$.JSArray_int));
    },
    $signature: 102
  };
  A.Router.prototype = {
    add$3(_, verb, route, handler) {
      if (!B.JSArray_methods.contains$1(B.List_a9P, verb.toUpperCase()))
        throw A.wrapException(A.ArgumentError$value(verb, "verb", "expected a valid HTTP method"));
      verb = verb.toUpperCase();
      if (verb === "GET")
        B.JSArray_methods.add$1(this._routes, A.RouterEntry_RouterEntry("HEAD", route, handler, $.$get$_removeBody()));
      B.JSArray_methods.add$1(this._routes, A.RouterEntry_RouterEntry(verb, route, handler, null));
    },
    call$1(request) {
      return this.$call$body$Router(type$.Request._as(request));
    },
    $call$body$Router(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, _i, route, t5, params, response;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._routes, t2 = t1.length, t3 = request.url.path, t4 = request.method, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              route = t1[_i];
              t5 = route.verb;
              if (t5 !== t4.toUpperCase() && t5 !== "ALL") {
                // goto for update
                $async$goto = 4;
                break;
              }
              params = route.match$1("/" + t3);
              $async$goto = params != null ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return A._asyncAwait(route.invoke$2(request, params), $async$call$1);
            case 8:
              // returning from await.
              response = $async$result;
              if (response !== $.$get$Router_routeNotFound()) {
                $async$returnValue = response;
                // goto return
                $async$goto = 1;
                break;
              }
            case 7:
              // join
            case 4:
              // for update
              t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = A.Router__defaultNotFound(request);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    }
  };
  A._RouteNotFoundResponse.prototype = {
    read$0() {
      return A.Stream_Stream$value($.$get$_RouteNotFoundResponse__messageBytes(), type$.List_int);
    },
    change$2$body$headers(body, headers) {
      type$.nullable_Map_of_String_and_nullable_Object._as(headers);
      return this.super$Response$change(body == null ? "Route not found" : body, null, headers);
    },
    change$1$body(body) {
      return this.change$2$body$headers(body, null);
    },
    change$1$headers(headers) {
      return this.change$2$body$headers(null, headers);
    }
  };
  A.RouterEntry.prototype = {
    match$1(path) {
      var t1, params, t2, i, t3, t4,
        m = this._routePattern.firstMatch$1(path);
      if (m == null)
        return null;
      t1 = type$.String;
      params = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = this._params, t2 = m._match, i = 0; i < t1.length;) {
        t3 = t1[i];
        ++i;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t4 = t2[i];
        t4.toString;
        params.$indexSet(0, t3, t4);
      }
      return params;
    },
    invoke$2(request, params) {
      return this.invoke$body$RouterEntry(request, type$.Map_String_String._as(params));
    },
    invoke$body$RouterEntry(request, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1, t2, t3, headersAll, newContext;
      var $async$invoke$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.String;
              t2 = type$.nullable_Map_of_String_and_nullable_Object;
              t3 = t2._as(A.LinkedHashMap_LinkedHashMap$_literal(["shelf_router/params", params], t1, type$.nullable_Object));
              headersAll = A.updateHeaders(request._headers, t2._as(null));
              newContext = A.updateMap(request.context, t3, t1, type$.Object);
              request = A.Request$_(request.method, request.requestedUri, request._body, newContext, null, request.handlerPath, headersAll, request._onHijack, request.protocolVersion, null);
              $async$goto = 3;
              return A._asyncAwait($async$self._middleware.call$1(new A.RouterEntry_invoke_closure($async$self, params)).call$1(request), $async$invoke$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$invoke$2, $async$completer);
    }
  };
  A.RouterEntry_RouterEntry_closure.prototype = {
    call$1(fn) {
      return type$.FutureOr_Response_Function_Request._as(fn);
    },
    $signature: 103
  };
  A.RouterEntry_invoke_closure.prototype = {
    call$1(request) {
      return this.$call$body$RouterEntry_invoke_closure(type$.Request._as(request));
    },
    $call$body$RouterEntry_invoke_closure(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t3, t4, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._handler;
              $async$goto = type$.FutureOr_Response_Function_Request._is(t2) || t1._params.length === 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$temp1 = type$.FutureOr_Response;
              $async$goto = 5;
              return A._asyncAwait(t2.call$1(request), $async$call$1);
            case 5:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t3 = [request];
              t1 = t1._params;
              t4 = A._arrayInstanceType(t1);
              B.JSArray_methods.addAll$1(t3, new A.MappedListIterable(t1, t4._eval$1("@(1)")._as(new A.RouterEntry_invoke__closure($async$self.params)), t4._eval$1("MappedListIterable<1,@>")));
              $async$temp1 = type$.FutureOr_Response;
              $async$goto = 6;
              return A._asyncAwait(A.Primitives_applyFunction(t2, t3, null), $async$call$1);
            case 6:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.RouterEntry_invoke__closure.prototype = {
    call$1(n) {
      return this.params.$index(0, A._asString(n));
    },
    $signature: 104
  };
  A.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (!(j < t2))
              return A.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          B.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < B.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= B.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3, t4,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      t3 = t2.length;
      if (t1 >>> 0 !== t1 || t1 >= t3)
        return A.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      if (!(t1 >= t3 - 1)) {
        t4 = t1 + 1;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (!(t1 >= t3 - 2)) {
        t4 = t1 + 2;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (!(half >= 0 && half < t2))
          return A.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, t1, lineStart, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      t1 = _this._lineStarts;
      if (!(line >= 0 && line < t1.length))
        return A.ioore(t1, line);
      lineStart = t1[line];
      if (lineStart > offset)
        throw A.wrapException(A.RangeError$("Line " + line + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3;
      if (line < 0)
        throw A.wrapException(A.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw A.wrapException(A.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  A.FileLocation.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset() {
      return this.offset;
    }
  };
  A._FileSpan.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start() {
      return A.FileLocation$_(this.file, this._file$_start);
    },
    get$end() {
      return A.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context() {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1 ? "" : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(endLine), t1.getOffset$1(endLine + 1)), 0, null);
      } else
        endOffset = endLine === t1._lineStarts.length - 1 ? t1._decodedChars.length : t1.getOffset$1(endLine + 1);
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof A._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = B.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? B.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode(_) {
      return A.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  A.Highlighter.prototype = {
    highlight$0() {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(B.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = A.List_List$filled(t2, _null, false, type$.nullable__Highlight);
      for (t3 = _this._buffer, t2 = t2 !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end("\u2575");
            t3._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t3._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = A._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new A.ReversedListIterable(t5, t6), t7 = new A.ListIterator(t7, t7.get$length(t7), t6._eval$1("ListIterator<ListIterable.E>")), t6 = t6._eval$1("ListIterable.E"), t8 = line.number, t9 = line.text; t7.moveNext$0();) {
          t10 = t6._as(t7.__internal$_current);
          t11 = t10.span;
          if (t11.get$start().get$line() !== t11.get$end().get$line() && t11.get$start().get$line() === t8 && _this._isOnlyWhitespace$1(B.JSString_methods.substring$2(t9, 0, t11.get$start().get$column()))) {
            index = B.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              A.throwExpression(A.ArgumentError$(A.S(highlightsByColumn) + " contains no null elements.", _null));
            B.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2)
          t3._contents += " ";
        primaryIdx = B.JSArray_methods.indexWhere$1(t5, new A.Highlighter_highlight_closure());
        if (primaryIdx === -1)
          primary = _null;
        else {
          if (!(primaryIdx >= 0 && primaryIdx < t5.length))
            return A.ioore(t5, primaryIdx);
          primary = t5[primaryIdx];
        }
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 = t7.get$start().get$line() === t8 ? t7.get$start().get$column() : 0;
          _this._writeHighlightedText$4$color(t9, t10, t7.get$end().get$line() === t8 ? t7.get$end().get$column() : t9.length, t4);
        } else
          _this._writeText$1(t9);
        t3._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t6; ++_i) {
          t5[_i].toString;
          continue;
        }
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var _this = this;
      if (!_this._multipleFiles || url == null)
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$2$color(new A.Highlighter__writeFileStart_closure(_this), "\x1b[34m");
        _this._buffer._contents += " " + $.$get$context().prettyUri$1(url);
      }
      _this._buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, foundCurrent, _i, highlight, t5, startLine, endLine, _this = this, _box_0 = {};
      type$.List_nullable__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = _this._primaryColor, t1 = !t1, t4 = _this._buffer, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t5 = highlight == null;
        startLine = t5 ? null : highlight.span.get$start().get$line();
        endLine = t5 ? null : highlight.span.get$end().get$line();
        if (t1 && highlight === current) {
          _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor);
        else if (t5)
          if (_box_0.openedOnThisLine)
            _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor);
          else
            t4._contents += " ";
        else
          _this._colorize$2$color(new A.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t3);
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(B.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$2$color(new A.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color);
      _this._writeText$1(B.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var color, t1, t2, coversWholeLine, _this = this;
      type$.List_nullable__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      if (t1.get$start().get$line() === t1.get$end().get$line()) {
        _this._writeSidebar$0();
        t1 = _this._buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._colorize$2$color(new A.Highlighter__writeIndicator_closure(_this, line, highlight), color);
        t1._contents += "\n";
      } else {
        t2 = line.number;
        if (t1.get$start().get$line() === t2) {
          if (B.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          A.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$2$color(new A.Highlighter__writeIndicator_closure0(_this, line, highlight), color);
          t1._contents += "\n";
        } else if (t1.get$end().get$line() === t2) {
          coversWholeLine = t1.get$end().get$column() === line.text.length;
          if (coversWholeLine && true) {
            A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
            return;
          }
          _this._writeSidebar$0();
          t1 = _this._buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$2$color(new A.Highlighter__writeIndicator_closure1(_this, coversWholeLine, line, highlight), color);
          t1._contents += "\n";
          A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._buffer;
      t1 = t2._contents += B.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(B.JSString_methods.substring$2(line.text, 0, column + t1)) * 3);
      t2._contents = t1 + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t3 = this._buffer, t2 = t2._eval$1("ListMixin.E"); t1.moveNext$0();) {
        t4 = t2._as(t1.__internal$_current);
        if (t4 === 9)
          t3._contents += B.JSString_methods.$mul(" ", 4);
        else
          t3._contents += A.Primitives_stringFromCharCode(t4);
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = B.JSInt_methods.toString$0(line + 1);
      this._colorize$2$color(new A.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m");
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E"), count = 0; t1.moveNext$0();)
        if (t2._as(t1.__internal$_current) === 9)
          ++count;
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E"); t1.moveNext$0();) {
        t3 = t2._as(t1.__internal$_current);
        if (t3 !== 32 && t3 !== 9)
          return false;
      }
      return true;
    },
    _colorize$2$color(callback, color) {
      var t1;
      type$.void_Function._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._buffer._contents += color;
      callback.call$0();
      if (t1 && color != null)
        this._buffer._contents += "\x1b[0m";
    }
  };
  A.Highlighter_closure.prototype = {
    call$0() {
      return this.color;
    },
    $signature: 105
  };
  A.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = A._arrayInstanceType(t1);
      t2 = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Highlighter$___closure()), t2._eval$1("WhereIterable<1>"));
      return t2.get$length(t2);
    },
    $signature: 106
  };
  A.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$start().get$line() !== t1.get$end().get$line();
    },
    $signature: 16
  };
  A.Highlighter$__closure0.prototype = {
    call$1(line) {
      return type$._Line._as(line).url;
    },
    $signature: 136
  };
  A.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      return type$._Highlight._as(highlight).span.get$sourceUrl();
    },
    $signature: 109
  };
  A.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      var t1 = type$._Highlight;
      return t1._as(highlight1).span.compareTo$1(0, t1._as(highlight2).span);
    },
    $signature: 110
  };
  A.Highlighter__collateLines_closure1.prototype = {
    call$1(highlightsForFile) {
      var lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, url, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength, t6;
      type$.List__Highlight._as(highlightsForFile);
      lines = A._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context();
        t5 = A.findLineStart(context, t4.get$text(), t4.get$start().get$column());
        t5.toString;
        t5 = B.JSString_methods.allMatches$1("\n", B.JSString_methods.substring$2(context, 0, t5));
        linesBeforeSpan = t5.get$length(t5);
        url = t4.get$sourceUrl();
        lineNumber = t4.get$start().get$line() - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > B.JSArray_methods.get$last(lines).number)
            B.JSArray_methods.add$1(lines, new A._Line(line, lineNumber, url, A._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = A._setArrayType([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new A.Highlighter__collateLines__closure(line));
        if (!!activeHighlights.fixed$length)
          A.throwExpression(A.UnsupportedError$("removeWhere"));
        B.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t4 = t4.get$iterator(t4); t4.moveNext$0();) {
          t5 = t4.get$current();
          t6 = t5.span;
          if (t6.get$start().get$line() > line.number)
            break;
          if (!J.$eq$(t6.get$sourceUrl(), line.url))
            break;
          B.JSArray_methods.add$1(activeHighlights, t5);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        B.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 111
  };
  A.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span,
        t2 = this.line;
      return !J.$eq$(t1.get$sourceUrl(), t2.url) || t1.get$end().get$line() < t2.number;
    },
    $signature: 16
  };
  A.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      type$._Highlight._as(highlight);
      return true;
    },
    $signature: 16
  };
  A.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      this.$this._buffer._contents += B.JSString_methods.$mul("\u2500", 2) + ">";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      this.$this._buffer._contents += t1;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = this.highlight == null ? "\u2500" : "\u253c";
      this.$this._buffer._contents += t1;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._buffer._contents += "\u2500";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$2$color(new A.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          t2 = _this.endLine === t3 && _this.highlight.span.get$end().get$column() === t2.text.length;
          t3 = _this.$this;
          if (t2)
            t3._buffer._contents += "\u2514";
          else
            t3._colorize$2$color(new A.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor);
        }
      }
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      this.$this._buffer._contents += t1;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._buffer._contents += this.vertical;
    },
    $signature: 0
  };
  A.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(B.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = this.highlight.span,
        startColumn = t2.get$start().get$column(),
        endColumn = t2.get$end().get$column();
      t2 = this.line.text;
      tabsBefore = t1._countTabs$1(B.JSString_methods.substring$2(t2, 0, startColumn));
      tabsInside = t1._countTabs$1(B.JSString_methods.substring$2(t2, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t1 = t1._buffer;
      t1._contents += B.JSString_methods.$mul(" ", startColumn);
      t1._contents += B.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      return this.$this._writeArrow$2(this.line, this.highlight.span.get$start().get$column());
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      if (_this.coversWholeLine)
        t1._buffer._contents += B.JSString_methods.$mul("\u2500", 3);
      else
        t1._writeArrow$3$beginning(_this.line, Math.max(_this.highlight.span.get$end().get$column() - 1, 0), false);
    },
    $signature: 0
  };
  A.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = t2._contents += B.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 0
  };
  A._Highlight.prototype = {
    toString$0(_) {
      var t1 = "" + "primary ",
        t2 = this.span;
      t2 = t1 + ("" + t2.get$start().get$line() + ":" + t2.get$start().get$column() + "-" + t2.get$end().get$line() + ":" + t2.get$end().get$column());
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    }
  };
  A._Highlight_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && A.findLineStart(t1.get$context(), t1.get$text(), t1.get$start().get$column()) != null)) {
        t2 = A.SourceLocation$(t1.get$start().get$offset(), 0, 0, t1.get$sourceUrl());
        t3 = t1.get$end().get$offset();
        t4 = t1.get$sourceUrl();
        t5 = A.countCodeUnits(t1.get$text(), 10);
        t1 = A.SourceSpanWithContext$(t2, A.SourceLocation$(t3, A._Highlight__lastLineLength(t1.get$text()), t5, t4), t1.get$text(), t1.get$text());
      }
      return A._Highlight__normalizeEndOfLine(A._Highlight__normalizeTrailingNewline(A._Highlight__normalizeNewlines(t1)));
    },
    $signature: 112
  };
  A._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + this.text + '" (' + B.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  A.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1;
      type$.SourceLocation._as(other);
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = "<" + A.getRuntimeType(_this).toString$0(0) + ": " + _this.offset + " ",
        source = _this.sourceUrl;
      return t1 + (A.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl() {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  A.SourceLocationMixin.prototype = {
    distance$1(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      type$.SourceLocation._as(other);
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = this.offset,
        t2 = "<" + A.getRuntimeType(this).toString$0(0) + ": " + t1 + " ",
        t3 = this.file,
        source = t3.url;
      return t2 + (A.S(source == null ? "unknown source" : source) + ":" + (t3.getLine$1(t1) + 1) + ":" + (t3.getColumn$1(t1) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation: 1
  };
  A.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t2.get$sourceUrl()) + '" and  "' + A.S(t1.get$sourceUrl()) + "\" don't match.", null));
      else if (t1.get$offset() < t2.get$offset())
        throw A.wrapException(A.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw A.wrapException(A.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start() {
      return this.start;
    },
    get$end() {
      return this.end;
    },
    get$text() {
      return this.text;
    }
  };
  A.SourceSpanException.prototype = {
    get$message() {
      return this._span_exception$_message;
    },
    toString$0(_) {
      return "Error on " + this._span.message$2$color(this._span_exception$_message, null);
    },
    $isException: 1
  };
  A.SourceSpanFormatException.prototype = {
    get$offset() {
      var t1 = this._span;
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1,
    get$source() {
      return this.source;
    }
  };
  A.SourceSpanMixin.prototype = {
    get$sourceUrl() {
      return this.get$start().get$sourceUrl();
    },
    get$length(_) {
      return this.get$end().get$offset() - this.get$start().get$offset();
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      result = this.get$start().compareTo$1(0, other.get$start());
      return result === 0 ? this.get$end().compareTo$1(0, other.get$end()) : result;
    },
    message$2$color(message, color) {
      var t2, highlight, _this = this,
        t1 = "" + ("line " + (_this.get$start().get$line() + 1) + ", column " + (_this.get$start().get$column() + 1));
      if (_this.get$sourceUrl() != null) {
        t2 = _this.get$sourceUrl();
        t2 = t1 + (" of " + $.$get$context().prettyUri$1(t2));
        t1 = t2;
      }
      t1 += ": " + message;
      highlight = _this.highlight$1$color(color);
      if (highlight.length !== 0)
        t1 = t1 + "\n" + highlight;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    message$1(message) {
      return this.message$2$color(message, null);
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return A.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceSpan._is(other) && this.get$start().$eq(0, other.get$start()) && this.get$end().$eq(0, other.get$end());
    },
    get$hashCode(_) {
      var t2,
        t1 = this.get$start();
      t1 = t1.get$hashCode(t1);
      t2 = this.get$end();
      return t1 + 31 * t2.get$hashCode(t2);
    },
    toString$0(_) {
      var _this = this;
      return "<" + A.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start().toString$0(0) + " to " + _this.get$end().toString$0(0) + ' "' + _this.get$text() + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  A.SourceSpanWithContext.prototype = {
    get$context() {
      return this._context;
    }
  };
  A.Chain.prototype = {
    get$terse() {
      return this.foldFrames$2$terse(new A.Chain_terse_closure(), true);
    },
    foldFrames$2$terse(predicate, terse) {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Trace>"),
        foldedTraces = new A.MappedListIterable(t1, t2._eval$1("Trace(1)")._as(new A.Chain_foldFrames_closure(type$.bool_Function_Frame._as(predicate), terse)), t3),
        nonEmptyTraces = foldedTraces.super$Iterable$where(0, t3._eval$1("bool(ListIterable.E)")._as(new A.Chain_foldFrames_closure0(terse)));
      if (!nonEmptyTraces.get$iterator(nonEmptyTraces).moveNext$0() && !foldedTraces.get$isEmpty(foldedTraces))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([foldedTraces.get$last(foldedTraces)], type$.JSArray_Trace), type$.Trace));
      return new A.Chain(A.List_List$unmodifiable(nonEmptyTraces, type$.Trace));
    },
    foldFrames$1(predicate) {
      return this.foldFrames$2$terse(predicate, false);
    },
    toTrace$0() {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return A.Trace$(new A.ExpandIterable(t1, t2._eval$1("Iterable<Frame>(1)")._as(new A.Chain_toTrace_closure()), t2._eval$1("ExpandIterable<1,Frame>")), null);
    },
    toString$0(_) {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$1(0, string$.x3d_____);
    },
    $isStackTrace: 1
  };
  A.Chain_Chain$forTrace_closure.prototype = {
    call$0() {
      return A.Chain_Chain$parse(this.trace.toString$0(0));
    },
    $signature: 39
  };
  A.Chain_Chain$parse_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 1
  };
  A.Chain_Chain$parse_closure0.prototype = {
    call$1(trace) {
      return A.Trace$parseVM(A._asString(trace));
    },
    $signature: 53
  };
  A.Chain_Chain$parse_closure1.prototype = {
    call$1(trace) {
      return A.Trace$parseFriendly(A._asString(trace));
    },
    $signature: 53
  };
  A.Chain_terse_closure.prototype = {
    call$1(_) {
      return false;
    },
    $signature: 24
  };
  A.Chain_foldFrames_closure.prototype = {
    call$1(trace) {
      return type$.Trace._as(trace).foldFrames$2$terse(this.predicate, this.terse);
    },
    $signature: 116
  };
  A.Chain_foldFrames_closure0.prototype = {
    call$1(trace) {
      type$.Trace._as(trace);
      if (trace.get$frames().length > 1)
        return true;
      if (trace.get$frames().length === 0)
        return false;
      if (!this.terse)
        return false;
      return B.JSArray_methods.get$single(trace.get$frames()).get$line() != null;
    },
    $signature: 117
  };
  A.Chain_toTrace_closure.prototype = {
    call$1(trace) {
      return type$.Trace._as(trace).get$frames();
    },
    $signature: 118
  };
  A.Chain_toString_closure0.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString__closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int);
    },
    $signature: 119
  };
  A.Chain_toString__closure0.prototype = {
    call$1(frame) {
      return type$.Frame._as(frame).get$location().length;
    },
    $signature: 41
  };
  A.Chain_toString_closure.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString__closure(this.longest)), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $signature: 121
  };
  A.Chain_toString__closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 42
  };
  A.Frame.prototype = {
    get$isCore() {
      return this.uri.get$scheme() === "dart";
    },
    get$library() {
      var t1 = this.uri;
      if (t1.get$scheme() === "data")
        return "data:...";
      return $.$get$context().prettyUri$1(t1);
    },
    get$$package() {
      var t1 = this.uri;
      if (t1.get$scheme() !== "package")
        return null;
      return B.JSArray_methods.get$first(t1.get$path().split("/"));
    },
    get$location() {
      var t2, _this = this,
        t1 = _this.line;
      if (t1 == null)
        return _this.get$library();
      t2 = _this.column;
      if (t2 == null)
        return _this.get$library() + " " + A.S(t1);
      return _this.get$library() + " " + A.S(t1) + ":" + A.S(t2);
    },
    toString$0(_) {
      return this.get$location() + " in " + A.S(this.member);
    },
    get$uri() {
      return this.uri;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    },
    get$member() {
      return this.member;
    }
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0() {
      var match, t2, t3, member, uri, lineAndColumn, line, _null = null,
        t1 = this.frame;
      if (t1 === "...")
        return new A.Frame(A._Uri__Uri(_null, _null, _null, _null, _null), _null, _null, "...");
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      t3 = type$.Pattern._as($.$get$_asyncBody());
      t2 = A.stringReplaceAllUnchecked(t2, t3, "<async>");
      member = A.stringReplaceAllUnchecked(t2, "<anonymous closure>", "<fn>");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t3 = t2;
      t3.toString;
      if (B.JSString_methods.startsWith$1(t3, "<data:"))
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      lineAndColumn = t1[3].split(":");
      t1 = lineAndColumn.length;
      line = t1 > 1 ? A.int_parse(lineAndColumn[1], _null) : _null;
      return new A.Frame(uri, line, t1 > 2 ? A.int_parse(lineAndColumn[2], _null) : _null, member);
    },
    $signature: 8
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0() {
      var t2, t3, t4, _null = null, _s4_ = "<fn>",
        t1 = this.frame,
        match = $.$get$_v8Frame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null), t1);
      t1 = new A.Frame_Frame$parseV8_closure_parseLocation(t1);
      t2 = match._match;
      t3 = t2.length;
      if (2 >= t3)
        return A.ioore(t2, 2);
      t4 = t2[2];
      if (t4 != null) {
        t3 = t4;
        t3.toString;
        t2 = t2[1];
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "<anonymous>", _s4_);
        t2 = A.stringReplaceAllUnchecked(t2, "Anonymous function", _s4_);
        return t1.call$2(t3, A.stringReplaceAllUnchecked(t2, "(anonymous function)", _s4_));
      } else {
        if (3 >= t3)
          return A.ioore(t2, 3);
        t2 = t2[3];
        t2.toString;
        return t1.call$2(t2, _s4_);
      }
    },
    $signature: 8
  };
  A.Frame_Frame$parseV8_closure_parseLocation.prototype = {
    call$2($location, member) {
      var t2, urlMatch, uri, line, columnMatch, _null = null,
        t1 = $.$get$_v8EvalLocation(),
        evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null; $location = t2) {
        t2 = evalMatch._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t2 = t2[1];
        t2.toString;
        evalMatch = t1.firstMatch$1(t2);
      }
      if ($location === "native")
        return new A.Frame(A.Uri_parse("native"), _null, _null, member);
      urlMatch = $.$get$_v8UrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null), this.frame);
      t1 = urlMatch._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      line = A.int_parse(t2, _null);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      columnMatch = t1[3];
      return new A.Frame(uri, line, columnMatch != null ? A.int_parse(columnMatch, _null) : _null, member);
    },
    $signature: 124
  };
  A.Frame_Frame$_parseFirefoxEval_closure.prototype = {
    call$0() {
      var t2, member, uri, line, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxEvalLocation().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      member = A.stringReplaceAllUnchecked(t2, "/<", "");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t1 = t1[3];
      t1.toString;
      line = A.int_parse(t1, _null);
      return new A.Frame(uri, line, _null, member.length === 0 || member === "anonymous" ? "<fn>" : member);
    },
    $signature: 8
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0() {
      var t2, t3, t4, uri, member, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null), t1);
      t2 = match._match;
      if (3 >= t2.length)
        return A.ioore(t2, 3);
      t3 = t2[3];
      t4 = t3;
      t4.toString;
      if (B.JSString_methods.contains$1(t4, " line "))
        return A.Frame_Frame$_parseFirefoxEval(t1);
      t1 = t3;
      t1.toString;
      uri = A.Frame__uriOrPathToUri(t1);
      t1 = t2.length;
      if (1 >= t1)
        return A.ioore(t2, 1);
      member = t2[1];
      if (member != null) {
        if (2 >= t1)
          return A.ioore(t2, 2);
        t1 = t2[2];
        t1.toString;
        t1 = B.JSString_methods.allMatches$1("/", t1);
        member += B.JSArray_methods.join$0(A.List_List$filled(t1.get$length(t1), ".<fn>", false, type$.String));
        if (member === "")
          member = "<fn>";
        member = B.JSString_methods.replaceFirst$2(member, $.$get$_initialDot(), "");
      } else
        member = "<fn>";
      if (4 >= t2.length)
        return A.ioore(t2, 4);
      t1 = t2[4];
      if (t1 === "")
        line = _null;
      else {
        t1 = t1;
        t1.toString;
        line = A.int_parse(t1, _null);
      }
      if (5 >= t2.length)
        return A.ioore(t2, 5);
      t1 = t2[5];
      if (t1 == null || t1 === "")
        column = _null;
      else {
        t1 = t1;
        t1.toString;
        column = A.int_parse(t1, _null);
      }
      return new A.Frame(uri, line, column, member);
    },
    $signature: 8
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0() {
      var t2, uri, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw A.wrapException(A.FormatException$("Couldn't parse package:stack_trace stack trace line '" + t1 + "'.", _null, _null));
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      if (t2 === "data:...")
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (uri.get$scheme() === "") {
        t2 = $.$get$context();
        uri = t2.toUri$1(t2.absolute$7(t2.style.pathFromUri$1(A._parseUri(uri)), _null, _null, _null, _null, _null, _null));
      }
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      if (t2 == null)
        line = _null;
      else {
        t2 = t2;
        t2.toString;
        line = A.int_parse(t2, _null);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t2 = t1[3];
      if (t2 == null)
        column = _null;
      else {
        t2 = t2;
        t2.toString;
        column = A.int_parse(t2, _null);
      }
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      return new A.Frame(uri, line, column, t1[4]);
    },
    $signature: 8
  };
  A.LazyChain.prototype = {
    get$_chain() {
      var result, _this = this,
        value = _this.__LazyChain__chain;
      if (value === $) {
        result = _this._thunk.call$0();
        A._lateInitializeOnceCheck(_this.__LazyChain__chain, "_chain");
        _this.__LazyChain__chain = result;
        value = result;
      }
      return value;
    },
    get$terse() {
      return this.get$_chain().get$terse();
    },
    foldFrames$2$terse(predicate, terse) {
      return new A.LazyChain(new A.LazyChain_foldFrames_closure(this, type$.bool_Function_Frame._as(predicate), false));
    },
    foldFrames$1(predicate) {
      return this.foldFrames$2$terse(predicate, false);
    },
    toString$0(_) {
      return this.get$_chain().toString$0(0);
    },
    $isStackTrace: 1,
    $isChain: 1
  };
  A.LazyChain_foldFrames_closure.prototype = {
    call$0() {
      return this.$this.get$_chain().foldFrames$2$terse(this.predicate, this.terse);
    },
    $signature: 39
  };
  A.Trace.prototype = {
    foldFrames$2$terse(predicate, terse) {
      var newFrames, t1, t2, t3, _box_0 = {};
      _box_0.predicate = predicate;
      type$.bool_Function_Frame._as(predicate);
      _box_0.predicate = predicate;
      if (terse)
        _box_0.predicate = new A.Trace_foldFrames_closure(predicate);
      newFrames = A._setArrayType([], type$.JSArray_Frame);
      for (t1 = this.frames, t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>"), t1 = new A.ReversedListIterable(t1, t2), t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t2._as(t1.__internal$_current);
        if (t3 instanceof A.UnparsedFrame || !A.boolConversionCheck(_box_0.predicate.call$1(t3)))
          B.JSArray_methods.add$1(newFrames, t3);
        else if (newFrames.length === 0 || !A.boolConversionCheck(_box_0.predicate.call$1(B.JSArray_methods.get$last(newFrames))))
          B.JSArray_methods.add$1(newFrames, new A.Frame(t3.get$uri(), t3.get$line(), t3.get$column(), t3.get$member()));
      }
      if (terse) {
        t1 = type$.MappedListIterable_Frame_Frame;
        newFrames = A.List_List$of(new A.MappedListIterable(newFrames, type$.Frame_Function_Frame._as(new A.Trace_foldFrames_closure0(_box_0)), t1), true, t1._eval$1("ListIterable.E"));
        if (newFrames.length > 1 && A.boolConversionCheck(_box_0.predicate.call$1(B.JSArray_methods.get$first(newFrames))))
          B.JSArray_methods.removeAt$1(newFrames, 0);
      }
      return A.Trace$(new A.ReversedListIterable(newFrames, A._arrayInstanceType(newFrames)._eval$1("ReversedListIterable<1>")), this.original._stackTrace);
    },
    toString$0(_) {
      var t1 = this.frames,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Trace_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Trace_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $isStackTrace: 1,
    get$frames() {
      return this.frames;
    }
  };
  A.Trace__parseVM_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 1
  };
  A.Trace__parseVM_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseVM(A._asString(line));
    },
    $signature: 7
  };
  A.Trace$parseV8_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), $.$get$_v8TraceLine());
    },
    $signature: 1
  };
  A.Trace$parseV8_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseV8(A._asString(line));
    },
    $signature: 7
  };
  A.Trace$parseJSCore_closure.prototype = {
    call$1(line) {
      return A._asString(line) !== "\tat ";
    },
    $signature: 1
  };
  A.Trace$parseJSCore_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseV8(A._asString(line));
    },
    $signature: 7
  };
  A.Trace$parseFirefox_closure.prototype = {
    call$1(line) {
      A._asString(line);
      return line.length !== 0 && line !== "[native code]";
    },
    $signature: 1
  };
  A.Trace$parseFirefox_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseFirefox(A._asString(line));
    },
    $signature: 7
  };
  A.Trace$parseFriendly_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), "=====");
    },
    $signature: 1
  };
  A.Trace$parseFriendly_closure0.prototype = {
    call$1(line) {
      return A.Frame_Frame$parseFriendly(A._asString(line));
    },
    $signature: 7
  };
  A.Trace_foldFrames_closure.prototype = {
    call$1(frame) {
      var t1;
      if (A.boolConversionCheck(this.oldPredicate.call$1(frame)))
        return true;
      if (frame.get$isCore())
        return true;
      if (frame.get$$package() === "stack_trace")
        return true;
      t1 = frame.get$member();
      t1.toString;
      if (!B.JSString_methods.contains$1(t1, "<async>"))
        return false;
      return frame.get$line() == null;
    },
    $signature: 24
  };
  A.Trace_foldFrames_closure0.prototype = {
    call$1(frame) {
      var t1, t2;
      type$.Frame._as(frame);
      if (frame instanceof A.UnparsedFrame || !A.boolConversionCheck(this._box_0.predicate.call$1(frame)))
        return frame;
      t1 = frame.get$library();
      t2 = type$.Pattern._as($.$get$_terseRegExp());
      return new A.Frame(A.Uri_parse(A.stringReplaceAllUnchecked(t1, t2, "")), null, null, frame.get$member());
    },
    $signature: 126
  };
  A.Trace_toString_closure0.prototype = {
    call$1(frame) {
      return type$.Frame._as(frame).get$location().length;
    },
    $signature: 41
  };
  A.Trace_toString_closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      if (frame instanceof A.UnparsedFrame)
        return frame.toString$0(0) + "\n";
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 42
  };
  A.UnparsedFrame.prototype = {
    toString$0(_) {
      return this.member;
    },
    $isFrame: 1,
    get$uri() {
      return this.uri;
    },
    get$line() {
      return null;
    },
    get$column() {
      return null;
    },
    get$isCore() {
      return false;
    },
    get$library() {
      return "unparsed";
    },
    get$$package() {
      return null;
    },
    get$location() {
      return "unparsed";
    },
    get$member() {
      return this.member;
    }
  };
  A.StringScannerException.prototype = {
    get$source() {
      return A._asString(this.source);
    }
  };
  A.StringScanner.prototype = {
    get$lastMatch() {
      var _this = this;
      if (_this._position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(type$.Pattern._as(pattern), _this.string, _this._position);
      _this._lastMatchPosition = _this._position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._position = t1.get$end();
      return success;
    },
    expect$2$name(pattern, $name) {
      var t1;
      type$.Pattern._as(pattern);
      if (this.scan$1(pattern))
        return;
      if ($name == null)
        if (type$.RegExp._is(pattern))
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = J.toString$0$(pattern);
          t1 = A.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + A.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      this.error$3$length$position("expected " + $name + ".", 0, this._position);
    },
    expect$1(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0() {
      var t1 = this._position;
      if (t1 === this.string.length)
        return;
      this.error$3$length$position("expected no more input.", 0, t1);
    },
    error$3$length$position(message, $length, position) {
      var t2, t3, t4, t5, sourceFile, end,
        t1 = this.string;
      if (position < 0)
        A.throwExpression(A.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        A.throwExpression(A.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        A.throwExpression(A.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new A.CodeUnits(t1);
      t4 = A._setArrayType([0], type$.JSArray_int);
      t5 = new Uint32Array(A._ensureNativeList(t3.toList$0(t3)));
      sourceFile = new A.SourceFile(t2, t4, t5);
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      end = position + $length;
      if (end > t5.length)
        A.throwExpression(A.RangeError$("End " + end + string$.x20must_ + sourceFile.get$length(sourceFile) + "."));
      else if (position < 0)
        A.throwExpression(A.RangeError$("Start may not be negative, was " + position + "."));
      throw A.wrapException(new A.StringScannerException(t1, message, new A._FileSpan(sourceFile, position, end)));
    }
  };
  A.Tuple3.prototype = {
    toString$0(_) {
      return "[" + A.S(this.item1) + ", " + this.item2 + ", " + this.item3 + "]";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Tuple3 && other.item1 === this.item1 && other.item2 === this.item2 && other.item3 === this.item3;
    },
    get$hashCode(_) {
      var hash,
        t1 = A.Primitives_objectHashCode(this.item1),
        t2 = B.JSString_methods.get$hashCode(this.item2),
        t3 = B.JSString_methods.get$hashCode(this.item3);
      t3 = A._combine(A._combine(A._combine(0, B.JSInt_methods.get$hashCode(t1)), B.JSInt_methods.get$hashCode(t2)), B.JSInt_methods.get$hashCode(t3));
      hash = t3 + ((t3 & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    }
  };
  A.TypedDataBuffer.prototype = {
    get$length(_) {
      return this._typed_buffer$_length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      if (index >= this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, this, null, null, null));
      t1 = this._typed_buffer$_buffer;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $indexSet(_, index, value) {
      var _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      if (index >= _this._typed_buffer$_length)
        throw A.wrapException(A.IndexError$(index, _this, null, null, null));
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, index, value);
    },
    set$length(_, newLength) {
      var t2, t3, i, newBuffer, _this = this,
        t1 = _this._typed_buffer$_length;
      if (newLength < t1)
        for (t2 = _this._typed_buffer$_buffer, t3 = t2.length, i = newLength; i < t1; ++i) {
          if (!(i >= 0 && i < t3))
            return A.ioore(t2, i);
          t2[i] = 0;
        }
      else {
        t1 = _this._typed_buffer$_buffer.length;
        if (newLength > t1) {
          if (t1 === 0)
            newBuffer = new Uint8Array(newLength);
          else
            newBuffer = _this._createBiggerBuffer$1(newLength);
          B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
          _this.set$_typed_buffer$_buffer(newBuffer);
        }
      }
      _this._typed_buffer$_length = newLength;
    },
    _typed_buffer$_add$1(value) {
      var t1, _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      t1 = _this._typed_buffer$_length;
      if (t1 === _this._typed_buffer$_buffer.length)
        _this._grow$1(t1);
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, _this._typed_buffer$_length++, value);
    },
    add$1(_, value) {
      var t1, _this = this;
      A._instanceType(_this)._eval$1("TypedDataBuffer.E")._as(value);
      t1 = _this._typed_buffer$_length;
      if (t1 === _this._typed_buffer$_buffer.length)
        _this._grow$1(t1);
      B.NativeUint8List_methods.$indexSet(_this._typed_buffer$_buffer, _this._typed_buffer$_length++, value);
    },
    addAll$3(_, values, start, end) {
      A._instanceType(this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      A.RangeError_checkNotNegative(start, "start");
      if (end != null && start > end)
        throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
      this._addAll$3(values, start, end);
    },
    addAll$1($receiver, values) {
      return this.addAll$3($receiver, values, 0, null);
    },
    _addAll$3(values, start, end) {
      var t2, i, value, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      if (type$.List_dynamic._is(values))
        end = end == null ? J.get$length$asx(values) : end;
      if (end != null) {
        _this._insertKnownLength$4(_this._typed_buffer$_length, values, start, end);
        return;
      }
      for (t2 = J.get$iterator$ax(values), t1 = t1._eval$1("TypedDataBuffer.E"), i = 0; t2.moveNext$0();) {
        value = t2.get$current();
        if (i >= start)
          _this._typed_buffer$_add$1(t1._as(value));
        ++i;
      }
      if (i < start)
        throw A.wrapException(A.StateError$("Too few elements"));
    },
    _insertKnownLength$4(index, values, start, end) {
      var t1, valuesLength, newLength, t2, _this = this;
      A._instanceType(_this)._eval$1("Iterable<TypedDataBuffer.E>")._as(values);
      if (type$.List_dynamic._is(values)) {
        t1 = J.getInterceptor$asx(values);
        if (start > t1.get$length(values) || end > t1.get$length(values))
          throw A.wrapException(A.StateError$("Too few elements"));
      }
      valuesLength = end - start;
      newLength = _this._typed_buffer$_length + valuesLength;
      _this._ensureCapacity$1(newLength);
      t1 = _this._typed_buffer$_buffer;
      t2 = index + valuesLength;
      B.NativeUint8List_methods.setRange$4(t1, t2, _this._typed_buffer$_length + valuesLength, t1, index);
      B.NativeUint8List_methods.setRange$4(_this._typed_buffer$_buffer, index, t2, values, start);
      _this._typed_buffer$_length = newLength;
    },
    _ensureCapacity$1(requiredCapacity) {
      var newBuffer, _this = this;
      if (requiredCapacity <= _this._typed_buffer$_buffer.length)
        return;
      newBuffer = _this._createBiggerBuffer$1(requiredCapacity);
      B.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffer$_length, _this._typed_buffer$_buffer);
      _this.set$_typed_buffer$_buffer(newBuffer);
    },
    _createBiggerBuffer$1(requiredCapacity) {
      var newLength = this._typed_buffer$_buffer.length * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      return new Uint8Array(newLength);
    },
    _grow$1($length) {
      var t1 = this._createBiggerBuffer$1(null);
      B.NativeUint8List_methods.setRange$3(t1, 0, $length, this._typed_buffer$_buffer);
      this.set$_typed_buffer$_buffer(t1);
    },
    set$_typed_buffer$_buffer(_buffer) {
      this._typed_buffer$_buffer = A._instanceType(this)._eval$1("List<TypedDataBuffer.E>")._as(_buffer);
    }
  };
  A._IntBuffer.prototype = {};
  A.Uint8Buffer.prototype = {};
  A.BaseInput.prototype = {};
  A.Script.prototype = {
    toString$0(_) {
      return "Script." + this._name;
    }
  };
  A.ToHash.prototype = {
    mine$0() {
      ++this.nonce;
      this.timestamp = Date.now();
    },
    toJson$0() {
      var _this = this,
        t1 = _this.gladiators,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.refreeTxs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>"),
        t7 = _this.stuckTxs,
        t8 = A._arrayInstanceType(t7),
        t9 = t8._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["script", _this.script._name, "nonce", _this.nonce, "blockNumber", _this.blockNumber, "difficulty", _this.difficulty, "totalDifficulty", _this.totalDifficulty, "timestamp", _this.timestamp, "producer", _this.producer, "prevHash", _this.prevHash, "defence", _this.defence, "wallet", _this.wallet.toJson$0(), "gladiators", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.ToHash_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "refreeTxs", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.ToHash_toJson_closure0()), t6), true, t6._eval$1("ListIterable.E")), "stuckTxs", A.List_List$of(new A.MappedListIterable(t7, t8._eval$1("Map<String,@>(1)")._as(new A.ToHash_toJson_closure1()), t9), true, t9._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.ToHash$fromJson_closure.prototype = {
    call$1(x) {
      var t2, t3,
        t1 = type$.Map_String_dynamic;
      t1._as(x);
      if (x.$index(0, "input") != null) {
        t2 = t1._as(x.$index(0, "input"));
        t2 = new A.GladiatorInput(A._asString(t2.$index(0, "gladiatorId")), A._asString(t2.$index(0, "signature")));
      } else
        t2 = null;
      if (x.$index(0, "output") != null) {
        t1 = t1._as(x.$index(0, "output"));
        t3 = A._asString(t1.$index(0, "defence"));
        t3 = new A.GladiatorOutput(A.List_List$from(type$.Iterable_dynamic._as(t1.$index(0, "publicKeys")), true, type$.String), t3);
        t1 = t3;
      } else
        t1 = null;
      return new A.Gladiator(t1, t2, A._asString(x.$index(0, "id")));
    },
    $signature: 127
  };
  A.ToHash$fromJson_closure0.prototype = {
    call$1(x) {
      return A.Tx$fromJson(type$.Map_String_dynamic._as(x));
    },
    $signature: 45
  };
  A.ToHash$fromJson_closure1.prototype = {
    call$1(x) {
      return A.Tx$fromJson(type$.Map_String_dynamic._as(x));
    },
    $signature: 45
  };
  A.ToHash_toJson_closure.prototype = {
    call$1(x) {
      return type$.Gladiator._as(x).toJson$0();
    },
    $signature: 129
  };
  A.ToHash_toJson_closure0.prototype = {
    call$1(x) {
      return type$.Tx._as(x).toJson$0();
    },
    $signature: 46
  };
  A.ToHash_toJson_closure1.prototype = {
    call$1(x) {
      return type$.Tx._as(x).toJson$0();
    },
    $signature: 46
  };
  A.Block.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["toHash", this.toHash.toJson$0(), "hash", this.hash], type$.String, type$.dynamic);
    },
    save$1(file) {
      var sink = new A._IOSinkImpl(B.C_Utf8Codec, new A._FileStreamConsumer(file, file.open$1$mode(B.FileMode_2)), new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic));
      sink.write$1(B.C_JsonCodec.encode$1(this.toJson$0()) + "\n");
      sink.close$0();
    }
  };
  A.Block_getPublicKeys_closure.prototype = {
    call$1(e) {
      return type$.Gladiator._as(e).id === this.gladiatorId;
    },
    $signature: 12
  };
  A.Block_getPublicKeys_closure0.prototype = {
    call$1(element) {
      return type$.Gladiator._as(element).id === this.gladiatorId;
    },
    $signature: 12
  };
  A.GladiatorInput.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["signature", this.signature, "gladiatorId", this.gladiatorId], type$.String, type$.dynamic);
    }
  };
  A.GladiatorOutput.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["publicKeys", this.publicKeys, "defence", this.defence], type$.String, type$.dynamic);
    }
  };
  A.Gladiator.prototype = {
    toJson$0() {
      var t2,
        t1 = this.input;
      t1 = t1 == null ? null : t1.toJson$0();
      t2 = this.output;
      t2 = t2 == null ? null : t2.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["input", t1, "output", t2, "id", this.id], type$.String, type$.dynamic);
    }
  };
  A.main_closure.prototype = {
    call$2(request, number) {
      return this.$call$body$main_closure7(type$.Request._as(request), A._asString(number));
    },
    $call$body$main_closure7(request, number) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, nuschum, $async$temp1;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              nuschum = A.int_parse(number, null);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.Utils_fischilesche($async$self.file).elementAt$1(0, nuschum), $async$call$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response$ok($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 11
  };
  A.main_closure0.prototype = {
    call$1(request) {
      type$.Request._as(request);
      return A.Response$ok(B.C_JsonCodec.encode$1(A.Wallet$().toJson$0()));
    },
    $signature: 49
  };
  A.main_closure1.prototype = {
    call$2(request, gladiatorId) {
      return this.$call$body$main_closure6(type$.Request._as(request), A._asString(gladiatorId));
    },
    $call$body$main_closure6(request, gladiatorId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, $async$temp1, $async$temp2;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$temp2 = B.C_JsonCodec;
              $async$goto = 3;
              return A._asyncAwait(A.Wallet_getDefences(gladiatorId, $async$self.file), $async$call$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response$ok($async$temp2.encode$1($async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 11
  };
  A.main_closure2.prototype = {
    call$1(request) {
      return this.$call$body$main_closure5(type$.Request._as(request));
    },
    $call$body$main_closure5(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.Response$ok(B.C_JsonCodec.encode$1($async$self.peerServer.sockets));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.main_closure3.prototype = {
    call$1(request) {
      return this.$call$body$main_closure4(type$.Request._as(request));
    },
    $call$body$main_closure4(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.Response$ok(B.C_JsonCodec.encode$1($async$self.refreeTxPool.txs));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.main_closure4.prototype = {
    call$1(request) {
      return this.$call$body$main_closure3(type$.Request._as(request));
    },
    $call$body$main_closure3(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, tx, body, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = B.C_JsonCodec;
              $async$goto = 3;
              return A._asyncAwait(request.readAsString$0(), $async$call$1);
            case 3:
              // returning from await.
              body = $async$temp1.decode$1($async$result);
              t1 = J.getInterceptor$asx(body);
              if (t1.$index(body, "privateKey") == null || t1.$index(body, "to") == null || t1.$index(body, "value") == null) {
                $async$returnValue = A.Response$ok("Insufficient parameters");
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(A.Wallet_newTx(false, A._asString(t1.$index(body, "privateKey")), A._asString(t1.$index(body, "to")), A._BigIntImpl_parse(A._asString(t1.$index(body, "value")), null), $async$self.file), $async$call$1);
            case 4:
              // returning from await.
              tx = $async$result;
              B.JSArray_methods.add$1($async$self.refreeTxPool.txs, tx);
              $async$self.peerServer.syncRefreeTx$0();
              $async$returnValue = A.Response$ok(B.C_JsonCodec.encode$1(tx.toJson$0()));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.main_closure5.prototype = {
    call$1(request) {
      return this.$call$body$main_closure2(type$.Request._as(request));
    },
    $call$body$main_closure2(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, tx, body, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = B.C_JsonCodec;
              $async$goto = 3;
              return A._asyncAwait(request.readAsString$0(), $async$call$1);
            case 3:
              // returning from await.
              body = $async$temp1.decode$1($async$result);
              t1 = J.getInterceptor$asx(body);
              if (t1.$index(body, "privateKey") == null || t1.$index(body, "to") == null || t1.$index(body, "value") == null) {
                $async$returnValue = A.Response$ok("Insufficient parameters");
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(A.Wallet_newTx(true, A._asString(t1.$index(body, "privateKey")), A._asString(t1.$index(body, "to")), A._BigIntImpl_parse(A._asString(t1.$index(body, "value")), null), $async$self.file), $async$call$1);
            case 4:
              // returning from await.
              tx = $async$result;
              B.JSArray_methods.add$1($async$self.stuckTxPool.txs, tx);
              $async$returnValue = A.Response$ok(B.C_JsonCodec.encode$1(tx.toJson$0()));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.main_closure6.prototype = {
    call$2(request, publicKey) {
      return this.$call$body$main_closure1(type$.Request._as(request), A._asString(publicKey));
    },
    $call$body$main_closure1(request, publicKey) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1, lastBlock, $async$temp1;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.Utils_fischilesche($async$self.file);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(t1.get$last(t1), $async$call$2);
            case 3:
              // returning from await.
              lastBlock = $async$temp1.Block$prevBlock($async$result);
              A.List_List$from([A.signature(A.PrivateKey$fromHex($.$get$Wallet_curve(), A._asString(lastBlock.toHash.wallet.privateKey)), A.Utils_HexToListOfInt(publicKey)).toCompactHex$0()], true, type$.String);
              B.JSArray_methods.add$1($async$self.accPool.accounts, new A.Account(publicKey));
              $async$returnValue = A.Response$ok("Added account to account pool");
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 11
  };
  A.main_closure7.prototype = {
    call$1(request) {
      return this.$call$body$main_closure0(type$.Request._as(request));
    },
    $call$body$main_closure0(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Response),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, prevBlock, txs, e, s, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, exception, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = $async$self.file;
              t2 = A.Utils_fischilesche(t1);
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(t2.get$last(t2), $async$call$1);
            case 7:
              // returning from await.
              prevBlock = $async$temp1.Block$prevBlock($async$result);
              t2 = $async$self.refreeTxPool;
              txs = t2.txs;
              t3 = $async$self.publicKey;
              J.add$1$ax(txs, A.Tx$(A._setArrayType([], type$.JSArray_TxInput), A._setArrayType([new A.TxOutput(A._BigIntImpl_parse("10000000000000000000000000", null), t3)], type$.JSArray_TxOutput)));
              $async$goto = 8;
              return A._asyncAwait(A.Block_blockNumber(t1), $async$call$1);
            case 8:
              // returning from await.
              t4 = $async$result;
              $async$goto = 9;
              return A._asyncAwait(A.Block_difficulty(t1), $async$call$1);
            case 9:
              // returning from await.
              t5 = $async$result;
              $async$goto = 10;
              return A._asyncAwait(A.Block_totalDifficulty(t1), $async$call$1);
            case 10:
              // returning from await.
              t6 = $async$result;
              t7 = Date.now();
              t8 = prevBlock.hash;
              t9 = $async$self.accPool;
              t10 = t9.accounts;
              t11 = type$.JSArray_Gladiator;
              if (t10.length !== 0) {
                t12 = A._arrayInstanceType(t10);
                t13 = t12._eval$1("MappedListIterable<1,String>");
                t11 = A._setArrayType([A.Gladiator$(new A.GladiatorOutput(A.List_List$of(new A.MappedListIterable(t10, t12._eval$1("String(1)")._as(new A.main__closure2()), t13), true, t13._eval$1("ListIterable.E")), A.Utils_CreateCryptoRandomString(2)), null)], t11);
                t10 = t11;
              } else
                t10 = A._setArrayType([], t11);
              t11 = $async$self.stuckTxPool;
              A.Block_efectus(A.ToHash$(B.Script_1, 0, t4, t5, t6, t7, t3, t8, t10, txs, t11.txs)).then$1$1(new A.main__closure3(t1, t2, t11, t9), type$.Null);
              t9 = A.Response$ok("Started effectus miner");
              $async$returnValue = t9;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              s = A.getTraceFromException($async$exception);
              A.print(e);
              A.print(s);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 134
  };
  A.main__closure2.prototype = {
    call$1(a) {
      return type$.Account._as(a).publicKey;
    },
    $signature: 50
  };
  A.main__closure3.prototype = {
    call$1(block) {
      var t1, _this = this;
      type$.Block._as(block).save$1(_this.file);
      t1 = type$.JSArray_Tx;
      _this.refreeTxPool.set$txs(A._setArrayType([], t1));
      _this.stuckTxPool.set$txs(A._setArrayType([], t1));
      _this.accPool.set$accounts(A._setArrayType([], type$.JSArray_Account));
    },
    $signature: 40
  };
  A.main_closure8.prototype = {
    call$2(request, gladiatorId) {
      return this.$call$body$main_closure(type$.Request._as(request), A._asString(gladiatorId));
    },
    $call$body$main_closure(request, gladiatorId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, txs, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t1, t2, prevBlock, $async$temp1;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.file;
              t2 = A.Utils_fischilesche(t1);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(t2.get$last(t2), $async$call$2);
            case 3:
              // returning from await.
              prevBlock = $async$temp1.Block$prevBlock($async$result);
              t2 = $async$self.refreeTxPool;
              txs = t2.txs;
              t3 = $async$self._box_0.privateKey;
              t3.toString;
              $async$goto = 4;
              return A._asyncAwait(A.Block_blockNumber(t1), $async$call$2);
            case 4:
              // returning from await.
              t4 = $async$result;
              $async$goto = 5;
              return A._asyncAwait(A.Block_difficulty(t1), $async$call$2);
            case 5:
              // returning from await.
              t5 = $async$result;
              $async$goto = 6;
              return A._asyncAwait(A.Block_totalDifficulty(t1), $async$call$2);
            case 6:
              // returning from await.
              t6 = $async$result;
              t7 = Date.now();
              t8 = $async$self.accPool;
              t9 = t8.accounts;
              t10 = type$.JSArray_Gladiator;
              if (t9.length !== 0) {
                t11 = A._arrayInstanceType(t9);
                t12 = t11._eval$1("MappedListIterable<1,String>");
                t10 = A._setArrayType([A.Gladiator$(new A.GladiatorOutput(A.List_List$of(new A.MappedListIterable(t9, t11._eval$1("String(1)")._as(new A.main__closure()), t12), true, t12._eval$1("ListIterable.E")), A.Utils_CreateCryptoRandomString(2)), null)], t10);
                t9 = t10;
              } else
                t9 = A._setArrayType([], t10);
              t10 = $async$self.stuckTxPool;
              A.Block_confossus(t3, gladiatorId, A.ToHash$(B.Script_2, 0, t4, t5, t6, t7, $async$self.publicKey, prevBlock.hash, t9, txs, t10.txs), t1).then$1$1(new A.main__closure0(t1, t2, t10, t8), type$.Null).catchError$1(new A.main__closure1());
              $async$returnValue = A.Response$ok("Started confossus miner");
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 11
  };
  A.main__closure.prototype = {
    call$1(a) {
      return type$.Account._as(a).publicKey;
    },
    $signature: 50
  };
  A.main__closure0.prototype = {
    call$1(block) {
      var t1, _this = this;
      type$.Block._as(block).save$1(_this.file);
      t1 = type$.JSArray_Tx;
      _this.refreeTxPool.set$txs(A._setArrayType([], t1));
      _this.stuckTxPool.set$txs(A._setArrayType([], t1));
      _this.accPool.set$accounts(A._setArrayType([], type$.JSArray_Account));
    },
    $signature: 40
  };
  A.main__closure1.prototype = {
    call$1(onError) {
      return A.print(onError);
    },
    $signature: 9
  };
  A.PeerServer.prototype = {
    bind$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this;
      var $async$bind$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.ServerSocket_bind($async$self.host, $async$self.port, 0, false, false), $async$bind$0);
            case 2:
              // returning from await.
              $async$self.set$serverSocket($async$result);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$bind$0, $async$completer);
    },
    connect$2(externalIp, bootNode) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, t2, splitted, t1;
      var $async$connect$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              splitted = bootNode.split(":");
              t1 = splitted.length;
              if (0 >= t1) {
                $async$returnValue = A.ioore(splitted, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = splitted[0];
              if (1 >= t1) {
                $async$returnValue = A.ioore(splitted, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(A.Socket_connect(t2, A.int_parse(splitted[1], null)), $async$connect$2);
            case 3:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$connect$2, $async$completer);
    },
    syncRefreeTx$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, t2, _i, splitted, t3, t4;
      var $async$syncRefreeTx$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.sockets, t2 = t1.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              splitted = J.split$1$s(t1[_i], ":");
              t3 = splitted.length;
              if (0 >= t3) {
                $async$returnValue = A.ioore(splitted, 0);
                // goto return
                $async$goto = 1;
                break;
              }
              t4 = splitted[0];
              if (1 >= t3) {
                $async$returnValue = A.ioore(splitted, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(A.Socket_connect(t4, A.int_parse(splitted[1], null)), $async$syncRefreeTx$0);
            case 6:
              // returning from await.
            case 4:
              // for update
              t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$syncRefreeTx$0, $async$completer);
    },
    set$serverSocket(serverSocket) {
      this.serverSocket = type$.nullable_ServerSocket._as(serverSocket);
    }
  };
  A.Account.prototype = {};
  A.AccountPool.prototype = {
    set$accounts(accounts) {
      this.accounts = type$.List_Account._as(accounts);
    }
  };
  A.RefreeTxPool.prototype = {
    set$txs(txs) {
      this.txs = type$.List_Tx._as(txs);
    }
  };
  A.StuckTxPool.prototype = {
    set$txs(txs) {
      this.txs = type$.List_Tx._as(txs);
    }
  };
  A.TxInput.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["idx", this.idx, "signature", this.signature, "txId", this.txId], type$.String, type$.dynamic);
    }
  };
  A.TxOutput.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", this.publicKey, "value", this.value.toString$0(0)], type$.String, type$.dynamic);
    }
  };
  A.Tx.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.outputs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["inputs", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Tx_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "outputs", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.Tx_toJson_closure0()), t6), true, t6._eval$1("ListIterable.E")), "id", _this.id, "random", _this.random], type$.String, type$.dynamic);
    }
  };
  A.Tx_closure.prototype = {
    call$1(x) {
      return type$.TxInput._as(x).toJson$0();
    },
    $signature: 51
  };
  A.Tx_closure0.prototype = {
    call$1(x) {
      return type$.TxOutput._as(x).toJson$0();
    },
    $signature: 52
  };
  A.Tx$fromJson_closure.prototype = {
    call$1(x) {
      var t1;
      type$.Map_String_dynamic._as(x);
      t1 = A._asInt(x.$index(0, "idx"));
      return new A.TxInput(A._asString(x.$index(0, "txId")), t1, A._asString(x.$index(0, "signature")));
    },
    $signature: 139
  };
  A.Tx$fromJson_closure0.prototype = {
    call$1(x) {
      type$.Map_String_dynamic._as(x);
      return new A.TxOutput(A._BigIntImpl_parse(A._asString(x.$index(0, "value")), null), A._asString(x.$index(0, "publicKey")));
    },
    $signature: 140
  };
  A.Tx_toJson_closure.prototype = {
    call$1(x) {
      return type$.TxInput._as(x).toJson$0();
    },
    $signature: 51
  };
  A.Tx_toJson_closure0.prototype = {
    call$1(x) {
      return type$.TxOutput._as(x).toJson$0();
    },
    $signature: 52
  };
  A.WalletOutput.prototype = {};
  A.Wallet.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["privateKey", this.privateKey, "publicKey", this.publicKey], type$.String, type$.dynamic);
    }
  };
  A.Wallet_getDefences_closure.prototype = {
    call$1(element) {
      return type$.Gladiator._as(element).id === this.gladiatorId;
    },
    $signature: 12
  };
  A.Wallet_getDefences_closure0.prototype = {
    call$1(element) {
      return type$.Gladiator._as(element).id === this.gladiatorId;
    },
    $signature: 12
  };
  A.Wallet_getDefences_closure1.prototype = {
    call$1(element) {
      return type$.TxOutput._as(element).publicKey === this.key;
    },
    $signature: 141
  };
  A.Wallet_getDefences_closure2.prototype = {
    call$1(element) {
      return type$.Block._as(element).hash === this.key;
    },
    $signature: 142
  };
  A.Wallet_outputs_closure.prototype = {
    call$1(tx) {
      return type$.Tx._as(tx).id === this.input.txId;
    },
    $signature: 143
  };
  A.Wallet_outputs_closure0.prototype = {
    call$1(element) {
      return type$.WalletOutput._as(element).txId === this.tx.id;
    },
    $signature: 144
  };
  (function aliases() {
    var _ = A._StreamSinkImpl.prototype;
    _.super$_StreamSinkImpl$add = _.add$1;
    _.super$_StreamSinkImpl$addStream = _.addStream$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _.super$_BufferingStreamSubscription$_close = _._close$0;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = A.Converter.prototype;
    _.super$Converter$fuse = _.fuse$1$1;
    _.super$Converter$bind = _.bind$1;
    _ = A._StringSinkConversionSink.prototype;
    _.super$_StringSinkConversionSink$close = _.close$0;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = A.Response.prototype;
    _.super$Response$change = _.change$3$body$context$headers;
    _ = A.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _static_2 = hunkHelpers._static_2,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_0_i = hunkHelpers._instance_0i;
    var _;
    _instance_1_u(_ = A._StreamSinkImpl.prototype, "get$_completeDoneValue", "_completeDoneValue$1", 9);
    _instance_2_u(_, "get$_completeDoneError", "_completeDoneError$2", 5);
    _instance(A._HttpServer.prototype, "get$close", 0, 0, function() {
      return {force: false};
    }, ["call$1$force", "call$0"], ["close$1$force", "close$0"], 64, 0, 0);
    _instance_1_u(_ = A._HttpParser.prototype, "get$__http$_onData", "__http$_onData$1", 80);
    _instance_0_u(_, "get$__http$_onDone", "__http$_onDone$0", 0);
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 35);
    _instance_1_u(_ = A.CastStreamSubscription.prototype, "get$_onData", "_onData$1", 10);
    _instance(_, "get$pause", 0, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 84, 0, 0);
    _instance_0_u(_, "get$resume", "resume$0", 0);
    _static_0(A, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 32);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 17);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 17);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 17);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 9);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 5);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    _static(A, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 147, 0);
    _static(A, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return A._rootRun($self, $parent, zone, f, type$.dynamic);
    }], 148, 1);
    _static(A, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      return A._rootRunUnary($self, $parent, zone, f, arg, type$.dynamic, type$.dynamic);
    }], 149, 1);
    _static(A, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      return A._rootRunBinary($self, $parent, zone, f, arg1, arg2, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 150, 1);
    _static(A, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return A._rootRegisterCallback($self, $parent, zone, f, type$.dynamic);
    }], 151, 0);
    _static(A, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      return A._rootRegisterUnaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic);
    }], 152, 0);
    _static(A, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      return A._rootRegisterBinaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 153, 0);
    _static(A, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 154, 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 155, 0);
    _static(A, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 156, 0);
    _static(A, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 157, 0);
    _static(A, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 158, 0);
    _static_1(A, "async___printToZone$closure", "_printToZone", 48);
    _static(A, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 159, 0);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 26, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 5);
    _instance_1_i(_ = A._StreamController.prototype, "get$add", "add$1", 10);
    _instance(_, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 26, 0, 0);
    _instance_0_u(_, "get$close", "close$0", 15);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance(_ = A._BufferingStreamSubscription.prototype, "get$pause", 0, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 131, 0, 0);
    _instance_0_u(_, "get$resume", "resume$0", 0);
    _instance_0_u(_, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_ = A._StreamIterator.prototype, "get$_async$_onData", "_async$_onData$1", 10);
    _instance_2_u(_, "get$_onError", "_onError$2", 5);
    _instance_0_u(_, "get$_onDone", "_onDone$0", 0);
    _instance_0_u(_ = A._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_async$_handleData", "_async$_handleData$1", 10);
    _instance_2_u(_, "get$_async$_handleError", "_async$_handleError$2", 18);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _instance_0_u(_ = A._SinkTransformerStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_async$_handleData", "_async$_handleData$1", 10);
    _instance_2_u(_, "get$_async$_handleError", "_async$_handleError$2", 5);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 160);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 161);
    _static_2(A, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 35);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 36);
    _instance_0_u(A._JsonDecoderSink.prototype, "get$close", "close$0", 0);
    _instance(A._JsonUtf8EncoderSink.prototype, "get$_convert$_addChunk", 0, 3, null, ["call$3"], ["_convert$_addChunk$3"], 57, 0, 0);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 13);
    _static_0(A, "core__Uri__createList$closure", "_Uri__createList", 33);
    _static_2(A, "core___toUnmodifiableStringList$closure", "_toUnmodifiableStringList", 162);
    _instance_0_u(_ = A._FileStream.prototype, "get$_readBlock", "_readBlock$0", 0);
    _instance_0_u(_, "get$_io$_start", "_io$_start$0", 0);
    _instance_0_i(A._File.prototype, "get$length", "length$0", 73);
    _instance_1_u(_ = A._StreamSinkImpl0.prototype, "get$_io$_completeDoneValue", "_io$_completeDoneValue$1", 9);
    _instance_2_u(_, "get$_io$_completeDoneError", "_io$_completeDoneError$2", 78);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 108, 1);
    _static_1(A, "router_Router__defaultNotFound$closure", "Router__defaultNotFound", 49);
    _instance_1_u(A.Router.prototype, "get$$call", "call$1", 4);
    _instance(A.SourceSpanMixin.prototype, "get$message", 0, 1, null, ["call$2$color", "call$1"], ["message$2$color", "message$1"], 113, 0, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(null, [A.Object, A.HandshakeException]);
    _inheritMany(A.Object, [A.JS_CONST, A.HttpException, A._HttpHeaders, A.Closure, A._HeaderValue, A._Cookie, A._ServiceObject, A._CopyingBytesBuilder, A.Stream, A._StreamSinkImpl, A._HttpOutgoing, A.LinkedListEntry, A._HttpSessionManager, J.Interceptor, J.ArrayIterator, A.CastStreamSubscription, A.Iterable, A.CastIterator, A.Error, A._ListBase_Object_ListMixin, A.SentinelValue, A.ListIterator, A.Iterator, A.ExpandIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A.MapView, A.ConstantMap, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._IterationMarker, A._SyncStarIterator, A.AsyncError, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamConsumer, A.StreamTransformerBase, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._BufferingStreamSubscription, A._PendingEvents, A._DelayedEvent, A._DelayedDone, A._StreamIterator, A._EventSinkWrapper, A._ZoneFunction, A._RunNullaryZoneFunction, A._RunUnaryZoneFunction, A._RunBinaryZoneFunction, A._RegisterNullaryZoneFunction, A._RegisterUnaryZoneFunction, A._RegisterBinaryZoneFunction, A._ZoneSpecification, A._ZoneDelegate, A._Zone, A._HashMapKeyIterator, A._LinkedListIterator, A.ListMixin, A._UnmodifiableMapMixin, A._ListQueueIterator, A.StringConversionSinkMixin, A.Codec, A.ChunkedConversionSink, A._Base64Encoder, A._ConverterStreamEventSink, A._JsonStringifier, A._JsonPrettyPrintMixin, A._ClosableStringSink, A._StringConversionSinkAsStringSinkAdapter, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._BigIntClassic, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A.Sink, A._StringStackTrace, A.Stopwatch, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.OSError, A._BufferAndStart, A.FileMode, A.FileSystemException, A.FileSystemEntity, A._StreamSinkImpl0, A.SocketOption, A._JSSecureRandom, A.Endian, A.ArgParser, A.ArgResults, A.Option, A.OptionType, A.Parser, A.CanonicalizedMap, A.DefaultEquality, A.IterableEquality, A.ListEquality, A.Digest, A.HashSink, A.Signature, A.AffinePoint, A.JacobianPoint, A.EllipticCurve, A.EllipticException, A.PrivateKey, A._State, A.MediaType, A.ASN1Sequence, A.ASN1Integer, A.Context, A.Style, A.ParsedPath, A.PathException, A.Body, A.Message, A._OnHijack, A.Router, A.RouterEntry, A.SourceFile, A.SourceLocationMixin, A.SourceSpanMixin, A.Highlighter, A._Highlight, A._Line, A.SourceLocation, A.SourceSpanException, A.Chain, A.Frame, A.LazyChain, A.Trace, A.UnparsedFrame, A.StringScanner, A.Tuple3, A.BaseInput, A.ToHash, A.Block, A.GladiatorOutput, A.Gladiator, A.PeerServer, A.Account, A.AccountPool, A.RefreeTxPool, A.StuckTxPool, A.TxOutput, A.Tx, A.WalletOutput, A.Wallet]);
    _inheritMany(A.Closure, [A.Closure2Args, A._HttpHeaders__parseCookies_parseCookieString, A.Closure0Args, A._HttpHeaders__parseCookies_parseCookieString_expect, A._ContentType_emptyIfNull, A._HttpIncoming_listen_closure, A._HttpRequest_closure, A._HttpRequest_closure0, A._StreamSinkImpl_addStream_closure, A._StreamSinkImpl__controller_closure, A._HttpResponse__writeHeader_closure, A._HttpOutgoing_writeHeaders_closure, A._HttpOutgoing_writeHeaders_closure0, A._HttpOutgoing_addStream_closure, A._HttpOutgoing_addStream_closure0, A._HttpOutgoing_addStream_onData, A._HttpOutgoing_addStream_closure1, A._HttpOutgoing_close_finalize_closure, A._HttpConnection_closure, A._HttpConnection__closure, A._HttpConnection__closure0, A._HttpConnection__closure1, A._HttpConnection_closure1, A._HttpServer_bind_closure, A._HttpServer_idleTimeout_closure, A._HttpServer_listen_closure, A.ConstantStringMap_values_closure, A.Instantiation, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_fold_closure0, A.Stream_fold__closure0, A.Stream_length_closure, A.Stream_last_closure, A.Stream_elementAt_closure0, A._CustomZone_bindUnaryCallback_closure, A._CustomZone_bindUnaryCallbackGuarded_closure, A._RootZone_bindUnaryCallback_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A.runZonedGuarded_closure, A._HashMap_values_closure, A._LinkedCustomHashMap_closure, A.MapMixin_entries_closure, A.Converter_bind_closure, A.Encoding_decodeStream_closure0, A.LineSplitter_bind_closure, A._BigIntImpl_hashCode_finish, A._BigIntImpl_toDouble_readBits, A.Uri_parseIPv6Address_error, A._Uri__makePath_closure, A._Uri__splitQueryStringAll_parsePair, A._createTables_setChars, A._createTables_setRange, A._FileStream__readBlock_closure, A._FileStream__start_onReady, A._FileStream__start_onOpenFile, A._FileStreamConsumer_addStream_closure, A._FileStreamConsumer_addStream__closure, A._FileStreamConsumer_addStream___closure, A._FileStreamConsumer_close_closure, A._FileStreamConsumer_close_closure0, A._File_exists_closure, A._File_open_closure, A._File_length_closure, A._RandomAccessFile_close_closure, A._RandomAccessFile_read_closure, A._RandomAccessFile_writeFrom_closure, A._RandomAccessFile_setPosition_closure, A._StreamSinkImpl__controller_closure1, A.ArgParser__addOption_closure, A.CanonicalizedMap_entries_closure, A.CanonicalizedMap_keys_closure, A.CanonicalizedMap_values_closure, A.CaseInsensitiveMap_closure, A.CaseInsensitiveMap$from_closure, A.MediaType_toString__closure, A.expectQuotedString_closure, A.ASN1Sequence_encode_closure, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.WindowsStyle_absolutePathToUri_closure, A.serveRequests__closure, A._writeResponse_closure0, A._logTopLevelError_closure, A.Body__isPlainAscii_closure, A.Headers$__closure, A.Headers$__closure0, A.createMiddleware_closure, A.createMiddleware_closure0, A.createMiddleware__closure, A.createMiddleware___closure0, A.createMiddleware____closure0, A._expandToHeadersAll_closure, A.expandToHeadersAll_closure, A._removeBody_closure, A.RouterEntry_RouterEntry_closure, A.RouterEntry_invoke_closure, A.RouterEntry_invoke__closure, A.Highlighter$__closure, A.Highlighter$___closure, A.Highlighter$__closure0, A.Highlighter__collateLines_closure, A.Highlighter__collateLines_closure1, A.Highlighter__collateLines__closure, A.Highlighter_highlight_closure, A.Chain_Chain$parse_closure, A.Chain_Chain$parse_closure0, A.Chain_Chain$parse_closure1, A.Chain_terse_closure, A.Chain_foldFrames_closure, A.Chain_foldFrames_closure0, A.Chain_toTrace_closure, A.Chain_toString_closure0, A.Chain_toString__closure0, A.Chain_toString_closure, A.Chain_toString__closure, A.Trace__parseVM_closure, A.Trace__parseVM_closure0, A.Trace$parseV8_closure, A.Trace$parseV8_closure0, A.Trace$parseJSCore_closure, A.Trace$parseJSCore_closure0, A.Trace$parseFirefox_closure, A.Trace$parseFirefox_closure0, A.Trace$parseFriendly_closure, A.Trace$parseFriendly_closure0, A.Trace_foldFrames_closure, A.Trace_foldFrames_closure0, A.Trace_toString_closure0, A.Trace_toString_closure, A.ToHash$fromJson_closure, A.ToHash$fromJson_closure0, A.ToHash$fromJson_closure1, A.ToHash_toJson_closure, A.ToHash_toJson_closure0, A.ToHash_toJson_closure1, A.Block_getPublicKeys_closure, A.Block_getPublicKeys_closure0, A.main_closure0, A.main_closure2, A.main_closure3, A.main_closure4, A.main_closure5, A.main_closure7, A.main__closure2, A.main__closure3, A.main__closure, A.main__closure0, A.main__closure1, A.Tx_closure, A.Tx_closure0, A.Tx$fromJson_closure, A.Tx$fromJson_closure0, A.Tx_toJson_closure, A.Tx_toJson_closure0, A.Wallet_getDefences_closure, A.Wallet_getDefences_closure0, A.Wallet_getDefences_closure1, A.Wallet_getDefences_closure2, A.Wallet_outputs_closure, A.Wallet_outputs_closure0]);
    _inheritMany(A.Closure2Args, [A._HttpHeaders_closure, A._HttpHeaders_forEach_closure, A._HttpHeaders__build_closure, A._HttpHeaders_toString_closure, A._HeaderValue_toString_closure, A._ContentType_closure, A._StreamSinkImpl__controller_closure0, A._HttpOutgoing_addStream_closure2, A._HttpOutgoing_close_finalize_closure0, A._HttpServer_listen_closure0, A._CastListBase_sort_closure, A.ConstantMap_map_closure, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A._BufferingStreamSubscription_asFuture_closure0, A._cancelAndErrorClosure_closure, A.HashMap_HashMap$from_closure, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A.Encoding_decodeStream_closure, A._JsonStringifier_writeMap_closure, A._JsonPrettyPrintMixin_writeMap_closure, A.NoSuchMethodError_toString_closure, A._BigIntImpl_hashCode_combine, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_parseHex, A._createTables_build, A._FileStream__readBlock_closure0, A._FileStream__start_onOpenFile_closure, A._FileStream__start_openFailed, A._FileStreamConsumer_addStream_closure_error, A._StreamSinkImpl__controller_closure2, A.Parser_parse_closure, A.CanonicalizedMap_addAll_closure, A.CanonicalizedMap_forEach_closure, A.CanonicalizedMap_map_closure, A._Sink__decode_assertCurrentChar, A.MediaType_toString_closure, A.ASN1Sequence_encode_closure0, A.serveRequests_closure0, A.handleRequest_closure, A._fromHttpRequest_closure, A._writeResponse_closure, A.Headers_singleValues_closure, A.Highlighter__collateLines_closure0, A.Frame_Frame$parseV8_closure_parseLocation, A.main_closure, A.main_closure1, A.main_closure6, A.main_closure8]);
    _inheritMany(A.Closure0Args, [A._HttpHeaders__parseCookies_parseCookieString_done, A._HttpHeaders__parseCookies_parseCookieString_skipWS, A._HttpHeaders__parseCookies_parseCookieString_parseName, A._HttpHeaders__parseCookies_parseCookieString_parseValue, A._StreamSinkImpl_addStream_targetAddStream, A._StreamSinkImpl_addStream_targetAddStream_closure, A._HttpOutgoing_close_finalize, A._HttpConnection_closure0, A._HttpParser$__closure, A._HttpParser$__closure0, A._HttpParser$__closure1, A._HttpParser$__closure2, A._HttpParser__createIncoming_closure, A._HttpParser__createIncoming_closure0, A._HttpParser__createIncoming_closure1, A._HttpParser__createIncoming_closure2, A.nullFuture_closure, A.Primitives_initTicker_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__asyncCompleteWithValue_closure, A._Future__chainFuture_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_Stream$fromIterable_closure, A.Stream_fold_closure, A.Stream_fold__closure, A.Stream_length_closure0, A.Stream_last_closure0, A.Stream_elementAt_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._AddStreamState_cancel_closure, A._BufferingStreamSubscription_asFuture_closure, A._BufferingStreamSubscription_asFuture__closure, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._cancelAndError_closure, A._cancelAndValue_closure, A._CustomZone_bindCallback_closure, A._CustomZone_bindCallbackGuarded_closure, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure, A._BigIntImpl_toDouble_roundUp, A._FileStream_listen_closure, A._FileStream__closeFile_done, A._FileStreamConsumer_addStream__closure0, A.Parser__setOption_closure, A.MediaType_MediaType$parse_closure, A.serveRequests_closure, A.createMiddleware___closure, A.createMiddleware____closure, A.Highlighter_closure, A.Highlighter__writeFileStart_closure, A.Highlighter__writeMultilineHighlights_closure, A.Highlighter__writeMultilineHighlights_closure0, A.Highlighter__writeMultilineHighlights_closure1, A.Highlighter__writeMultilineHighlights_closure2, A.Highlighter__writeMultilineHighlights__closure, A.Highlighter__writeMultilineHighlights__closure0, A.Highlighter__writeHighlightedText_closure, A.Highlighter__writeIndicator_closure, A.Highlighter__writeIndicator_closure0, A.Highlighter__writeIndicator_closure1, A.Highlighter__writeSidebar_closure, A._Highlight_closure, A.Chain_Chain$forTrace_closure, A.Frame_Frame$parseVM_closure, A.Frame_Frame$parseV8_closure, A.Frame_Frame$_parseFirefoxEval_closure, A.Frame_Frame$parseFirefox_closure, A.Frame_Frame$parseFriendly_closure, A.LazyChain_foldFrames_closure]);
    _inherit(A._ContentType, A._HeaderValue);
    _inheritMany(A.Stream, [A._HttpIncoming, A._HttpInboundMessage, A.__HttpServer_Stream__ServiceObject, A._HttpParser, A.CastStream, A._StreamImpl, A._ForwardingStream, A._BoundSinkStream, A._FileStream]);
    _inherit(A._HttpRequest, A._HttpInboundMessage);
    _inherit(A._IOSinkImpl0, A._StreamSinkImpl);
    _inherit(A._HttpOutboundMessage, A._IOSinkImpl0);
    _inherit(A._HttpResponse, A._HttpOutboundMessage);
    _inherit(A.__HttpConnection_LinkedListEntry__ServiceObject, A.LinkedListEntry);
    _inherit(A._HttpConnection, A.__HttpConnection_LinkedListEntry__ServiceObject);
    _inherit(A._HttpServer, A.__HttpServer_Stream__ServiceObject);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeTypedData]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.SkipWhileIterable, A.WhereTypeIterable, A._ConstantMapKeyIterable, A.IterableBase, A._StringAllMatchesIterable, A.LinkedList]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A.AssertionError, A._Error, A.JsonUnsupportedObjectError, A.NullThrownError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A.TypedDataBuffer]);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A.ListQueue, A._JsonMapKeyIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.WhereIterator, A.TakeIterator, A.SkipIterator, A.SkipWhileIterator]);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inheritMany(A.MapView, [A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._EmptyShelfUnmodifiableMap]);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inheritMany(A.UnmodifiableMapView, [A.ConstantMapView, A.Headers, A.ShelfUnmodifiableMap]);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.MapBase, A.MapMixin);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._HashMap, A._JsonMap]);
    _inheritMany(A.IterableBase, [A._AllMatchesIterable, A._SyncStarIterable]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.NativeTypedArray);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inheritMany(A._StreamImpl, [A._ControllerStream, A._GeneratedStreamImpl]);
    _inheritMany(A._BufferingStreamSubscription, [A._ControllerSubscription, A._ForwardingStreamSubscription, A._SinkTransformerStreamSubscription]);
    _inheritMany(A._PendingEvents, [A._IterablePendingEvents, A._StreamImplEvents]);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inheritMany(A._ForwardingStream, [A._MapStream, A._HandleErrorStream]);
    _inheritMany(A._Zone, [A._CustomZone, A._RootZone]);
    _inheritMany(A.JsLinkedHashMap, [A._LinkedIdentityHashMap, A._LinkedCustomHashMap]);
    _inherit(A.StringConversionSinkBase, A.StringConversionSinkMixin);
    _inheritMany(A.StringConversionSinkBase, [A._StringSinkConversionSink, A._UnicodeSubsetEncoderSink, A._LineSplitterSink, A._StringAdapterSink]);
    _inherit(A._JsonDecoderSink, A._StringSinkConversionSink);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A._FusedCodec, A.JsonCodec, A.HexCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Latin1Codec, A.Utf8Codec]);
    _inheritMany(A.StreamTransformerBase, [A.Converter, A.LineSplitter]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A._FusedConverter, A.JsonEncoder, A.JsonDecoder, A.Utf8Encoder, A.Utf8Decoder, A.Hash, A.HexEncoder, A.ChunkedCodingDecoder]);
    _inheritMany(A._UnicodeSubsetEncoder, [A.AsciiEncoder, A.Latin1Encoder]);
    _inheritMany(A._UnicodeSubsetDecoder, [A.AsciiDecoder, A.Latin1Decoder]);
    _inheritMany(A.ChunkedConversionSink, [A.ByteConversionSink, A._JsonEncoderSink, A._JsonUtf8EncoderSink]);
    _inheritMany(A.ByteConversionSink, [A.ByteConversionSinkBase, A._Utf8StringSinkAdapter, A._Utf8ConversionSink]);
    _inheritMany(A.ByteConversionSinkBase, [A._ErrorHandlingAsciiDecoderSink, A._SimpleAsciiDecoderSink, A._Base64EncoderSink, A._ByteAdapterSink, A._Latin1DecoderSink, A._Sink]);
    _inherit(A._BufferCachingBase64Encoder, A._Base64Encoder);
    _inheritMany(A._Base64EncoderSink, [A._AsciiBase64EncoderSink, A._Utf8Base64EncoderSink]);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inheritMany(A._JsonStringifier, [A._JsonStringStringifier, A._JsonUtf8Stringifier]);
    _inherit(A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, A._JsonUtf8Stringifier);
    _inherit(A._JsonUtf8StringifierPretty, A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin);
    _inherit(A._Latin1AllowInvalidDecoderSink, A._Latin1DecoderSink);
    _inherit(A._LineSplitterEventSink, A._LineSplitterSink);
    _inherit(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, A._Utf8Encoder);
    _inherit(A._Utf8EncoderSink, A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inherit(A._FileStreamConsumer, A.StreamConsumer);
    _inherit(A._File, A.FileSystemEntity);
    _inherit(A._IOSinkImpl, A._StreamSinkImpl0);
    _inherit(A.ArgParserException, A.FormatException);
    _inherit(A.DigestSink, A.Sink);
    _inherit(A._Sha512, A.Hash);
    _inherit(A._Sha64BitSink, A.HashSink);
    _inherit(A.Sha512Sink, A._Sha64BitSink);
    _inherit(A.PublicKey, A.AffinePoint);
    _inherit(A.CaseInsensitiveMap, A.CanonicalizedMap);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inheritMany(A.Message, [A.Request, A.Response]);
    _inherit(A._RouteNotFoundResponse, A.Response);
    _inherit(A.FileLocation, A.SourceLocationMixin);
    _inheritMany(A.SourceSpanMixin, [A._FileSpan, A.SourceSpanBase]);
    _inherit(A.SourceSpanFormatException, A.SourceSpanException);
    _inherit(A.SourceSpanWithContext, A.SourceSpanBase);
    _inherit(A.StringScannerException, A.SourceSpanFormatException);
    _inherit(A._IntBuffer, A.TypedDataBuffer);
    _inherit(A.Uint8Buffer, A._IntBuffer);
    _inherit(A.Script, A._Enum);
    _inheritMany(A.BaseInput, [A.GladiatorInput, A.TxInput]);
    _mixin(A.__HttpConnection_LinkedListEntry__ServiceObject, A._ServiceObject);
    _mixin(A.__HttpServer_Stream__ServiceObject, A._ServiceObject);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, A._JsonPrettyPrintMixin);
    _mixin(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, A.StringConversionSinkMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "bool(String)", "Null(@)", "Null()", "Future<Response>(Request)", "~(Object,StackTrace)", "~(String,List<String>)", "Frame(String)", "Frame()", "~(@)", "~(Object?)", "Future<Response>(Request,String)", "bool(Gladiator)", "String(String)", "Null(@,@)", "Future<@>()", "bool(_Highlight)", "~(~())", "~(@,StackTrace)", "~(@,@)", "~(Object?,Object?)", "Null(Object,StackTrace)", "~(RandomAccessFile)", "_RandomAccessFile(@)", "bool(Frame)", "int(int)", "~(Object[StackTrace?])", "int(int,int)", "Null(Socket)", "Future<@>(@)", "~(Uint8List,String,int)", "~(List<int>)", "int()", "List<String>()", "~(String,String)", "int(@,@)", "@(@)", "String(String?)", "@()", "Chain()", "Null(Block)", "int(Frame)", "String(Frame)", "~(String,String?)", "String(Match)", "Tx(@)", "Map<String,@>(Tx)", "String()", "~(String)", "Response(Request)", "String(Account)", "Map<String,@>(TxInput)", "Map<String,@>(TxOutput)", "Trace(String)", "_ConverterStreamEventSink<@,@>(EventSink<@>)", "StringBuffer(StringBuffer,String)", "String(StringBuffer)", "~(Uint8List,int,int)", "_LineSplitterEventSink(EventSink<String>)", "~(Symbol0,@)", "bool()", "0&(@)", "~(String,int)", "~(String[@])", "Future<@>({force:bool})", "~(int,int,int)", "Uint8List(@,@)", "_HttpServer(ServerSocket)", "Null(Uint8List)", "~(Timer)", "Null(RandomAccessFile)", "Future<~>(RandomAccessFile)", "File?(~)", "Future<int>()", "bool/(@)", "bool(Cookie)", "int/(@)", "Uint8List(@)", "~(@,StackTrace?)", "~(String,Option)", "~(Uint8List)", "~(int,String)", "MediaType()", "~(Cookie)", "~([Future<@>?])", "Uint8List(ASN1Object)", "List<int>(List<int>,Uint8List)", "~(HttpRequest)", "Future<Null>()", "bool(int)", "MapEntry<String,String>(String,List<String>)", "bool(MapEntry<String,List<String>>)", "MapEntry<String,List<String>>(MapEntry<String,List<String>>)", "Null(Request)", "Future<Response>(Request)(Response/(Request))", "~(~)", "Response?/()", "Response/(Response?)", "Response/()", "Response/(Response)", "MapEntry<String,List<String>?>(MapEntry<String,Object?>)", "MapEntry<String,List<String>>(MapEntry<String,Object>)", "Response(Response)", "Response/(Request)(Response/(Request))", "String?(String)", "String?()", "int(_Line)", "~(String,@)", "0^(0^,0^)<num>", "Uri?(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(List<_Highlight>)", "SourceSpanWithContext()", "String(String{color:@})", "Future<@>(~)", "@(@,String)", "Trace(Trace)", "bool(Trace)", "List<Frame>(Trace)", "int(Trace)", "@(String)", "String(Trace)", "Null(~())", "Null(@,StackTrace)", "Frame(String,String)", "~(int,@)", "Frame(Frame)", "Gladiator(@)", "String(Cookie)", "Map<String,@>(Gladiator)", "_Future<@>(@)", "~([Future<~>?])", "_HttpOutboundMessage<@>?(@)", "~(Zone,ZoneDelegate,Zone,Object,StackTrace)", "Future<Response?>(Request)", "bool(@)", "Uri?(_Line)", "_HttpOutboundMessage<@>?(@,@)", "_HttpOutboundMessage<@>(@)", "TxInput(@)", "TxOutput(@)", "bool(TxOutput)", "bool(Block)", "bool(Tx)", "bool(WalletOutput)", "_HttpOutboundMessage<@>(@,@)", "~(_HttpIncoming)", "~(Zone?,ZoneDelegate?,Zone,Object,StackTrace)", "0^(Zone?,ZoneDelegate?,Zone,0^())<Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^),1^)<Object?Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^,2^),1^,2^)<Object?Object?Object?>", "0^()(Zone,ZoneDelegate,Zone,0^())<Object?>", "0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?Object?>", "0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?Object?Object?>", "AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)", "~(Zone?,ZoneDelegate?,Zone,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))", "~(Zone,ZoneDelegate,Zone,String)", "Zone(Zone?,ZoneDelegate?,Zone,ZoneSpecification?,Map<Object?,Object?>?)", "bool(Object?,Object?)", "int(Object?)", "List<String>(String,List<String>)", "Null(bool)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","HttpServer":{"Stream":["HttpRequest"]},"HttpRequest":{"Stream":["Uint8List"]},"HttpResponse":{"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpIncoming":{"Stream":["Uint8List"],"Stream.T":"Uint8List"},"_HttpOutboundMessage":{"_StreamSinkImpl":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpConnection":{"LinkedListEntry":["_HttpConnection"],"LinkedListEntry.E":"_HttpConnection"},"_HttpServer":{"HttpServer":[],"Stream":["HttpRequest"],"Stream.T":"HttpRequest"},"_HttpSession":{"Map":["@","@"]},"HttpException":{"Exception":[]},"_HttpHeaders":{"HttpHeaders":[]},"_ContentType":{"ContentType":[]},"_Cookie":{"Cookie":[]},"_CopyingBytesBuilder":{"BytesBuilder":[]},"_HttpInboundMessage":{"Stream":["Uint8List"]},"_HttpRequest":{"HttpRequest":[],"Stream":["Uint8List"],"Stream.T":"Uint8List"},"_StreamSinkImpl":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl0":{"_StreamSinkImpl":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"_HttpResponse":{"_HttpOutboundMessage":["HttpResponse"],"HttpResponse":[],"_StreamSinkImpl":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[],"_StreamSinkImpl.T":"List<int>"},"_HttpOutgoing":{"StreamConsumer":["List<int>"]},"_HttpParser":{"Stream":["_HttpIncoming"],"Stream.T":"_HttpIncoming"},"JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"num":[],"Comparable":["num"]},"JSInt":{"int":[],"num":[],"Comparable":["num"]},"JSNumNotInt":{"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"]},"CastStream":{"Stream":["2"],"Stream.T":"2"},"CastStreamSubscription":{"StreamSubscription":["2"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListMixin":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListMixin.E":"2","Iterable.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"SkipWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"SkipWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"MapView.K":"1","MapView.V":"2"},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteData":{"ByteData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSIndexable":["1"]},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"_Future":{"Future":["1"]},"EventSink":{"Sink":["1"]},"_IterablePendingEvents":{"_PendingEvents":["1"]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_StreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamImpl":{"Stream":["1"]},"_GeneratedStreamImpl":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_StreamImplEvents":{"_PendingEvents":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2","_ForwardingStream.S":"1","_ForwardingStream.T":"2"},"_HandleErrorStream":{"_ForwardingStream":["1","1"],"Stream":["1"],"Stream.T":"1","_ForwardingStream.S":"1","_ForwardingStream.T":"1"},"_EventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"_SinkTransformerStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_BoundSinkStream":{"Stream":["2"],"Stream.T":"2"},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapMixin":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedIdentityHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"IterableBase":{"Iterable":["1"]},"LinkedList":{"Iterable":["1"],"Iterable.E":"1"},"_LinkedListIterator":{"Iterator":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"MapView.K":"1","MapView.V":"2"},"ListQueue":{"ListIterable":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"_ConverterStreamEventSink":{"EventSink":["1"],"Sink":["1"]},"Encoding":{"Codec":["String","List<int>"]},"_LineSplitterEventSink":{"StringConversionSink":[],"EventSink":["String"],"Sink":["String"]},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"Iterable.E":"String","ListIterable.E":"String"},"_JsonDecoderSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSink":[],"Sink":["String"],"_StringSinkConversionSink.0":"StringBuffer"},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.T":"List<int>","Converter.S":"String"},"_UnicodeSubsetEncoderSink":{"StringConversionSink":[],"Sink":["String"]},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.T":"String","Converter.S":"List<int>"},"_ErrorHandlingAsciiDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_SimpleAsciiDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.T":"String","Converter.S":"List<int>"},"_BufferCachingBase64Encoder":{"_Base64Encoder":[]},"_Base64EncoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_AsciiBase64EncoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Utf8Base64EncoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ByteConversionSink":{"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ByteConversionSinkBase":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_ByteAdapterSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ChunkedConversionSink":{"Sink":["1"]},"_FusedCodec":{"Codec":["1","3"],"Codec.S":"1"},"Converter":{"StreamTransformer":["1","2"]},"_FusedConverter":{"Converter":["1","3"],"StreamTransformer":["1","3"],"Converter.T":"3","Converter.S":"1"},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformer":["Object?","String"],"Converter.T":"String","Converter.S":"Object?"},"_JsonEncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"_JsonUtf8EncoderSink":{"ChunkedConversionSink":["Object?"],"Sink":["Object?"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformer":["String","Object?"],"Converter.T":"Object?","Converter.S":"String"},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Latin1Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.T":"List<int>","Converter.S":"String"},"Latin1Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.T":"String","Converter.S":"List<int>"},"_Latin1DecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Latin1AllowInvalidDecoderSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"LineSplitter":{"StreamTransformer":["String","String"]},"_LineSplitterSink":{"StringConversionSink":[],"Sink":["String"]},"_ClosableStringSink":{"StringSink":[]},"_StringConversionSinkAsStringSinkAdapter":{"StringSink":[]},"StringConversionSinkBase":{"StringConversionSink":[],"Sink":["String"]},"StringConversionSinkMixin":{"StringConversionSink":[],"Sink":["String"]},"_StringSinkConversionSink":{"StringConversionSink":[],"Sink":["String"]},"_StringAdapterSink":{"StringConversionSink":[],"Sink":["String"]},"_Utf8StringSinkAdapter":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"_Utf8ConversionSink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.T":"List<int>","Converter.S":"String"},"_Utf8EncoderSink":{"StringConversionSink":[],"Sink":["String"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.T":"String","Converter.S":"List<int>"},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"StringBuffer":{"StringSink":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_StringStackTrace":{"StackTrace":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"_RandomAccessFile":{"RandomAccessFile":[]},"ServerSocket":{"Stream":["Socket"]},"Socket":{"EventSink":["List<int>"],"Stream":["Uint8List"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[]},"OSError":{"Exception":[]},"FileSystemException":{"Exception":[]},"_FileStream":{"Stream":["List<int>"],"Stream.T":"List<int>"},"_FileStreamConsumer":{"StreamConsumer":["List<int>"]},"_File":{"File":[]},"_StreamSinkImpl0":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl":{"_StreamSinkImpl0":["List<int>"],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[],"_StreamSinkImpl0.T":"List<int>"},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"ArgParserException":{"FormatException":[],"Exception":[]},"CanonicalizedMap":{"Map":["2","3"]},"DigestSink":{"Sink":["Digest"]},"Hash":{"Converter":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"]},"HashSink":{"Sink":["List<int>"]},"_Sha512":{"Converter":["List<int>","Digest"],"StreamTransformer":["List<int>","Digest"],"Converter.T":"Digest","Converter.S":"List<int>"},"_Sha64BitSink":{"Sink":["List<int>"]},"Sha512Sink":{"Sink":["List<int>"]},"ErrInvalidCurve":{"Exception":[]},"EllipticCurve":{"Curve":[]},"EllipticException":{"Exception":[]},"PublicKey":{"AffinePoint":[]},"HexCodec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"HexEncoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.T":"String","Converter.S":"List<int>"},"CaseInsensitiveMap":{"CanonicalizedMap":["String","String","1"],"Map":["String","1"],"CanonicalizedMap.K":"String","CanonicalizedMap.V":"1","CanonicalizedMap.C":"String"},"ChunkedCodingDecoder":{"Converter":["List<int>","List<int>"],"StreamTransformer":["List<int>","List<int>"],"Converter.T":"List<int>","Converter.S":"List<int>"},"_Sink":{"ByteConversionSink":[],"ChunkedConversionSink":["List<int>"],"Sink":["List<int>"]},"ASN1Sequence":{"ASN1Object":[]},"ASN1Integer":{"ASN1Object":[]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"Headers":{"UnmodifiableMapView":["String","List<String>"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["String","List<String>"],"MapView":["String","List<String>"],"_UnmodifiableMapMixin":["String","List<String>"],"Map":["String","List<String>"],"MapView.K":"String","MapView.V":"List<String>"},"ShelfUnmodifiableMap":{"UnmodifiableMapView":["String","Object"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["String","Object"],"MapView":["String","Object"],"_UnmodifiableMapMixin":["String","Object"],"Map":["String","Object"],"MapView.K":"String","MapView.V":"Object"},"_EmptyShelfUnmodifiableMap":{"ShelfUnmodifiableMap":[],"MapView":["String","Object"],"Map":["String","Object"],"MapView.K":"String","MapView.V":"Object"},"_RouteNotFoundResponse":{"Response":[]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"Chain":{"StackTrace":[]},"LazyChain":{"Chain":[],"StackTrace":[]},"Trace":{"StackTrace":[]},"UnparsedFrame":{"Frame":[]},"StringScannerException":{"FormatException":[],"Exception":[]},"TypedDataBuffer":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_IntBuffer":{"TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8Buffer":{"TypedDataBuffer":["int"],"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","TypedDataBuffer.E":"int"}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"_HttpOutboundMessage":1,"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"StreamTransformerBase":2,"IterableBase":1,"ListBase":1,"MapBase":2,"_ListBase_Object_ListMixin":1}'));
  var string$ = {
    x20must_: " must not be greater than the number of characters in the file, ",
    x3d_____: "===== asynchronous gap ===========================\n",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Cannotff: "Cannot extract a file path from a URI with a fragment component",
    Cannotfq: "Cannot extract a file path from a URI with a query component",
    Cannotn: "Cannot extract a non-Windows file path from a file URI with an authority",
    Could_: 'Could not find an option with short name "-',
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    handle: "handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_dynamic: findType("@<@>"),
      ASN1Object: findType("ASN1Object"),
      Account: findType("Account"),
      ArgParser: findType("ArgParser"),
      AsyncError: findType("AsyncError"),
      BigInt: findType("BigInt"),
      Block: findType("Block"),
      Chain: findType("Chain"),
      CodeUnits: findType("CodeUnits"),
      Comparable_dynamic: findType("Comparable<@>"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      Cookie: findType("Cookie"),
      DateTime: findType("DateTime"),
      Digest: findType("Digest"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      EventSink_String: findType("EventSink<String>"),
      Exception: findType("Exception"),
      FileSpan: findType("FileSpan"),
      FormatException: findType("FormatException"),
      Frame: findType("Frame"),
      Frame_Function_Frame: findType("Frame(Frame)"),
      Frame_Function_String: findType("Frame(String)"),
      Function: findType("Function"),
      FutureOr_Response: findType("Response/"),
      FutureOr_Response_Function_Request: findType("Response/(Request)"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      Gladiator: findType("Gladiator"),
      HexCodec: findType("HexCodec"),
      HttpRequest: findType("HttpRequest"),
      HttpResponse: findType("HttpResponse"),
      HttpServer: findType("HttpServer"),
      InternalStyle: findType("InternalStyle"),
      Invocation: findType("Invocation"),
      IterableEquality_ASN1Object: findType("IterableEquality<ASN1Object>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_ASN1Object: findType("JSArray<ASN1Object>"),
      JSArray_Account: findType("JSArray<Account>"),
      JSArray_Block: findType("JSArray<Block>"),
      JSArray_Cookie: findType("JSArray<Cookie>"),
      JSArray_Frame: findType("JSArray<Frame>"),
      JSArray_Gladiator: findType("JSArray<Gladiator>"),
      JSArray_GladiatorInput: findType("JSArray<GladiatorInput>"),
      JSArray_GladiatorOutput: findType("JSArray<GladiatorOutput>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_RouterEntry: findType("JSArray<RouterEntry>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Trace: findType("JSArray<Trace>"),
      JSArray_Tx: findType("JSArray<Tx>"),
      JSArray_TxInput: findType("JSArray<TxInput>"),
      JSArray_TxOutput: findType("JSArray<TxOutput>"),
      JSArray_WalletOutput: findType("JSArray<WalletOutput>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_String_BigInt: findType("JsLinkedHashMap<String,BigInt>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      LinkedList__HttpConnection: findType("LinkedList<_HttpConnection>"),
      ListQueue_String: findType("ListQueue<String>"),
      List_Account: findType("List<Account>"),
      List_String: findType("List<String>"),
      List_Tx: findType("List<Tx>"),
      List_WalletOutput: findType("List<WalletOutput>"),
      List__Highlight: findType("List<_Highlight>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable__Highlight: findType("List<_Highlight?>"),
      MapEntry_String_Object: findType("MapEntry<String,Object>"),
      MapEntry_String_String: findType("MapEntry<String,String>"),
      MapEntry_of_String_and_List_String: findType("MapEntry<String,List<String>>"),
      MapEntry_of_String_and_nullable_List_String: findType("MapEntry<String,List<String>?>"),
      MapEntry_of_String_and_nullable_Object: findType("MapEntry<String,Object?>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_String_and_List_String: findType("Map<String,List<String>>"),
      MappedIterable_String_Frame: findType("MappedIterable<String,Frame>"),
      MappedListIterable_Frame_Frame: findType("MappedListIterable<Frame,Frame>"),
      MappedListIterable_String_Trace: findType("MappedListIterable<String,Trace>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MediaType: findType("MediaType"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      Option: findType("Option"),
      Pattern: findType("Pattern"),
      RandomAccessFile: findType("RandomAccessFile"),
      RegExp: findType("RegExp"),
      RegExpMatch: findType("RegExpMatch"),
      Request: findType("Request"),
      Response: findType("Response"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ReversedListIterable_int: findType("ReversedListIterable<int>"),
      Script: findType("Script"),
      ShelfUnmodifiableMap: findType("ShelfUnmodifiableMap"),
      Sink_Digest: findType("Sink<Digest>"),
      Sink_List_int: findType("Sink<List<int>>"),
      Sink_String: findType("Sink<String>"),
      Socket: findType("Socket"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      StackTrace: findType("StackTrace"),
      StreamController_Uint8List: findType("StreamController<Uint8List>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_String: findType("Stream<String>"),
      Stream_Uint8List: findType("Stream<Uint8List>"),
      String: findType("String"),
      StringBuffer: findType("StringBuffer"),
      StringConversionSink: findType("StringConversionSink"),
      String_Function_Match: findType("String(Match)"),
      Symbol: findType("Symbol0"),
      Timer: findType("Timer"),
      Trace: findType("Trace"),
      Trace_Function_String: findType("Trace(String)"),
      Tuple3_of_List_String_and_String_and_String: findType("Tuple3<List<String>,String,String>"),
      Tx: findType("Tx"),
      TxInput: findType("TxInput"),
      TxOutput: findType("TxOutput"),
      TypeError: findType("TypeError"),
      Uint32List: findType("Uint32List"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableMapView_String_ArgParser: findType("UnmodifiableMapView<String,ArgParser>"),
      UnmodifiableMapView_String_Option: findType("UnmodifiableMapView<String,Option>"),
      UnmodifiableMapView_String_String: findType("UnmodifiableMapView<String,String>"),
      Uri: findType("Uri"),
      Utf8Codec: findType("Utf8Codec"),
      WalletOutput: findType("WalletOutput"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      Zone: findType("Zone"),
      _AsyncCompleter_Socket: findType("_AsyncCompleter<Socket>"),
      _AsyncCompleter_bool: findType("_AsyncCompleter<bool>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _BoundSinkStream_dynamic_String: findType("_BoundSinkStream<@,String>"),
      _ConverterStreamEventSink_dynamic_dynamic: findType("_ConverterStreamEventSink<@,@>"),
      _DelayedEvent_dynamic: findType("_DelayedEvent<@>"),
      _FileStream: findType("_FileStream"),
      _Future_Socket: findType("_Future<Socket>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_File: findType("_Future<File?>"),
      _Future_void: findType("_Future<~>"),
      _Highlight: findType("_Highlight"),
      _HttpIncoming: findType("_HttpIncoming"),
      _HttpSession: findType("_HttpSession"),
      _Line: findType("_Line"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _StreamIterator_String: findType("_StreamIterator<String>"),
      _SyncCompleter_nullable_File: findType("_SyncCompleter<File?>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,Object,StackTrace)>"),
      bool: findType("bool"),
      bool_Function_Frame: findType("bool(Frame)"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_2_Never_and_Never: findType("@(0&,0&)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_File: findType("File?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Future_dynamic: findType("Future<@>?"),
      nullable_IOOverrides: findType("IOOverrides?"),
      nullable_Iterable_String: findType("Iterable<String>?"),
      nullable_List_Cookie: findType("List<Cookie>?"),
      nullable_List_String: findType("List<String>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_Map_String_String: findType("Map<String,String>?"),
      nullable_Map_of_String_and_nullable_Object: findType("Map<String,Object?>?"),
      nullable_Map_of_String_and_nullable_String: findType("Map<String,String?>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_Object: findType("Object?"),
      nullable_Response: findType("Response?"),
      nullable_ServerSocket: findType("ServerSocket?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_StackZoneSpecification: findType("StackZoneSpecification?"),
      nullable_StreamController_Uint8List: findType("StreamController<Uint8List>?"),
      nullable_StreamSubscription_Uint8List: findType("StreamSubscription<Uint8List>?"),
      nullable_Stream_List_int: findType("Stream<List<int>>?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_String_Function_String: findType("String(String)?"),
      nullable_Uri: findType("Uri?"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable_ZoneSpecification: findType("ZoneSpecification?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable_bool_Function_dynamic: findType("bool(@)?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_HttpRequest: findType("~(HttpRequest)?"),
      nullable_void_Function_List_int: findType("~(List<int>)?"),
      nullable_void_Function_Uint8List: findType("~(Uint8List)?"),
      nullable_void_Function__HttpIncoming: findType("~(_HttpIncoming)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_2_String_and_List_String: findType("~(String,List<String>)"),
      void_Function_List_int: findType("~(List<int>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_Timer: findType("~(Timer)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AsciiDecoder_false_127 = new A.AsciiDecoder(false, 127);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_ChunkedCodingDecoder = new A.ChunkedCodingDecoder();
    B.C_DefaultEquality = new A.DefaultEquality(A.findType("DefaultEquality<0&>"));
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_Endian = new A.Endian();
    B.C_Endian0 = new A.Endian();
    B.C_HexCodec = new A.HexCodec();
    B.C_HexEncoder = new A.HexEncoder();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_Latin1Codec = new A.Latin1Codec();
    B.C_ListEquality = new A.ListEquality(A.findType("ListEquality<@>"));
    B.C_OptionType = new A.OptionType();
    B.C_OptionType0 = new A.OptionType();
    B.C_OptionType1 = new A.OptionType();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_SocketOption = new A.SocketOption();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__Required = new A._Required();
    B.C__RootZone = new A._RootZone();
    B.C__Sha512 = new A._Sha512();
    B.Duration_0 = new A.Duration(0);
    B.Duration_120000000 = new A.Duration(120000000);
    B.FileMode_0 = new A.FileMode(0);
    B.FileMode_1 = new A.FileMode(1);
    B.FileMode_2 = new A.FileMode(2);
    B.FileMode_3 = new A.FileMode(3);
    B.FileMode_4 = new A.FileMode(4);
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.JsonEncoder_null = new A.JsonEncoder(null);
    B.Latin1Decoder_false_255 = new A.Latin1Decoder(false, 255);
    B.Latin1Encoder_255 = new A.Latin1Encoder(255);
    B.List_239_191_189 = A._setArrayType(makeConstList([239, 191, 189]), type$.JSArray_int);
    B.List_2Vk = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_2Vk1 = A._setArrayType(makeConstList([72, 84, 84, 80, 47, 49, 46, 48]), type$.JSArray_int);
    B.List_2Vk0 = A._setArrayType(makeConstList([72, 84, 84, 80, 47, 49, 46, 49]), type$.JSArray_int);
    B.List_65533 = A._setArrayType(makeConstList([65533]), type$.JSArray_int);
    B.List_72_84_84_80 = A._setArrayType(makeConstList([72, 84, 84, 80]), type$.JSArray_int);
    B.List_A8J = A._setArrayType(makeConstList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", '"', "/", "[", "]", "?", "=", "{", "}"]), type$.JSArray_String);
    B.List_CVk = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_E7y = A._setArrayType(makeConstList([13, 10, 48, 13, 10, 13, 10]), type$.JSArray_int);
    B.List_E7y0 = A._setArrayType(makeConstList([72, 84, 84, 80, 47, 49, 46]), type$.JSArray_int);
    B.List_ECn = A._setArrayType(makeConstList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]), type$.JSArray_dynamic);
    B.List_JYB = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.List_NUU = A._setArrayType(makeConstList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]), A.findType("JSArray<bool>"));
    B.List_a9P = A._setArrayType(makeConstList(["ACL", "BASELINE-CONTROL", "BIND", "CHECKIN", "CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LABEL", "LINK", "LOCK", "MERGE", "MKACTIVITY", "MKCALENDAR", "MKCOL", "MKREDIRECTREF", "MKWORKSPACE", "MOVE", "OPTIONS", "ORDERPATCH", "PATCH", "POST", "PRI", "PROPFIND", "PROPPATCH", "PUT", "REBIND", "REPORT", "SEARCH", "TRACE", "UNBIND", "UNCHECKOUT", "UNLINK", "UNLOCK", "UPDATE", "UPDATEREDIRECTREF", "VERSION-CONTROL"]), type$.JSArray_String);
    B.List_cGl = A._setArrayType(makeConstList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70]), type$.JSArray_int);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_gRj = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_h8w = A._setArrayType(makeConstList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]), type$.JSArray_dynamic);
    B.List_nxB = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qFt = A._setArrayType(makeConstList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767]), type$.JSArray_int);
    B.List_qNA = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qg40 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qg4 = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_yTu = A._setArrayType(makeConstList([48, 13, 10, 13, 10]), type$.JSArray_int);
    B.Map_empty = new A.ConstantStringMap(0, {}, B.List_empty, A.findType("ConstantStringMap<String,List<String>>"));
    B.Map_empty1 = new A.ConstantStringMap(0, {}, B.List_empty, A.findType("ConstantStringMap<String,String?>"));
    B.List_empty2 = A._setArrayType(makeConstList([]), A.findType("JSArray<Symbol0>"));
    B.Map_empty0 = new A.ConstantStringMap(0, {}, B.List_empty2, A.findType("ConstantStringMap<Symbol0,@>"));
    B.Script_0 = new A.Script("INCIPIO");
    B.Script_1 = new A.Script("EFECTUS");
    B.Script_2 = new A.Script("CONFOSSUS");
    B.Script_3 = new A.Script("EXPRESSI");
    B.Symbol_call = new A.Symbol("call");
    B.Type_ErrInvalidCurve_lZK = A.typeLiteral("ErrInvalidCurve");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.Map_empty2 = new A.ConstantStringMap(0, {}, B.List_empty, A.findType("ConstantStringMap<String,Object>"));
    B._EmptyShelfUnmodifiableMap_Map_empty = new A._EmptyShelfUnmodifiableMap(B.Map_empty2);
    B._IterationMarker_null_2 = new A._IterationMarker(null, 2);
    B._RegisterBinaryZoneFunction_kGu = new A._RegisterBinaryZoneFunction(B.C__RootZone, A.async___rootRegisterBinaryCallback$closure());
    B._RegisterNullaryZoneFunction__RootZone__rootRegisterCallback = new A._RegisterNullaryZoneFunction(B.C__RootZone, A.async___rootRegisterCallback$closure());
    B._RegisterUnaryZoneFunction_Bqo = new A._RegisterUnaryZoneFunction(B.C__RootZone, A.async___rootRegisterUnaryCallback$closure());
    B._RunBinaryZoneFunction__RootZone__rootRunBinary = new A._RunBinaryZoneFunction(B.C__RootZone, A.async___rootRunBinary$closure());
    B._RunNullaryZoneFunction__RootZone__rootRun = new A._RunNullaryZoneFunction(B.C__RootZone, A.async___rootRun$closure());
    B._RunUnaryZoneFunction__RootZone__rootRunUnary = new A._RunUnaryZoneFunction(B.C__RootZone, A.async___rootRunUnary$closure());
    B._State_Oj8 = new A._State("end before LF");
    B._State_body = new A._State("body");
    B._State_boundary = new A._State("boundary");
    B._State_cg9 = new A._State("body before CR");
    B._State_cg90 = new A._State("body before LF");
    B._State_end = new A._State("end");
    B._State_iSl = new A._State("size before LF");
    B._State_size = new A._State("size");
    B._State_zlF = new A._State("end before CR");
    B._StringStackTrace_3uE = new A._StringStackTrace("");
    B._ZoneFunction_3bB = new A._ZoneFunction(B.C__RootZone, A.async___rootCreatePeriodicTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))>"));
    B._ZoneFunction_NMc = new A._ZoneFunction(B.C__RootZone, A.async___rootHandleUncaughtError$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
    B._ZoneFunction__RootZone__rootCreateTimer = new A._ZoneFunction(B.C__RootZone, A.async___rootCreateTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~())>"));
    B._ZoneFunction__RootZone__rootErrorCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootErrorCallback$closure(), A.findType("_ZoneFunction<AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)>"));
    B._ZoneFunction__RootZone__rootFork = new A._ZoneFunction(B.C__RootZone, A.async___rootFork$closure(), A.findType("_ZoneFunction<Zone(Zone,ZoneDelegate,Zone,ZoneSpecification?,Map<Object?,Object?>?)>"));
    B._ZoneFunction__RootZone__rootPrint = new A._ZoneFunction(B.C__RootZone, A.async___rootPrint$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,String)>"));
    B._ZoneFunction__RootZone__rootScheduleMicrotask = new A._ZoneFunction(B.C__RootZone, A.async___rootScheduleMicrotask$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
  })();
  (function staticFields() {
    $._nextServiceId = 1;
    $._HttpServer__servers = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, A.findType("_HttpServer"));
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.printToZone = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = A._js_helper_Primitives_dateNow$closure();
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.Encoding__nameToEncoding = A.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", B.C_Latin1Codec, "iso-ir-100", B.C_Latin1Codec, "iso_8859-1", B.C_Latin1Codec, "iso-8859-1", B.C_Latin1Codec, "latin1", B.C_Latin1Codec, "l1", B.C_Latin1Codec, "ibm819", B.C_Latin1Codec, "cp819", B.C_Latin1Codec, "csisolatin1", B.C_Latin1Codec, "iso-ir-6", B.C_AsciiCodec, "ansi_x3.4-1968", B.C_AsciiCodec, "ansi_x3.4-1986", B.C_AsciiCodec, "iso_646.irv:1991", B.C_AsciiCodec, "iso646-us", B.C_AsciiCodec, "us-ascii", B.C_AsciiCodec, "us", B.C_AsciiCodec, "ibm367", B.C_AsciiCodec, "cp367", B.C_AsciiCodec, "csascii", B.C_AsciiCodec, "ascii", B.C_AsciiCodec, "csutf8", B.C_Utf8Codec, "utf-8", B.C_Utf8Codec], type$.String, A.findType("Encoding"));
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $._FileResourceInfo_openFiles = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, A.findType("_FileResourceInfo"));
    $._stderr = null;
    $.mask = A._setArrayType([255, 1, 3, 7, 15, 31, 63, 127], type$.JSArray_int);
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "ContentType_text", "$get$ContentType_text", () => A._ContentType$("text", "plain", "utf-8", B.Map_empty1));
    _lazyFinal($, "_CopyingBytesBuilder__emptyList", "$get$_CopyingBytesBuilder__emptyList", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "_HttpConnection__connections", "$get$_HttpConnection__connections", () => A.HashMap_HashMap(type$.int, A.findType("_HttpConnection")));
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), A.findType("Future<Null>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazyFinal($, "Future__falseFuture", "$get$Future__falseFuture", () => A._Future$zoneValue(false, B.C__RootZone, type$.bool));
    _lazyFinal($, "_RootZone__rootMap", "$get$_RootZone__rootMap", () => {
      var t1 = type$.dynamic;
      return A.HashMap_HashMap(t1, t1);
    });
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", () => typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32");
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true, false));
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", () => new Error().stack != void 0);
    _lazyFinal($, "_dummyList", "$get$_dummyList", () => A.NativeUint16List_NativeUint16List(0));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false, false));
    _lazyFinal($, "_BigIntImpl__bitsForFromDouble", "$get$_BigIntImpl__bitsForFromDouble", () => A.NativeUint8List_NativeUint8List(8));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", () => {
      A.Primitives_initTicker();
      return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "_IOResourceInfo__sw", "$get$_IOResourceInfo__sw", () => {
      var t1 = new A.Stopwatch();
      $.$get$Stopwatch__frequency();
      t1._core$_start = A.Stopwatch__now() - 0;
      t1._stop = null;
      return t1;
    });
    _lazyFinal($, "_IOResourceInfo__startTime", "$get$_IOResourceInfo__startTime", () => A.DateTime$now()._core$_value);
    _lazyFinal($, "_ioOverridesToken", "$get$_ioOverridesToken", () => new A.Object());
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new A._JSSecureRandom(new DataView(new ArrayBuffer(A._checkLength(8))));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazyFinal($, "Endian_host", "$get$Endian_host", () => A.NativeByteData_NativeByteData$view(A.NativeUint16List__create1(A._ensureNativeList(A._setArrayType([1], type$.JSArray_int))).buffer, 0, null).getInt8(0) === 1 ? B.C_Endian0 : B.C_Endian);
    _lazyFinal($, "Option__invalidChars", "$get$Option__invalidChars", () => A.RegExp_RegExp("[ \\t\\r\\n\"'\\\\/]", true, false));
    _lazyFinal($, "_noise32", "$get$_noise32", () => A.NativeUint32List_NativeUint32List$fromList(A._setArrayType([1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591], type$.JSArray_int)));
    _lazy($, "_p256", "$get$_p256", () => {
      var t4, t5,
        t1 = A._BigIntImpl_parse("115792089210356248762697446949407573530086143415290314195533631308867097853951", 10),
        t2 = A._BigIntImpl__BigIntImpl$from(-3),
        t3 = A._BigIntImpl_parse("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b", 16);
      $.$get$_BigIntImpl_zero();
      t4 = A.AffinePoint$fromXY(A._BigIntImpl_parse("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", 16), A._BigIntImpl_parse("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5", 16));
      t5 = A._BigIntImpl_parse("115792089210356248762697446949407573529996955224135760342422259061068512044369", 10);
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      A.createSentinel();
      return new A.EllipticCurve(t1, t2, t3, t4, 256, t5);
    });
    _lazy($, "ErrInvalidPublicKeyHexLength", "$get$ErrInvalidPublicKeyHexLength", () => A.EllipticException$("publickey hex length is invalid"));
    _lazy($, "ErrInvalidPublicKeyHexPrefix", "$get$ErrInvalidPublicKeyHexPrefix", () => A.EllipticException$("publickey hex prefix is invalid"));
    _lazyFinal($, "_escapedChar", "$get$_escapedChar", () => A.RegExp_RegExp('["\\x00-\\x1F\\x7F]', true, false));
    _lazyFinal($, "token", "$get$token", () => A.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', true, false));
    _lazyFinal($, "_lws", "$get$_lws", () => A.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", true, false));
    _lazyFinal($, "_quotedString", "$get$_quotedString", () => A.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"', true, false));
    _lazyFinal($, "_quotedPair", "$get$_quotedPair", () => A.RegExp_RegExp("\\\\(.)", true, false));
    _lazyFinal($, "nonToken", "$get$nonToken", () => A.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', true, false));
    _lazyFinal($, "whitespace", "$get$whitespace", () => A.RegExp_RegExp("(?:" + $.$get$_lws().pattern + ")*", true, false));
    _lazyFinal($, "_byteMask", "$get$_byteMask", () => A._BigIntImpl__BigIntImpl$from(255));
    _lazyFinal($, "windows", "$get$windows", () => A.Context_Context($.$get$Style_windows()));
    _lazyFinal($, "context", "$get$context", () => new A.Context(type$.InternalStyle._as($.$get$Style_platform()), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("[^/]$", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true, false), A.RegExp_RegExp("[^/\\\\]$", true, false), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true, false), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true, false)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true, false), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "_emptyHeaders", "$get$_emptyHeaders", () => new A.Headers(B.Map_empty));
    _lazyFinal($, "_defaultHeaders", "$get$_defaultHeaders", () => A.Headers_Headers$from(A.LinkedHashMap_LinkedHashMap$_literal(["content-length", A._setArrayType(["0"], type$.JSArray_String)], type$.String, type$.List_String)));
    _lazyFinal($, "_removeBody", "$get$_removeBody", () => A.createMiddleware(new A._removeBody_closure()));
    _lazyFinal($, "Router_routeNotFound", "$get$Router_routeNotFound", () => {
      var _null = null,
        _s15_ = "Route not found",
        t1 = A.Body_Body(_s15_, _null);
      t1 = new A._RouteNotFoundResponse(404, A.Headers_Headers$from(A._adjustHeaders(A.expandToHeadersAll(_null), t1)), A.ShelfUnmodifiableMap_ShelfUnmodifiableMap(_null, false), t1);
      t1.Response$5$body$context$encoding$headers(404, _s15_, _null, _null, _null);
      return t1;
    });
    _lazyFinal($, "_RouteNotFoundResponse__messageBytes", "$get$_RouteNotFoundResponse__messageBytes", () => B.C_Utf8Codec.encode$1("Route not found"));
    _lazyFinal($, "RouterEntry__parser", "$get$RouterEntry__parser", () => A.RegExp_RegExp("([^<]*)(?:<([^>|]+)(?:\\|([^>]*))?>)?", true, false));
    _lazyFinal($, "_specKey", "$get$_specKey", () => new A.Object());
    _lazyFinal($, "_vmFrame", "$get$_vmFrame", () => A.RegExp_RegExp("^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$", true, false));
    _lazyFinal($, "_v8Frame", "$get$_v8Frame", () => A.RegExp_RegExp("^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$", true, false));
    _lazyFinal($, "_v8UrlLocation", "$get$_v8UrlLocation", () => A.RegExp_RegExp("^(.*?):(\\d+)(?::(\\d+))?$|native$", true, false));
    _lazyFinal($, "_v8EvalLocation", "$get$_v8EvalLocation", () => A.RegExp_RegExp("^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$", true, false));
    _lazyFinal($, "_firefoxEvalLocation", "$get$_firefoxEvalLocation", () => A.RegExp_RegExp("(\\S+)@(\\S+) line (\\d+) >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariFrame", "$get$_firefoxSafariFrame", () => A.RegExp_RegExp("^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$", true, false));
    _lazyFinal($, "_friendlyFrame", "$get$_friendlyFrame", () => A.RegExp_RegExp("^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$", true, false));
    _lazyFinal($, "_asyncBody", "$get$_asyncBody", () => A.RegExp_RegExp("<(<anonymous closure>|[^>]+)_async_body>", true, false));
    _lazyFinal($, "_initialDot", "$get$_initialDot", () => A.RegExp_RegExp("^\\.", true, false));
    _lazyFinal($, "Frame__uriRegExp", "$get$Frame__uriRegExp", () => A.RegExp_RegExp("^[a-zA-Z][-+.a-zA-Z\\d]*://", true, false));
    _lazyFinal($, "Frame__windowsRegExp", "$get$Frame__windowsRegExp", () => A.RegExp_RegExp("^([a-zA-Z]:[\\\\/]|\\\\\\\\)", true, false));
    _lazyFinal($, "_terseRegExp", "$get$_terseRegExp", () => A.RegExp_RegExp("(-patch)?([/\\\\].*)?$", true, false));
    _lazyFinal($, "_v8Trace", "$get$_v8Trace", () => A.RegExp_RegExp("\\n    ?at ", true, false));
    _lazyFinal($, "_v8TraceLine", "$get$_v8TraceLine", () => A.RegExp_RegExp("    ?at ", true, false));
    _lazyFinal($, "_firefoxEvalTrace", "$get$_firefoxEvalTrace", () => A.RegExp_RegExp("@\\S+ line \\d+ >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariTrace", "$get$_firefoxSafariTrace", () => A.RegExp_RegExp("^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$", true, true));
    _lazyFinal($, "_friendlyTrace", "$get$_friendlyTrace", () => A.RegExp_RegExp("^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true, true));
    _lazyFinal($, "vmChainGap", "$get$vmChainGap", () => A.RegExp_RegExp("^<asynchronous suspension>\\n?$", true, true));
    _lazyFinal($, "Utils__random", "$get$Utils__random", () => A.Random_Random$secure());
    _lazyFinal($, "Wallet_curve", "$get$Wallet_curve", () => $.$get$_p256());
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = function(args) {
      return A.main(A.convertMainArgumentList(args));
    };
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=out.js.map
